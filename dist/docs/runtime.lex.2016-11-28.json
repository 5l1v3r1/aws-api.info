{"Metadata":{"APIVersion":"2016-11-28","EndpointPrefix":"runtime.lex","SigningName":"lex","ServiceAbbreviation":"","ServiceFullName":"Amazon Lex Runtime Service","SignatureVersion":"v4","JSONVersion":"1.1","TargetPrefix":"","Protocol":"rest-json","UID":"runtime.lex-2016-11-28","EndpointsID":"runtime.lex","NoResolveEndpoint":false},"Operations":{"PostContent":{"ExportedName":"PostContent","Name":"PostContent","Documentation":"\u003cp\u003e Sends user input (text or speech) to Amazon Lex. Clients use this API to send requests to Amazon Lex at runtime. Amazon Lex interprets the user input using the machine learning model that it built for the bot. \u003c/p\u003e \u003cp\u003e In response, Amazon Lex returns the next message to convey to the user. Consider the following example messages: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e For a user input \"I would like a pizza,\" Amazon Lex might return a response with a message eliciting slot data (for example, \u003ccode\u003ePizzaSize\u003c/code\u003e): \"What size pizza would you like?\". \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e After the user provides all of the pizza order information, Amazon Lex might return a response with a message to get user confirmation: \"Order the pizza?\". \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e After the user replies \"Yes\" to the confirmation prompt, Amazon Lex might return a conclusion statement: \"Thank you, your cheese pizza has been ordered.\". \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003e Not all Amazon Lex messages require a response from the user. For example, conclusion statements do not require a response. Some messages require only a yes or no response. In addition to the \u003ccode\u003emessage\u003c/code\u003e, Amazon Lex provides additional context about the message in the response that you can use to enhance client behavior, such as displaying the appropriate client user interface. Consider the following examples: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e If the message is to elicit slot data, Amazon Lex returns the following context information: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ex-amz-lex-dialog-state\u003c/code\u003e header set to \u003ccode\u003eElicitSlot\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ex-amz-lex-intent-name\u003c/code\u003e header set to the intent name in the current context \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ex-amz-lex-slot-to-elicit\u003c/code\u003e header set to the slot name for which the \u003ccode\u003emessage\u003c/code\u003e is eliciting information \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ex-amz-lex-slots\u003c/code\u003e header set to a map of slots configured for the intent with their current values \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e If the message is a confirmation prompt, the \u003ccode\u003ex-amz-lex-dialog-state\u003c/code\u003e header is set to \u003ccode\u003eConfirmation\u003c/code\u003e and the \u003ccode\u003ex-amz-lex-slot-to-elicit\u003c/code\u003e header is omitted. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e If the message is a clarification prompt configured for the intent, indicating that the user intent is not understood, the \u003ccode\u003ex-amz-dialog-state\u003c/code\u003e header is set to \u003ccode\u003eElicitIntent\u003c/code\u003e and the \u003ccode\u003ex-amz-slot-to-elicit\u003c/code\u003e header is omitted. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003e In addition, Amazon Lex also returns your application-specific \u003ccode\u003esessionAttributes\u003c/code\u003e. For more information, see \u003ca href=\"http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\"\u003eManaging Conversation Context\u003c/a\u003e. \u003c/p\u003e","HTTP":{"Method":"POST","RequestURI":"/bot/{botName}/alias/{botAlias}/user/{userId}/content","ResponseCode":0},"input":{"Documentation":"","shape":"PostContentInput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"output":{"Documentation":"","shape":"PostContentOutput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"errors":[{"Documentation":"","shape":"NotFoundException","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},{"Documentation":"","shape":"BadRequestException","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},{"Documentation":"","shape":"LimitExceededException","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},{"Documentation":"","shape":"InternalFailureException","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},{"Documentation":"","shape":"ConflictException","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},{"Documentation":"","shape":"UnsupportedMediaTypeException","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},{"Documentation":"","shape":"NotAcceptableException","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},{"Documentation":"","shape":"RequestTimeoutException","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},{"Documentation":"","shape":"DependencyFailedException","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},{"Documentation":"","shape":"BadGatewayException","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},{"Documentation":"","shape":"LoopDetectedException","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false}],"Paginator":null,"deprecated":false,"authtype":"v4-unsigned-body"},"PostText":{"ExportedName":"PostText","Name":"PostText","Documentation":"\u003cp\u003eSends user input (text-only) to Amazon Lex. Client applications can use this API to send requests to Amazon Lex at runtime. Amazon Lex then interprets the user input using the machine learning model it built for the bot. \u003c/p\u003e \u003cp\u003e In response, Amazon Lex returns the next \u003ccode\u003emessage\u003c/code\u003e to convey to the user an optional \u003ccode\u003eresponseCard\u003c/code\u003e to display. Consider the following example messages: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e For a user input \"I would like a pizza\", Amazon Lex might return a response with a message eliciting slot data (for example, PizzaSize): \"What size pizza would you like?\" \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e After the user provides all of the pizza order information, Amazon Lex might return a response with a message to obtain user confirmation \"Proceed with the pizza order?\". \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e After the user replies to a confirmation prompt with a \"yes\", Amazon Lex might return a conclusion statement: \"Thank you, your cheese pizza has been ordered.\". \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003e Not all Amazon Lex messages require a user response. For example, a conclusion statement does not require a response. Some messages require only a \"yes\" or \"no\" user response. In addition to the \u003ccode\u003emessage\u003c/code\u003e, Amazon Lex provides additional context about the message in the response that you might use to enhance client behavior, for example, to display the appropriate client user interface. These are the \u003ccode\u003eslotToElicit\u003c/code\u003e, \u003ccode\u003edialogState\u003c/code\u003e, \u003ccode\u003eintentName\u003c/code\u003e, and \u003ccode\u003eslots\u003c/code\u003e fields in the response. Consider the following examples: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf the message is to elicit slot data, Amazon Lex returns the following context information:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003edialogState\u003c/code\u003e set to ElicitSlot \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eintentName\u003c/code\u003e set to the intent name in the current context \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eslotToElicit\u003c/code\u003e set to the slot name for which the \u003ccode\u003emessage\u003c/code\u003e is eliciting information \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eslots\u003c/code\u003e set to a map of slots, configured for the intent, with currently known values \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e If the message is a confirmation prompt, the \u003ccode\u003edialogState\u003c/code\u003e is set to ConfirmIntent and \u003ccode\u003eSlotToElicit\u003c/code\u003e is set to null. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf the message is a clarification prompt (configured for the intent) that indicates that user intent is not understood, the \u003ccode\u003edialogState\u003c/code\u003e is set to ElicitIntent and \u003ccode\u003eslotToElicit\u003c/code\u003e is set to null. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003e In addition, Amazon Lex also returns your application-specific \u003ccode\u003esessionAttributes\u003c/code\u003e. For more information, see \u003ca href=\"http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\"\u003eManaging Conversation Context\u003c/a\u003e. \u003c/p\u003e","HTTP":{"Method":"POST","RequestURI":"/bot/{botName}/alias/{botAlias}/user/{userId}/text","ResponseCode":0},"input":{"Documentation":"","shape":"PostTextInput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"output":{"Documentation":"","shape":"PostTextOutput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"errors":[{"Documentation":"","shape":"NotFoundException","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},{"Documentation":"","shape":"BadRequestException","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},{"Documentation":"","shape":"LimitExceededException","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},{"Documentation":"","shape":"InternalFailureException","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},{"Documentation":"","shape":"ConflictException","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},{"Documentation":"","shape":"DependencyFailedException","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},{"Documentation":"","shape":"BadGatewayException","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},{"Documentation":"","shape":"LoopDetectedException","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false}],"Paginator":null,"deprecated":false,"authtype":""}},"Shapes":{"Accept":{"ShapeName":"Accept","Documentation":"","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"BadGatewayException":{"ShapeName":"BadGatewayException","Documentation":"\u003cp\u003eEither the Amazon Lex bot is still building, or one of the dependent services (Amazon Polly, AWS Lambda) failed with an internal service error.\u003c/p\u003e","members":{"Message":{"Documentation":"","shape":"ErrorMessage","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":true,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":true,"error":{"Code":"","HTTPStatusCode":502}},"BadRequestException":{"ShapeName":"BadRequestException","Documentation":"\u003cp\u003e Request validation failed, there is no usable message in the context, or the bot build failed. \u003c/p\u003e","members":{"Message":{"Documentation":"","shape":"String","Location":"","LocationName":"message","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":true,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":true,"error":{"Code":"","HTTPStatusCode":400}},"BlobStream":{"ShapeName":"BlobStream","Documentation":"","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"blob","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":true,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"BotAlias":{"ShapeName":"BotAlias","Documentation":"","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"BotName":{"ShapeName":"BotName","Documentation":"","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"Button":{"ShapeName":"Button","Documentation":"\u003cp\u003eRepresents an option to be shown on the client platform (Facebook, Slack, etc.)\u003c/p\u003e","members":{"Text":{"Documentation":"\u003cp\u003eText that is visible to the user on the button.\u003c/p\u003e","shape":"ButtonTextStringWithLength","Location":"","LocationName":"text","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Value":{"Documentation":"\u003cp\u003eThe value sent to Amazon Lex when a user chooses the button. For example, consider button text \"NYC.\" When the user chooses the button, the value sent can be \"New York City.\"\u003c/p\u003e","shape":"ButtonValueStringWithLength","Location":"","LocationName":"value","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":["Text","Value"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"ButtonTextStringWithLength":{"ShapeName":"ButtonTextStringWithLength","Documentation":"","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":1,"Max":15,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"ButtonValueStringWithLength":{"ShapeName":"ButtonValueStringWithLength","Documentation":"","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":1,"Max":1000,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"ConflictException":{"ShapeName":"ConflictException","Documentation":"\u003cp\u003e Two clients are using the same AWS account, Amazon Lex bot, and user ID. \u003c/p\u003e","members":{"Message":{"Documentation":"","shape":"String","Location":"","LocationName":"message","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":true,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":true,"error":{"Code":"","HTTPStatusCode":409}},"ContentType":{"ShapeName":"ContentType","Documentation":"","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":["application/vnd.amazonaws.card.generic"],"EnumConsts":["ContentTypeApplicationVndAmazonawsCardGeneric"],"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"DependencyFailedException":{"ShapeName":"DependencyFailedException","Documentation":"\u003cp\u003e One of the downstream dependencies, such as AWS Lambda or Amazon Polly, threw an exception. For example, if Amazon Lex does not have sufficient permissions to call a Lambda function, it results in Lambda throwing an exception. \u003c/p\u003e","members":{"Message":{"Documentation":"","shape":"ErrorMessage","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":true,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":true,"error":{"Code":"","HTTPStatusCode":424}},"DialogState":{"ShapeName":"DialogState","Documentation":"","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":["ElicitIntent","ConfirmIntent","ElicitSlot","Fulfilled","ReadyForFulfillment","Failed"],"EnumConsts":["DialogStateElicitIntent","DialogStateConfirmIntent","DialogStateElicitSlot","DialogStateFulfilled","DialogStateReadyForFulfillment","DialogStateFailed"],"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"ErrorMessage":{"ShapeName":"ErrorMessage","Documentation":"","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"GenericAttachment":{"ShapeName":"GenericAttachment","Documentation":"\u003cp\u003eRepresents an option rendered to the user when a prompt is shown. It could be an image, a button, a link, or text. \u003c/p\u003e","members":{"AttachmentLinkUrl":{"Documentation":"\u003cp\u003eThe URL of an attachment to the response card.\u003c/p\u003e","shape":"StringUrlWithLength","Location":"","LocationName":"attachmentLinkUrl","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Buttons":{"Documentation":"\u003cp\u003eThe list of options to show to the user.\u003c/p\u003e","shape":"ListOfButtons","Location":"","LocationName":"buttons","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"ImageUrl":{"Documentation":"\u003cp\u003eThe URL of an image that is displayed to the user.\u003c/p\u003e","shape":"StringUrlWithLength","Location":"","LocationName":"imageUrl","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"SubTitle":{"Documentation":"\u003cp\u003eThe subtitle shown below the title.\u003c/p\u003e","shape":"StringWithLength","Location":"","LocationName":"subTitle","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Title":{"Documentation":"\u003cp\u003eThe title of the option.\u003c/p\u003e","shape":"StringWithLength","Location":"","LocationName":"title","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"GenericAttachmentList":{"ShapeName":"GenericAttachmentList","Documentation":"","members":null,"member":{"Documentation":"","shape":"GenericAttachment","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"list","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":10,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"HttpContentType":{"ShapeName":"HttpContentType","Documentation":"","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"IntentName":{"ShapeName":"IntentName","Documentation":"","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"InternalFailureException":{"ShapeName":"InternalFailureException","Documentation":"\u003cp\u003eInternal service error. Retry the call.\u003c/p\u003e","members":{"Message":{"Documentation":"","shape":"String","Location":"","LocationName":"message","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":true,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":true,"error":{"Code":"","HTTPStatusCode":500}},"LimitExceededException":{"ShapeName":"LimitExceededException","Documentation":"\u003cp\u003eExceeded a limit.\u003c/p\u003e","members":{"Message":{"Documentation":"","shape":"String","Location":"","LocationName":"message","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"RetryAfterSeconds":{"Documentation":"","shape":"String","Location":"header","LocationName":"Retry-After","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":true,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":true,"error":{"Code":"","HTTPStatusCode":429}},"ListOfButtons":{"ShapeName":"ListOfButtons","Documentation":"","members":null,"member":{"Documentation":"","shape":"Button","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"list","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":5,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"LoopDetectedException":{"ShapeName":"LoopDetectedException","Documentation":"\u003cp\u003eLambda fulfilment function returned \u003ccode\u003eDelegateDialogAction\u003c/code\u003e to Amazon Lex without changing any slot values. \u003c/p\u003e","members":{"Message":{"Documentation":"","shape":"ErrorMessage","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":true,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":true,"error":{"Code":"","HTTPStatusCode":508}},"NotAcceptableException":{"ShapeName":"NotAcceptableException","Documentation":"\u003cp\u003eThe accept header in the request does not have a valid value.\u003c/p\u003e","members":{"Message":{"Documentation":"","shape":"String","Location":"","LocationName":"message","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":true,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":true,"error":{"Code":"","HTTPStatusCode":406}},"NotFoundException":{"ShapeName":"NotFoundException","Documentation":"\u003cp\u003eThe resource (such as the Amazon Lex bot or an alias) that is referred to is not found.\u003c/p\u003e","members":{"Message":{"Documentation":"","shape":"String","Location":"","LocationName":"message","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":true,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":true,"error":{"Code":"","HTTPStatusCode":404}},"PostContentInput":{"ShapeName":"PostContentInput","Documentation":"","members":{"Accept":{"Documentation":"\u003cp\u003e You pass this value as the \u003ccode\u003eAccept\u003c/code\u003e HTTP header. \u003c/p\u003e \u003cp\u003e The message Amazon Lex returns in the response can be either text or speech based on the \u003ccode\u003eAccept\u003c/code\u003e HTTP header value in the request. \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e If the value is \u003ccode\u003etext/plain; charset=utf-8\u003c/code\u003e, Amazon Lex returns text in the response. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e If the value begins with \u003ccode\u003eaudio/\u003c/code\u003e, Amazon Lex returns speech in the response. Amazon Lex uses Amazon Polly to generate the speech (using the configuration you specified in the \u003ccode\u003eAccept\u003c/code\u003e header). For example, if you specify \u003ccode\u003eaudio/mpeg\u003c/code\u003e as the value, Amazon Lex returns speech in the MPEG format.\u003c/p\u003e \u003cp\u003eThe following are the accepted values:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eaudio/mpeg\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eaudio/ogg\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eaudio/pcm\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003etext/plain; charset=utf-8\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eaudio/* (defaults to mpeg)\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e","shape":"Accept","Location":"header","LocationName":"Accept","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"BotAlias":{"Documentation":"\u003cp\u003eAlias of the Amazon Lex bot.\u003c/p\u003e","shape":"BotAlias","Location":"uri","LocationName":"botAlias","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"BotName":{"Documentation":"\u003cp\u003eName of the Amazon Lex bot.\u003c/p\u003e","shape":"BotName","Location":"uri","LocationName":"botName","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"ContentType":{"Documentation":"\u003cp\u003e You pass this values as the \u003ccode\u003eContent-Type\u003c/code\u003e HTTP header. \u003c/p\u003e \u003cp\u003e Indicates the audio format or text. The header value must start with one of the following prefixes: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003ePCM format\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eaudio/l16; rate=16000; channels=1\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eaudio/x-l16; sample-rate=16000; channel-count=1\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eOpus format\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eaudio/x-cbr-opus-with-preamble; preamble-size=0; bit-rate=1; frame-size-milliseconds=1.1\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eText format\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003etext/plain; charset=utf-8\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e","shape":"HttpContentType","Location":"header","LocationName":"Content-Type","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"InputStream":{"Documentation":"\u003cp\u003e User input in PCM or Opus audio format or text format as described in the \u003ccode\u003eContent-Type\u003c/code\u003e HTTP header. \u003c/p\u003e","shape":"BlobStream","Location":"","LocationName":"inputStream","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"SessionAttributes":{"Documentation":"\u003cp\u003eYou pass this value in the \u003ccode\u003ex-amz-lex-session-attributes\u003c/code\u003e HTTP header. The value must be map (keys and values must be strings) that is JSON serialized and then base64 encoded.\u003c/p\u003e \u003cp\u003e A session represents dialog between a user and Amazon Lex. At runtime, a client application can pass contextual information, in the request to Amazon Lex. For example, \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eYou might use session attributes to track the requestID of user requests.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIn Getting Started Exercise 1, the example bot uses the price session attribute to maintain the price of flowers ordered (for example, \"price\":25). The code hook (Lambda function) sets this attribute based on the type of flowers ordered. For more information, see \u003ca href=\"http://docs.aws.amazon.com/lex/latest/dg/gs-bp-details-after-lambda.html\"\u003eReview the Details of Information Flow\u003c/a\u003e. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIn the BookTrip bot exercise, the bot uses the \u003ccode\u003ecurrentReservation\u003c/code\u003e session attribute to maintains the slot data during the in-progress conversation to book a hotel or book a car. For more information, see \u003ca href=\"http://docs.aws.amazon.com/lex/latest/dg/book-trip-detail-flow.html\"\u003eDetails of Information Flow\u003c/a\u003e. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003e Amazon Lex passes these session attributes to the Lambda functions configured for the intent In the your Lambda function, you can use the session attributes for initialization and customization (prompts). Some examples are: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e Initialization - In a pizza ordering bot, if you pass user location (for example, \u003ccode\u003e\"Location : 111 Maple Street\"\u003c/code\u003e), then your Lambda function might use this information to determine the closest pizzeria to place the order (and perhaps set the storeAddress slot value as well). \u003c/p\u003e \u003cp\u003e Personalized prompts - For example, you can configure prompts to refer to the user by name (for example, \"Hey [firstName], what toppings would you like?\"). You can pass the user's name as a session attribute (\"firstName\": \"Joe\") so that Amazon Lex can substitute the placeholder to provide a personalized prompt to the user (\"Hey Joe, what toppings would you like?\"). \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cnote\u003e \u003cp\u003e Amazon Lex does not persist session attributes. \u003c/p\u003e \u003cp\u003e If you configured a code hook for the intent, Amazon Lex passes the incoming session attributes to the Lambda function. The Lambda function must return these session attributes if you want Amazon Lex to return them to the client. \u003c/p\u003e \u003cp\u003e If there is no code hook configured for the intent Amazon Lex simply returns the session attributes to the client application. \u003c/p\u003e \u003c/note\u003e","shape":"JSONValue","Location":"header","LocationName":"x-amz-lex-session-attributes","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":true,"deprecated":false},"UserId":{"Documentation":"\u003cp\u003eID of the client application user. Typically, each of your application users should have a unique ID. The application developer decides the user IDs. At runtime, each request must include the user ID. Note the following considerations:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e If you want a user to start conversation on one device and continue the conversation on another device, you might choose a user-specific identifier, such as the user's login, or Amazon Cognito user ID (assuming your application is using Amazon Cognito). \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e If you want the same user to be able to have two independent conversations on two different devices, you might choose device-specific identifier, such as device ID, or some globally unique identifier. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e","shape":"UserId","Location":"uri","LocationName":"userId","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":["BotName","BotAlias","UserId","ContentType","InputStream"],"Payload":"InputStream","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"BotAlias","Ref":{"Documentation":"\u003cp\u003eAlias of the Amazon Lex bot.\u003c/p\u003e","shape":"BotAlias","Location":"uri","LocationName":"botAlias","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Type":0},{"Name":"BotName","Ref":{"Documentation":"\u003cp\u003eName of the Amazon Lex bot.\u003c/p\u003e","shape":"BotName","Location":"uri","LocationName":"botName","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Type":0},{"Name":"ContentType","Ref":{"Documentation":"\u003cp\u003e You pass this values as the \u003ccode\u003eContent-Type\u003c/code\u003e HTTP header. \u003c/p\u003e \u003cp\u003e Indicates the audio format or text. The header value must start with one of the following prefixes: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003ePCM format\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eaudio/l16; rate=16000; channels=1\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eaudio/x-l16; sample-rate=16000; channel-count=1\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eOpus format\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eaudio/x-cbr-opus-with-preamble; preamble-size=0; bit-rate=1; frame-size-milliseconds=1.1\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eText format\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003etext/plain; charset=utf-8\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e","shape":"HttpContentType","Location":"header","LocationName":"Content-Type","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Type":0},{"Name":"InputStream","Ref":{"Documentation":"\u003cp\u003e User input in PCM or Opus audio format or text format as described in the \u003ccode\u003eContent-Type\u003c/code\u003e HTTP header. \u003c/p\u003e","shape":"BlobStream","Location":"","LocationName":"inputStream","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Type":0},{"Name":"UserId","Ref":{"Documentation":"\u003cp\u003eID of the client application user. Typically, each of your application users should have a unique ID. The application developer decides the user IDs. At runtime, each request must include the user ID. Note the following considerations:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e If you want a user to start conversation on one device and continue the conversation on another device, you might choose a user-specific identifier, such as the user's login, or Amazon Cognito user ID (assuming your application is using Amazon Cognito). \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e If you want the same user to be able to have two independent conversations on two different devices, you might choose device-specific identifier, such as device ID, or some globally unique identifier. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e","shape":"UserId","Location":"uri","LocationName":"userId","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Type":0},{"Name":"UserId","Ref":{"Documentation":"\u003cp\u003eID of the client application user. Typically, each of your application users should have a unique ID. The application developer decides the user IDs. At runtime, each request must include the user ID. Note the following considerations:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e If you want a user to start conversation on one device and continue the conversation on another device, you might choose a user-specific identifier, such as the user's login, or Amazon Cognito user ID (assuming your application is using Amazon Cognito). \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e If you want the same user to be able to have two independent conversations on two different devices, you might choose device-specific identifier, such as device ID, or some globally unique identifier. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e","shape":"UserId","Location":"uri","LocationName":"userId","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Type":1}],"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"PostContentOutput":{"ShapeName":"PostContentOutput","Documentation":"","members":{"AudioStream":{"Documentation":"\u003cp\u003eThe prompt (or statement) to convey to the user. This is based on the bot configuration and context. For example, if Amazon Lex did not understand the user intent, it sends the \u003ccode\u003eclarificationPrompt\u003c/code\u003e configured for the bot. If the intent requires confirmation before taking the fulfillment action, it sends the \u003ccode\u003econfirmationPrompt\u003c/code\u003e. Another example: Suppose that the Lambda function successfully fulfilled the intent, and sent a message to convey to the user. Then Amazon Lex sends that message in the response. \u003c/p\u003e","shape":"BlobStream","Location":"","LocationName":"audioStream","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"ContentType":{"Documentation":"\u003cp\u003eContent type as specified in the \u003ccode\u003eAccept\u003c/code\u003e HTTP header in the request.\u003c/p\u003e","shape":"HttpContentType","Location":"header","LocationName":"Content-Type","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"DialogState":{"Documentation":"\u003cp\u003eIdentifies the current state of the user interaction. Amazon Lex returns one of the following values as \u003ccode\u003edialogState\u003c/code\u003e. The client can optionally use this information to customize the user interface. \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eElicitIntent\u003c/code\u003e – Amazon Lex wants to elicit the user's intent. Consider the following examples: \u003c/p\u003e \u003cp\u003e For example, a user might utter an intent (\"I want to order a pizza\"). If Amazon Lex cannot infer the user intent from this utterance, it will return this dialog state. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eConfirmIntent\u003c/code\u003e – Amazon Lex is expecting a \"yes\" or \"no\" response. \u003c/p\u003e \u003cp\u003eFor example, Amazon Lex wants user confirmation before fulfilling an intent. Instead of a simple \"yes\" or \"no\" response, a user might respond with additional information. For example, \"yes, but make it a thick crust pizza\" or \"no, I want to order a drink.\" Amazon Lex can process such additional information (in these examples, update the crust type slot or change the intent from OrderPizza to OrderDrink). \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eElicitSlot\u003c/code\u003e – Amazon Lex is expecting the value of a slot for the current intent. \u003c/p\u003e \u003cp\u003e For example, suppose that in the response Amazon Lex sends this message: \"What size pizza would you like?\". A user might reply with the slot value (e.g., \"medium\"). The user might also provide additional information in the response (e.g., \"medium thick crust pizza\"). Amazon Lex can process such additional information appropriately. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eFulfilled\u003c/code\u003e – Conveys that the Lambda function has successfully fulfilled the intent. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eReadyForFulfillment\u003c/code\u003e – Conveys that the client has to fullfill the request. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eFailed\u003c/code\u003e – Conveys that the conversation with the user failed. \u003c/p\u003e \u003cp\u003e This can happen for various reasons, including that the user does not provide an appropriate response to prompts from the service (you can configure how many times Amazon Lex can prompt a user for specific information), or if the Lambda function fails to fulfill the intent. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e","shape":"DialogState","Location":"header","LocationName":"x-amz-lex-dialog-state","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"InputTranscript":{"Documentation":"\u003cp\u003eTranscript of the voice input to the operation.\u003c/p\u003e","shape":"String","Location":"header","LocationName":"x-amz-lex-input-transcript","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"IntentName":{"Documentation":"\u003cp\u003eCurrent user intent that Amazon Lex is aware of.\u003c/p\u003e","shape":"IntentName","Location":"header","LocationName":"x-amz-lex-intent-name","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Message":{"Documentation":"\u003cp\u003e Message to convey to the user. It can come from the bot's configuration or a code hook (Lambda function). If the current intent is not configured with a code hook or if the code hook returned \u003ccode\u003eDelegate\u003c/code\u003e as the \u003ccode\u003edialogAction.type\u003c/code\u003e in its response, then Amazon Lex decides the next course of action and selects an appropriate message from the bot configuration based on the current user interaction context. For example, if Amazon Lex is not able to understand the user input, it uses a clarification prompt message (For more information, see the Error Handling section in the Amazon Lex console). Another example: if the intent requires confirmation before fulfillment, then Amazon Lex uses the confirmation prompt message in the intent configuration. If the code hook returns a message, Amazon Lex passes it as-is in its response to the client. \u003c/p\u003e","shape":"Text","Location":"header","LocationName":"x-amz-lex-message","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"SessionAttributes":{"Documentation":"\u003cp\u003e Map of key/value pairs representing the session-specific context information. \u003c/p\u003e","shape":"JSONValue","Location":"header","LocationName":"x-amz-lex-session-attributes","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":true,"deprecated":false},"SlotToElicit":{"Documentation":"\u003cp\u003e If the \u003ccode\u003edialogState\u003c/code\u003e value is \u003ccode\u003eElicitSlot\u003c/code\u003e, returns the name of the slot for which Amazon Lex is eliciting a value. \u003c/p\u003e","shape":"String","Location":"header","LocationName":"x-amz-lex-slot-to-elicit","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Slots":{"Documentation":"\u003cp\u003eMap of zero or more intent slots (name/value pairs) Amazon Lex detected from the user input during the conversation.\u003c/p\u003e","shape":"JSONValue","Location":"header","LocationName":"x-amz-lex-slots","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":true,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"AudioStream","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"PostTextInput":{"ShapeName":"PostTextInput","Documentation":"","members":{"BotAlias":{"Documentation":"\u003cp\u003eThe alias of the Amazon Lex bot.\u003c/p\u003e","shape":"BotAlias","Location":"uri","LocationName":"botAlias","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"BotName":{"Documentation":"\u003cp\u003eThe name of the Amazon Lex bot.\u003c/p\u003e","shape":"BotName","Location":"uri","LocationName":"botName","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"InputText":{"Documentation":"\u003cp\u003eThe text that the user entered (Amazon Lex interprets this text).\u003c/p\u003e","shape":"Text","Location":"","LocationName":"inputText","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"SessionAttributes":{"Documentation":"\u003cp\u003e By using session attributes, a client application can pass contextual information in the request to Amazon Lex For example, \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIn Getting Started Exercise 1, the example bot uses the \u003ccode\u003eprice\u003c/code\u003e session attribute to maintain the price of the flowers ordered (for example, \"Price\":25). The code hook (the Lambda function) sets this attribute based on the type of flowers ordered. For more information, see \u003ca href=\"http://docs.aws.amazon.com/lex/latest/dg/gs-bp-details-after-lambda.html\"\u003eReview the Details of Information Flow\u003c/a\u003e. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIn the BookTrip bot exercise, the bot uses the \u003ccode\u003ecurrentReservation\u003c/code\u003e session attribute to maintain slot data during the in-progress conversation to book a hotel or book a car. For more information, see \u003ca href=\"http://docs.aws.amazon.com/lex/latest/dg/book-trip-detail-flow.html\"\u003eDetails of Information Flow\u003c/a\u003e. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eYou might use the session attributes (key, value pairs) to track the requestID of user requests.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003e Amazon Lex simply passes these session attributes to the Lambda functions configured for the intent.\u003c/p\u003e \u003cp\u003eIn your Lambda function, you can also use the session attributes for initialization and customization (prompts and response cards). Some examples are:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e Initialization - In a pizza ordering bot, if you can pass the user location as a session attribute (for example, \u003ccode\u003e\"Location\" : \"111 Maple street\"\u003c/code\u003e), then your Lambda function might use this information to determine the closest pizzeria to place the order (perhaps to set the storeAddress slot value). \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e Personalize prompts - For example, you can configure prompts to refer to the user name. (For example, \"Hey [FirstName], what toppings would you like?\"). You can pass the user name as a session attribute (\u003ccode\u003e\"FirstName\" : \"Joe\"\u003c/code\u003e) so that Amazon Lex can substitute the placeholder to provide a personalize prompt to the user (\"Hey Joe, what toppings would you like?\"). \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cnote\u003e \u003cp\u003e Amazon Lex does not persist session attributes. \u003c/p\u003e \u003cp\u003e If you configure a code hook for the intent, Amazon Lex passes the incoming session attributes to the Lambda function. If you want Amazon Lex to return these session attributes back to the client, the Lambda function must return them. \u003c/p\u003e \u003cp\u003e If there is no code hook configured for the intent, Amazon Lex simply returns the session attributes back to the client application. \u003c/p\u003e \u003c/note\u003e","shape":"StringMap","Location":"","LocationName":"sessionAttributes","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"UserId":{"Documentation":"\u003cp\u003eThe ID of the client application user. The application developer decides the user IDs. At runtime, each request must include the user ID. Typically, each of your application users should have a unique ID. Note the following considerations: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e If you want a user to start a conversation on one device and continue the conversation on another device, you might choose a user-specific identifier, such as a login or Amazon Cognito user ID (assuming your application is using Amazon Cognito). \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e If you want the same user to be able to have two independent conversations on two different devices, you might choose a device-specific identifier, such as device ID, or some globally unique identifier. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e","shape":"UserId","Location":"uri","LocationName":"userId","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":["BotName","BotAlias","UserId","InputText"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"BotAlias","Ref":{"Documentation":"\u003cp\u003eThe alias of the Amazon Lex bot.\u003c/p\u003e","shape":"BotAlias","Location":"uri","LocationName":"botAlias","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Type":0},{"Name":"BotName","Ref":{"Documentation":"\u003cp\u003eThe name of the Amazon Lex bot.\u003c/p\u003e","shape":"BotName","Location":"uri","LocationName":"botName","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Type":0},{"Name":"InputText","Ref":{"Documentation":"\u003cp\u003eThe text that the user entered (Amazon Lex interprets this text).\u003c/p\u003e","shape":"Text","Location":"","LocationName":"inputText","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Type":0},{"Name":"InputText","Ref":{"Documentation":"\u003cp\u003eThe text that the user entered (Amazon Lex interprets this text).\u003c/p\u003e","shape":"Text","Location":"","LocationName":"inputText","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Type":1},{"Name":"UserId","Ref":{"Documentation":"\u003cp\u003eThe ID of the client application user. The application developer decides the user IDs. At runtime, each request must include the user ID. Typically, each of your application users should have a unique ID. Note the following considerations: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e If you want a user to start a conversation on one device and continue the conversation on another device, you might choose a user-specific identifier, such as a login or Amazon Cognito user ID (assuming your application is using Amazon Cognito). \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e If you want the same user to be able to have two independent conversations on two different devices, you might choose a device-specific identifier, such as device ID, or some globally unique identifier. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e","shape":"UserId","Location":"uri","LocationName":"userId","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Type":0},{"Name":"UserId","Ref":{"Documentation":"\u003cp\u003eThe ID of the client application user. The application developer decides the user IDs. At runtime, each request must include the user ID. Typically, each of your application users should have a unique ID. Note the following considerations: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e If you want a user to start a conversation on one device and continue the conversation on another device, you might choose a user-specific identifier, such as a login or Amazon Cognito user ID (assuming your application is using Amazon Cognito). \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e If you want the same user to be able to have two independent conversations on two different devices, you might choose a device-specific identifier, such as device ID, or some globally unique identifier. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e","shape":"UserId","Location":"uri","LocationName":"userId","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Type":1}],"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"PostTextOutput":{"ShapeName":"PostTextOutput","Documentation":"","members":{"DialogState":{"Documentation":"\u003cp\u003e Identifies the current state of the user interaction. Amazon Lex returns one of the following values as \u003ccode\u003edialogState\u003c/code\u003e. The client can optionally use this information to customize the user interface. \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eElicitIntent\u003c/code\u003e – Amazon Lex wants to elicit user intent. \u003c/p\u003e \u003cp\u003eFor example, a user might utter an intent (\"I want to order a pizza\"). If Amazon Lex cannot infer the user intent from this utterance, it will return this dialogState.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eConfirmIntent\u003c/code\u003e – Amazon Lex is expecting a \"yes\" or \"no\" response. \u003c/p\u003e \u003cp\u003e For example, Amazon Lex wants user confirmation before fulfilling an intent. \u003c/p\u003e \u003cp\u003eInstead of a simple \"yes\" or \"no,\" a user might respond with additional information. For example, \"yes, but make it thick crust pizza\" or \"no, I want to order a drink\". Amazon Lex can process such additional information (in these examples, update the crust type slot value, or change intent from OrderPizza to OrderDrink).\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eElicitSlot\u003c/code\u003e – Amazon Lex is expecting a slot value for the current intent. \u003c/p\u003e \u003cp\u003eFor example, suppose that in the response Amazon Lex sends this message: \"What size pizza would you like?\". A user might reply with the slot value (e.g., \"medium\"). The user might also provide additional information in the response (e.g., \"medium thick crust pizza\"). Amazon Lex can process such additional information appropriately. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eFulfilled\u003c/code\u003e – Conveys that the Lambda function configured for the intent has successfully fulfilled the intent. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eReadyForFulfillment\u003c/code\u003e – Conveys that the client has to fulfill the intent. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eFailed\u003c/code\u003e – Conveys that the conversation with the user failed. \u003c/p\u003e \u003cp\u003e This can happen for various reasons including that the user did not provide an appropriate response to prompts from the service (you can configure how many times Amazon Lex can prompt a user for specific information), or the Lambda function failed to fulfill the intent. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e","shape":"DialogState","Location":"","LocationName":"dialogState","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"IntentName":{"Documentation":"\u003cp\u003eThe current user intent that Amazon Lex is aware of.\u003c/p\u003e","shape":"IntentName","Location":"","LocationName":"intentName","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Message":{"Documentation":"\u003cp\u003e A message to convey to the user. It can come from the bot's configuration or a code hook (Lambda function). If the current intent is not configured with a code hook or the code hook returned \u003ccode\u003eDelegate\u003c/code\u003e as the \u003ccode\u003edialogAction.type\u003c/code\u003e in its response, then Amazon Lex decides the next course of action and selects an appropriate message from the bot configuration based on the current user interaction context. For example, if Amazon Lex is not able to understand the user input, it uses a clarification prompt message (for more information, see the Error Handling section in the Amazon Lex console). Another example: if the intent requires confirmation before fulfillment, then Amazon Lex uses the confirmation prompt message in the intent configuration. If the code hook returns a message, Amazon Lex passes it as-is in its response to the client. \u003c/p\u003e","shape":"Text","Location":"","LocationName":"message","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"ResponseCard":{"Documentation":"\u003cp\u003eRepresents the options that the user has to respond to the current prompt. Response Card can come from the bot configuration (in the Amazon Lex console, choose the settings button next to a slot) or from a code hook (Lambda function). \u003c/p\u003e","shape":"ResponseCard","Location":"","LocationName":"responseCard","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"SessionAttributes":{"Documentation":"\u003cp\u003eA map of key-value pairs representing the session-specific context information.\u003c/p\u003e","shape":"StringMap","Location":"","LocationName":"sessionAttributes","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"SlotToElicit":{"Documentation":"\u003cp\u003eIf the \u003ccode\u003edialogState\u003c/code\u003e value is \u003ccode\u003eElicitSlot\u003c/code\u003e, returns the name of the slot for which Amazon Lex is eliciting a value. \u003c/p\u003e","shape":"String","Location":"","LocationName":"slotToElicit","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Slots":{"Documentation":"\u003cp\u003e The intent slots (name/value pairs) that Amazon Lex detected so far from the user input in the conversation. \u003c/p\u003e","shape":"StringMap","Location":"","LocationName":"slots","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"RequestTimeoutException":{"ShapeName":"RequestTimeoutException","Documentation":"\u003cp\u003eThe input speech is too long.\u003c/p\u003e","members":{"Message":{"Documentation":"","shape":"String","Location":"","LocationName":"message","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":true,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":true,"error":{"Code":"","HTTPStatusCode":408}},"ResponseCard":{"ShapeName":"ResponseCard","Documentation":"\u003cp\u003eIf you configure a response card when creating your bots, Amazon Lex substitutes the session attributes and slot values that are available, and then returns it. The response card can also come from a Lambda function ( \u003ccode\u003edialogCodeHook\u003c/code\u003e and \u003ccode\u003efulfillmentActivity\u003c/code\u003e on an intent).\u003c/p\u003e","members":{"ContentType":{"Documentation":"\u003cp\u003eThe content type of the response.\u003c/p\u003e","shape":"ContentType","Location":"","LocationName":"contentType","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"GenericAttachments":{"Documentation":"\u003cp\u003eAn array of attachment objects representing options.\u003c/p\u003e","shape":"GenericAttachmentList","Location":"","LocationName":"genericAttachments","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Version":{"Documentation":"\u003cp\u003eThe version of the response card format.\u003c/p\u003e","shape":"String","Location":"","LocationName":"version","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"String":{"ShapeName":"String","Documentation":"","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"StringMap":{"ShapeName":"StringMap","Documentation":"","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"String","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"String","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"map","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"StringUrlWithLength":{"ShapeName":"StringUrlWithLength","Documentation":"","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":1,"Max":2048,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"StringWithLength":{"ShapeName":"StringWithLength","Documentation":"","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":1,"Max":80,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"Text":{"ShapeName":"Text","Documentation":"","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":1,"Max":1024,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":false,"error":{"Code":"","HTTPStatusCode":0}},"UnsupportedMediaTypeException":{"ShapeName":"UnsupportedMediaTypeException","Documentation":"\u003cp\u003eThe Content-Type header (\u003ccode\u003ePostContent\u003c/code\u003e API) has an invalid value. \u003c/p\u003e","members":{"Message":{"Documentation":"","shape":"String","Location":"","LocationName":"message","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":true,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":true,"error":{"Code":"","HTTPStatusCode":415}},"UserId":{"ShapeName":"UserId","Documentation":"","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"Ignore":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"jsonvalue":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":2,"Max":100,"Placeholder":false,"deprecated":false,"Validations":null,"IsError":false,"error":{"Code":"","HTTPStatusCode":0}}},"Waiters":null,"Documentation":"\u003cp\u003eAmazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . \u003c/p\u003e","NoRemoveUnusedShapes":false,"NoRenameToplevelShapes":false,"NoInitMethods":false,"NoStringerMethods":false,"NoConstServiceNames":false,"NoValidataShapeMethods":false,"NoGenStructFieldAccessors":false,"SvcClientImportPath":"github.com/aws/aws-sdk-go/service","BaseCrosslinkURL":"https://docs.aws.amazon.com"}
