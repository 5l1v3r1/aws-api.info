{"Metadata":{"APIVersion":"2012-08-10","EndpointPrefix":"dynamodb","SigningName":"","ServiceAbbreviation":"DynamoDB","ServiceFullName":"Amazon DynamoDB","SignatureVersion":"v4","JSONVersion":"1.0","TargetPrefix":"DynamoDB_20120810","Protocol":"json"},"Operations":{"BatchGetItem":{"ExportedName":"BatchGetItem","Name":"BatchGetItem","Documentation":"// The BatchGetItem operation returns the attributes of one or more items from\n// one or more tables. You identify requested items by primary key.\n// \n// A single operation can retrieve up to 16 MB of data, which can contain as\n// many as 100 items. BatchGetItem will return a partial result if the response\n// size limit is exceeded, the table's provisioned throughput is exceeded, or\n// an internal processing failure occurs. If a partial result is returned, the\n// operation returns a value for UnprocessedKeys. You can use this value to\n// retry the operation starting with the next item to get.\n// \n//  If you request more than 100 items BatchGetItem will return a ValidationException\n// with the message \"Too many items requested for the BatchGetItem call\".\n// \n//  For example, if you ask to retrieve 100 items, but each individual item\n// is 300 KB in size, the system returns 52 items (so as not to exceed the 16\n// MB limit). It also returns an appropriate UnprocessedKeys value so you can\n// get the next page of results. If desired, your application can include its\n// own logic to assemble the pages of results into one data set.\n// \n// If none of the items can be processed due to insufficient provisioned throughput\n// on all of the tables in the request, then BatchGetItem will return a ProvisionedThroughputExceededException.\n// If at least one of the items is successfully processed, then BatchGetItem\n// completes successfully, while returning the keys of the unread items in UnprocessedKeys.\n// \n//  If DynamoDB returns any unprocessed items, you should retry the batch operation\n// on those items. However, we strongly recommend that you use an exponential\n// backoff algorithm. If you retry the batch operation immediately, the underlying\n// read or write requests can still fail due to throttling on the individual\n// tables. If you delay the batch operation using exponential backoff, the individual\n// requests in the batch are much more likely to succeed.\n// \n// For more information, see Batch Operations and Error Handling (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations)\n// in the Amazon DynamoDB Developer Guide.\n// \n//  By default, BatchGetItem performs eventually consistent reads on every\n// table in the request. If you want strongly consistent reads instead, you\n// can set ConsistentRead to true for any or all tables.\n// \n// In order to minimize response latency, BatchGetItem retrieves items in parallel.\n// \n// When designing your application, keep in mind that DynamoDB does not return\n// items in any particular order. To help parse the response by item, include\n// the primary key values for the items in your request in the AttributesToGet\n// parameter.\n// \n// If a requested item does not exist, it is not returned in the result. Requests\n// for nonexistent items consume the minimum read capacity units according to\n// the type of read. For more information, see Capacity Units Calculations (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#CapacityUnitCalculations)\n// in the Amazon DynamoDB Developer Guide.\n","HTTP":{"Method":"POST","RequestURI":"/","ResponseCode":0},"input":{"Documentation":"","shape":"BatchGetItemInput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"output":{"Documentation":"","shape":"BatchGetItemOutput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Paginator":{"input_token":["RequestItems"],"output_token":["UnprocessedKeys"],"limit_key":"","more_results":""},"deprecated":false,"authtype":""},"BatchWriteItem":{"ExportedName":"BatchWriteItem","Name":"BatchWriteItem","Documentation":"// The BatchWriteItem operation puts or deletes multiple items in one or more\n// tables. A single call to BatchWriteItem can write up to 16 MB of data, which\n// can comprise as many as 25 put or delete requests. Individual items to be\n// written can be as large as 400 KB.\n// \n//   BatchWriteItem cannot update items. To update items, use the UpdateItem\n// API.\n// \n//  The individual PutItem and DeleteItem operations specified in BatchWriteItem\n// are atomic; however BatchWriteItem as a whole is not. If any requested operations\n// fail because the table's provisioned throughput is exceeded or an internal\n// processing failure occurs, the failed operations are returned in the UnprocessedItems\n// response parameter. You can investigate and optionally resend the requests.\n// Typically, you would call BatchWriteItem in a loop. Each iteration would\n// check for unprocessed items and submit a new BatchWriteItem request with\n// those unprocessed items until all items have been processed.\n// \n// Note that if none of the items can be processed due to insufficient provisioned\n// throughput on all of the tables in the request, then BatchWriteItem will\n// return a ProvisionedThroughputExceededException.\n// \n//  If DynamoDB returns any unprocessed items, you should retry the batch operation\n// on those items. However, we strongly recommend that you use an exponential\n// backoff algorithm. If you retry the batch operation immediately, the underlying\n// read or write requests can still fail due to throttling on the individual\n// tables. If you delay the batch operation using exponential backoff, the individual\n// requests in the batch are much more likely to succeed.\n// \n// For more information, see Batch Operations and Error Handling (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations)\n// in the Amazon DynamoDB Developer Guide.\n// \n//  With BatchWriteItem, you can efficiently write or delete large amounts\n// of data, such as from Amazon Elastic MapReduce (EMR), or copy data from another\n// database into DynamoDB. In order to improve performance with these large-scale\n// operations, BatchWriteItem does not behave in the same way as individual\n// PutItem and DeleteItem calls would. For example, you cannot specify conditions\n// on individual put and delete requests, and BatchWriteItem does not return\n// deleted items in the response.\n// \n// If you use a programming language that supports concurrency, you can use\n// threads to write items in parallel. Your application must include the necessary\n// logic to manage the threads. With languages that don't support threading,\n// you must update or delete the specified items one at a time. In both situations,\n// BatchWriteItem provides an alternative where the API performs the specified\n// put and delete operations in parallel, giving you the power of the thread\n// pool approach without having to introduce complexity into your application.\n// \n// Parallel processing reduces latency, but each specified put and delete request\n// consumes the same number of write capacity units whether it is processed\n// in parallel or not. Delete operations on nonexistent items consume one write\n// capacity unit.\n// \n// If one or more of the following is true, DynamoDB rejects the entire batch\n// write operation:\n// \n//   One or more tables specified in the BatchWriteItem request does not exist.\n// \n//   Primary key attributes specified on an item in the request do not match\n// those in the corresponding table's primary key schema.\n// \n//   You try to perform multiple operations on the same item in the same BatchWriteItem\n// request. For example, you cannot put and delete the same item in the same\n// BatchWriteItem request. \n// \n//   There are more than 25 requests in the batch.\n// \n//   Any individual item in a batch exceeds 400 KB.\n// \n//   The total request size exceeds 16 MB.\n","HTTP":{"Method":"POST","RequestURI":"/","ResponseCode":0},"input":{"Documentation":"","shape":"BatchWriteItemInput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"output":{"Documentation":"","shape":"BatchWriteItemOutput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Paginator":null,"deprecated":false,"authtype":""},"CreateTable":{"ExportedName":"CreateTable","Name":"CreateTable","Documentation":"// The CreateTable operation adds a new table to your account. In an AWS account,\n// table names must be unique within each region. That is, you can have two\n// tables with same name if you create the tables in different regions.\n// \n//  CreateTable is an asynchronous operation. Upon receiving a CreateTable\n// request, DynamoDB immediately returns a response with a TableStatus of CREATING.\n// After the table is created, DynamoDB sets the TableStatus to ACTIVE. You\n// can perform read and write operations only on an ACTIVE table. \n// \n// You can optionally define secondary indexes on the new table, as part of\n// the CreateTable operation. If you want to create multiple tables with secondary\n// indexes on them, you must create the tables sequentially. Only one table\n// with secondary indexes can be in the CREATING state at any given time.\n// \n// You can use the DescribeTable API to check the table status.\n","HTTP":{"Method":"POST","RequestURI":"/","ResponseCode":0},"input":{"Documentation":"","shape":"CreateTableInput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"output":{"Documentation":"","shape":"CreateTableOutput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Paginator":null,"deprecated":false,"authtype":""},"DeleteItem":{"ExportedName":"DeleteItem","Name":"DeleteItem","Documentation":"// Deletes a single item in a table by primary key. You can perform a conditional\n// delete operation that deletes the item if it exists, or if it has an expected\n// attribute value.\n// \n// In addition to deleting an item, you can also return the item's attribute\n// values in the same operation, using the ReturnValues parameter.\n// \n// Unless you specify conditions, the DeleteItem is an idempotent operation;\n// running it multiple times on the same item or attribute does not result in\n// an error response.\n// \n// Conditional deletes are useful for deleting items only if specific conditions\n// are met. If those conditions are met, DynamoDB performs the delete. Otherwise,\n// the item is not deleted.\n","HTTP":{"Method":"POST","RequestURI":"/","ResponseCode":0},"input":{"Documentation":"","shape":"DeleteItemInput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"output":{"Documentation":"","shape":"DeleteItemOutput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Paginator":null,"deprecated":false,"authtype":""},"DeleteTable":{"ExportedName":"DeleteTable","Name":"DeleteTable","Documentation":"// The DeleteTable operation deletes a table and all of its items. After a DeleteTable\n// request, the specified table is in the DELETING state until DynamoDB completes\n// the deletion. If the table is in the ACTIVE state, you can delete it. If\n// a table is in CREATING or UPDATING states, then DynamoDB returns a ResourceInUseException.\n// If the specified table does not exist, DynamoDB returns a ResourceNotFoundException.\n// If table is already in the DELETING state, no error is returned. \n// \n//  DynamoDB might continue to accept data read and write operations, such\n// as GetItem and PutItem, on a table in the DELETING state until the table\n// deletion is complete.\n// \n//  When you delete a table, any indexes on that table are also deleted.\n// \n// If you have DynamoDB Streams enabled on the table, then the corresponding\n// stream on that table goes into the DISABLED state, and the stream is automatically\n// deleted after 24 hours.\n// \n// Use the DescribeTable API to check the status of the table.\n","HTTP":{"Method":"POST","RequestURI":"/","ResponseCode":0},"input":{"Documentation":"","shape":"DeleteTableInput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"output":{"Documentation":"","shape":"DeleteTableOutput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Paginator":null,"deprecated":false,"authtype":""},"DescribeLimits":{"ExportedName":"DescribeLimits","Name":"DescribeLimits","Documentation":"// Returns the current provisioned-capacity limits for your AWS account in a\n// region, both for the region as a whole and for any one DynamoDB table that\n// you create there.\n// \n// When you establish an AWS account, the account has initial limits on the\n// maximum read capacity units and write capacity units that you can provision\n// across all of your DynamoDB tables in a given region. Also, there are per-table\n// limits that apply when you create a table there. For more information, see\n// Limits (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html)\n// page in the Amazon DynamoDB Developer Guide.\n// \n// Although you can increase these limits by filing a case at AWS Support Center\n// (https://console.aws.amazon.com/support/home#/), obtaining the increase is\n// not instantaneous. The DescribeLimits API lets you write code to compare\n// the capacity you are currently using to those limits imposed by your account\n// so that you have enough time to apply for an increase before you hit a limit.\n// \n// For example, you could use one of the AWS SDKs to do the following:\n// \n//  Call DescribeLimits for a particular region to obtain your current account\n// limits on provisioned capacity there.\n// \n//  Create a variable to hold the aggregate read capacity units provisioned\n// for all your tables in that region, and one to hold the aggregate write capacity\n// units. Zero them both.\n// \n//  Call ListTables to obtain a list of all your DynamoDB tables.\n// \n//   For each table name listed by ListTables, do the following:\n// \n//  Call DescribeTable with the table name.\n// \n//  Use the data returned by DescribeTable to add the read capacity units and\n// write capacity units provisioned for the table itself to your variables.\n// \n//  If the table has one or more global secondary indexes (GSIs), loop over\n// these GSIs and add their provisioned capacity values to your variables as\n// well.\n// \n//    Report the account limits for that region returned by DescribeLimits,\n// along with the total current provisioned capacity levels you have calculated.\n// \n//   This will let you see whether you are getting close to your account-level\n// limits.\n// \n// The per-table limits apply only when you are creating a new table. They\n// restrict the sum of the provisioned capacity of the new table itself and\n// all its global secondary indexes.\n// \n// For existing tables and their GSIs, DynamoDB will not let you increase provisioned\n// capacity extremely rapidly, but the only upper limit that applies is that\n// the aggregate provisioned capacity over all your tables and GSIs cannot exceed\n// either of the per-account limits.\n// \n//   DescribeLimits should only be called periodically. You can expect throttling\n// errors if you call it more than once in a minute.\n// \n//  The DescribeLimits Request element has no content.\n","HTTP":{"Method":"POST","RequestURI":"/","ResponseCode":0},"input":{"Documentation":"","shape":"DescribeLimitsInput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"output":{"Documentation":"","shape":"DescribeLimitsOutput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Paginator":null,"deprecated":false,"authtype":""},"DescribeTable":{"ExportedName":"DescribeTable","Name":"DescribeTable","Documentation":"// Returns information about the table, including the current status of the\n// table, when it was created, the primary key schema, and any indexes on the\n// table.\n// \n//  If you issue a DescribeTable request immediately after a CreateTable request,\n// DynamoDB might return a ResourceNotFoundException. This is because DescribeTable\n// uses an eventually consistent query, and the metadata for your table might\n// not be available at that moment. Wait for a few seconds, and then try the\n// DescribeTable request again.\n","HTTP":{"Method":"POST","RequestURI":"/","ResponseCode":0},"input":{"Documentation":"","shape":"DescribeTableInput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"output":{"Documentation":"","shape":"DescribeTableOutput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Paginator":null,"deprecated":false,"authtype":""},"GetItem":{"ExportedName":"GetItem","Name":"GetItem","Documentation":"// The GetItem operation returns a set of attributes for the item with the given\n// primary key. If there is no matching item, GetItem does not return any data.\n// \n//  GetItem provides an eventually consistent read by default. If your application\n// requires a strongly consistent read, set ConsistentRead to true. Although\n// a strongly consistent read might take more time than an eventually consistent\n// read, it always returns the last updated value.\n","HTTP":{"Method":"POST","RequestURI":"/","ResponseCode":0},"input":{"Documentation":"","shape":"GetItemInput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"output":{"Documentation":"","shape":"GetItemOutput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Paginator":null,"deprecated":false,"authtype":""},"ListTables":{"ExportedName":"ListTables","Name":"ListTables","Documentation":"// Returns an array of table names associated with the current account and endpoint.\n// The output from ListTables is paginated, with each page returning a maximum\n// of 100 table names.\n","HTTP":{"Method":"POST","RequestURI":"/","ResponseCode":0},"input":{"Documentation":"","shape":"ListTablesInput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"output":{"Documentation":"","shape":"ListTablesOutput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Paginator":{"input_token":["ExclusiveStartTableName"],"output_token":["LastEvaluatedTableName"],"limit_key":"Limit","more_results":""},"deprecated":false,"authtype":""},"PutItem":{"ExportedName":"PutItem","Name":"PutItem","Documentation":"// Creates a new item, or replaces an old item with a new item. If an item that\n// has the same primary key as the new item already exists in the specified\n// table, the new item completely replaces the existing item. You can perform\n// a conditional put operation (add a new item if one with the specified primary\n// key doesn't exist), or replace an existing item if it has certain attribute\n// values.\n// \n// In addition to putting an item, you can also return the item's attribute\n// values in the same operation, using the ReturnValues parameter.\n// \n// When you add an item, the primary key attribute(s) are the only required\n// attributes. Attribute values cannot be null. String and Binary type attributes\n// must have lengths greater than zero. Set type attributes cannot be empty.\n// Requests with empty values will be rejected with a ValidationException exception.\n// \n// You can request that PutItem return either a copy of the original item (before\n// the update) or a copy of the updated item (after the update). For more information,\n// see the ReturnValues description below.\n// \n//  To prevent a new item from replacing an existing item, use a conditional\n// expression that contains the attribute_not_exists function with the name\n// of the attribute being used as the partition key for the table. Since every\n// record must contain that attribute, the attribute_not_exists function will\n// only succeed if no matching item exists.\n// \n//  For more information about using this API, see Working with Items (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html)\n// in the Amazon DynamoDB Developer Guide.\n","HTTP":{"Method":"POST","RequestURI":"/","ResponseCode":0},"input":{"Documentation":"","shape":"PutItemInput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"output":{"Documentation":"","shape":"PutItemOutput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Paginator":null,"deprecated":false,"authtype":""},"Query":{"ExportedName":"Query","Name":"Query","Documentation":"// A Query operation uses the primary key of a table or a secondary index to\n// directly access items from that table or index.\n// \n// Use the KeyConditionExpression parameter to provide a specific value for\n// the partition key. The Query operation will return all of the items from\n// the table or index with that partition key value. You can optionally narrow\n// the scope of the Query operation by specifying a sort key value and a comparison\n// operator in KeyConditionExpression. You can use the ScanIndexForward parameter\n// to get results in forward or reverse order, by sort key.\n// \n// Queries that do not return results consume the minimum number of read capacity\n// units for that type of read operation.\n// \n// If the total number of items meeting the query criteria exceeds the result\n// set size limit of 1 MB, the query stops and results are returned to the user\n// with the LastEvaluatedKey element to continue the query in a subsequent operation.\n// Unlike a Scan operation, a Query operation never returns both an empty result\n// set and a LastEvaluatedKey value. LastEvaluatedKey is only provided if you\n// have used the Limit parameter, or if the result set exceeds 1 MB (prior to\n// applying a filter). \n// \n// You can query a table, a local secondary index, or a global secondary index.\n// For a query on a table or on a local secondary index, you can set the ConsistentRead\n// parameter to true and obtain a strongly consistent result. Global secondary\n// indexes support eventually consistent reads only, so do not specify ConsistentRead\n// when querying a global secondary index.\n","HTTP":{"Method":"POST","RequestURI":"/","ResponseCode":0},"input":{"Documentation":"","shape":"QueryInput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"output":{"Documentation":"","shape":"QueryOutput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Paginator":{"input_token":["ExclusiveStartKey"],"output_token":["LastEvaluatedKey"],"limit_key":"Limit","more_results":""},"deprecated":false,"authtype":""},"Scan":{"ExportedName":"Scan","Name":"Scan","Documentation":"// The Scan operation returns one or more items and item attributes by accessing\n// every item in a table or a secondary index. To have DynamoDB return fewer\n// items, you can provide a ScanFilter operation.\n// \n// If the total number of scanned items exceeds the maximum data set size limit\n// of 1 MB, the scan stops and results are returned to the user as a LastEvaluatedKey\n// value to continue the scan in a subsequent operation. The results also include\n// the number of items exceeding the limit. A scan can result in no table data\n// meeting the filter criteria. \n// \n// By default, Scan operations proceed sequentially; however, for faster performance\n// on a large table or secondary index, applications can request a parallel\n// Scan operation by providing the Segment and TotalSegments parameters. For\n// more information, see Parallel Scan (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#QueryAndScanParallelScan)\n// in the Amazon DynamoDB Developer Guide.\n// \n// By default, Scan uses eventually consistent reads when accessing the data\n// in a table; therefore, the result set might not include the changes to data\n// in the table immediately before the operation began. If you need a consistent\n// copy of the data, as of the time that the Scan begins, you can set the ConsistentRead\n// parameter to true.\n","HTTP":{"Method":"POST","RequestURI":"/","ResponseCode":0},"input":{"Documentation":"","shape":"ScanInput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"output":{"Documentation":"","shape":"ScanOutput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Paginator":{"input_token":["ExclusiveStartKey"],"output_token":["LastEvaluatedKey"],"limit_key":"Limit","more_results":""},"deprecated":false,"authtype":""},"UpdateItem":{"ExportedName":"UpdateItem","Name":"UpdateItem","Documentation":"// Edits an existing item's attributes, or adds a new item to the table if it\n// does not already exist. You can put, delete, or add attribute values. You\n// can also perform a conditional update on an existing item (insert a new attribute\n// name-value pair if it doesn't exist, or replace an existing name-value pair\n// if it has certain expected attribute values).\n// \n// You can also return the item's attribute values in the same UpdateItem operation\n// using the ReturnValues parameter.\n","HTTP":{"Method":"POST","RequestURI":"/","ResponseCode":0},"input":{"Documentation":"","shape":"UpdateItemInput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"output":{"Documentation":"","shape":"UpdateItemOutput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Paginator":null,"deprecated":false,"authtype":""},"UpdateTable":{"ExportedName":"UpdateTable","Name":"UpdateTable","Documentation":"// Modifies the provisioned throughput settings, global secondary indexes, or\n// DynamoDB Streams settings for a given table.\n// \n// You can only perform one of the following operations at once:\n// \n//   Modify the provisioned throughput settings of the table.\n// \n//   Enable or disable Streams on the table.\n// \n//   Remove a global secondary index from the table.\n// \n//   Create a new global secondary index on the table. Once the index begins\n// backfilling, you can use UpdateTable to perform other operations.\n// \n//    UpdateTable is an asynchronous operation; while it is executing, the\n// table status changes from ACTIVE to UPDATING. While it is UPDATING, you cannot\n// issue another UpdateTable request. When the table returns to the ACTIVE state,\n// the UpdateTable operation is complete.\n","HTTP":{"Method":"POST","RequestURI":"/","ResponseCode":0},"input":{"Documentation":"","shape":"UpdateTableInput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"output":{"Documentation":"","shape":"UpdateTableOutput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Paginator":null,"deprecated":false,"authtype":""}},"Shapes":{"AttributeAction":{"ShapeName":"AttributeAction","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":["ADD","PUT","DELETE"],"EnumConsts":["AttributeActionAdd","AttributeActionPut","AttributeActionDelete"],"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"AttributeDefinition":{"ShapeName":"AttributeDefinition","Documentation":"// Represents an attribute for describing the key schema for the table and indexes.\n","members":{"AttributeName":{"Documentation":"// A name for the attribute.\n","shape":"KeySchemaAttributeName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"AttributeType":{"Documentation":"// The data type for the attribute, where:\n// \n//   S - the attribute is of type String\n// \n//   N - the attribute is of type Number\n// \n//   B - the attribute is of type Binary\n","shape":"ScalarAttributeType","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":["AttributeName","AttributeType"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"AttributeName","Ref":{"Documentation":"// A name for the attribute.\n","shape":"KeySchemaAttributeName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"AttributeName","Ref":{"Documentation":"// A name for the attribute.\n","shape":"KeySchemaAttributeName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"AttributeType","Ref":{"Documentation":"// The data type for the attribute, where:\n// \n//   S - the attribute is of type String\n// \n//   N - the attribute is of type Number\n// \n//   B - the attribute is of type Binary\n","shape":"ScalarAttributeType","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0}]},"AttributeDefinitions":{"ShapeName":"AttributeDefinitions","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"AttributeDefinition","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"list","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"AttributeMap":{"ShapeName":"AttributeMap","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"AttributeName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"AttributeValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"map","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"AttributeName":{"ShapeName":"AttributeName","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":65535,"Placeholder":false,"deprecated":false,"Validations":null},"AttributeNameList":{"ShapeName":"AttributeNameList","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"AttributeName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"list","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":1,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"AttributeUpdates":{"ShapeName":"AttributeUpdates","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"AttributeName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"AttributeValueUpdate","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"map","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"AttributeValue":{"ShapeName":"AttributeValue","Documentation":"// Represents the data for an attribute. You can set one, and only one, of the\n// elements.\n// \n// Each attribute in an item is a name-value pair. An attribute can be single-valued\n// or multi-valued set. For example, a book item can have title and authors\n// attributes. Each book has one title but can have many authors. The multi-valued\n// attribute is a set; duplicate values are not allowed.\n","members":{"B":{"Documentation":"// A Binary data type.\n//\n// B is automatically base64 encoded/decoded by the SDK.\n","shape":"BinaryAttributeValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"BOOL":{"Documentation":"// A Boolean data type.\n","shape":"BooleanAttributeValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"BS":{"Documentation":"// A Binary Set data type.\n","shape":"BinarySetAttributeValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"L":{"Documentation":"// A List of attribute values.\n","shape":"ListAttributeValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"M":{"Documentation":"// A Map of attribute values.\n","shape":"MapAttributeValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"N":{"Documentation":"// A Number data type.\n","shape":"NumberAttributeValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"NS":{"Documentation":"// A Number Set data type.\n","shape":"NumberSetAttributeValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"NULL":{"Documentation":"// A Null data type.\n","shape":"NullAttributeValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"S":{"Documentation":"// A String data type.\n","shape":"StringAttributeValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"SS":{"Documentation":"// A String Set data type.\n","shape":"StringSetAttributeValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"AttributeValueList":{"ShapeName":"AttributeValueList","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"AttributeValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"list","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"AttributeValueUpdate":{"ShapeName":"AttributeValueUpdate","Documentation":"// For the UpdateItem operation, represents the attributes to be modified, the\n// action to perform on each, and the new value for each.\n// \n//  You cannot use UpdateItem to update any primary key attributes. Instead,\n// you will need to delete the item, and then use PutItem to create a new item\n// with new attributes.\n// \n//  Attribute values cannot be null; string and binary type attributes must\n// have lengths greater than zero; and set type attributes must not be empty.\n// Requests with empty values will be rejected with a ValidationException exception.\n","members":{"Action":{"Documentation":"// Specifies how to perform the update. Valid values are PUT (default), DELETE,\n// and ADD. The behavior depends on whether the specified primary key already\n// exists in the table.\n// \n//  If an item with the specified Key is found in the table: \n// \n//    PUT - Adds the specified attribute to the item. If the attribute already\n// exists, it is replaced by the new value. \n// \n//    DELETE - If no value is specified, the attribute and its value are removed\n// from the item. The data type of the specified value must match the existing\n// value's data type.\n// \n// If a set of values is specified, then those values are subtracted from the\n// old set. For example, if the attribute value was the set [a,b,c] and the\n// DELETE action specified [a,c], then the final attribute value would be [b].\n// Specifying an empty set is an error.\n// \n//    ADD - If the attribute does not already exist, then the attribute and\n// its values are added to the item. If the attribute does exist, then the behavior\n// of ADD depends on the data type of the attribute:\n// \n//   If the existing attribute is a number, and if Value is also a number,\n// then the Value is mathematically added to the existing attribute. If Value\n// is a negative number, then it is subtracted from the existing attribute.\n// \n//   If you use ADD to increment or decrement a number value for an item that\n// doesn't exist before the update, DynamoDB uses 0 as the initial value.\n// \n// In addition, if you use ADD to update an existing item, and intend to increment\n// or decrement an attribute value which does not yet exist, DynamoDB uses 0\n// as the initial value. For example, suppose that the item you want to update\n// does not yet have an attribute named itemcount, but you decide to ADD the\n// number 3 to this attribute anyway, even though it currently does not exist.\n// DynamoDB will create the itemcount attribute, set its initial value to 0,\n// and finally add 3 to it. The result will be a new itemcount attribute in\n// the item, with a value of 3.\n// \n//    If the existing data type is a set, and if the Value is also a set, then\n// the Value is added to the existing set. (This is a set operation, not mathematical\n// addition.) For example, if the attribute value was the set [1,2], and the\n// ADD action specified [3], then the final attribute value would be [1,2,3].\n// An error occurs if an Add action is specified for a set attribute and the\n// attribute type specified does not match the existing set type. \n// \n// Both sets must have the same primitive data type. For example, if the existing\n// data type is a set of strings, the Value must also be a set of strings. The\n// same holds true for number sets and binary sets.\n// \n//   This action is only valid for an existing attribute whose data type is\n// number or is a set. Do not use ADD for any other data types.\n// \n//    If no item with the specified Key is found: \n// \n//    PUT - DynamoDB creates a new item with the specified primary key, and\n// then adds the attribute. \n// \n//    DELETE - Nothing happens; there is no attribute to delete.\n// \n//    ADD - DynamoDB creates an item with the supplied primary key and number\n// (or set of numbers) for the attribute value. The only data types allowed\n// are number and number set; no other data types can be specified.\n","shape":"AttributeAction","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Value":{"Documentation":"","shape":"AttributeValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"Backfilling":{"ShapeName":"Backfilling","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"boolean","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"BatchGetItemInput":{"ShapeName":"BatchGetItemInput","Documentation":"// Represents the input of a BatchGetItem operation.\n","members":{"RequestItems":{"Documentation":"// A map of one or more table names and, for each table, a map that describes\n// one or more items to retrieve from that table. Each table name can be used\n// only once per BatchGetItem request.\n// \n// Each element in the map of items to retrieve consists of the following:\n// \n//    ConsistentRead - If true, a strongly consistent read is used; if false\n// (the default), an eventually consistent read is used.\n// \n//    ExpressionAttributeNames - One or more substitution tokens for attribute\n// names in the ProjectionExpression parameter. The following are some use cases\n// for using ExpressionAttributeNames:\n// \n//   To access an attribute whose name conflicts with a DynamoDB reserved word.\n// \n//   To create a placeholder for repeating occurrences of an attribute name\n// in an expression.\n// \n//   To prevent special characters in an attribute name from being misinterpreted\n// in an expression.\n// \n//   Use the # character in an expression to dereference an attribute name.\n// For example, consider the following attribute name:\n// \n//    Percentile \n// \n//   The name of this attribute conflicts with a reserved word, so it cannot\n// be used directly in an expression. (For the complete list of reserved words,\n// see Reserved Words (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html)\n// in the Amazon DynamoDB Developer Guide). To work around this, you could specify\n// the following for ExpressionAttributeNames:\n// \n//    {\"#P\":\"Percentile\"} \n// \n//   You could then use this substitution in an expression, as in this example:\n// \n//    #P = :val \n// \n//    Tokens that begin with the : character are expression attribute values,\n// which are placeholders for the actual value at runtime.\n// \n//  For more information on expression attribute names, see Accessing Item\n// Attributes (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n//    Keys - An array of primary key attribute values that define specific\n// items in the table. For each primary key, you must provide all of the key\n// attributes. For example, with a simple primary key, you only need to provide\n// the partition key value. For a composite key, you must provide both the partition\n// key value and the sort key value.\n// \n//    ProjectionExpression - A string that identifies one or more attributes\n// to retrieve from the table. These attributes can include scalars, sets, or\n// elements of a JSON document. The attributes in the expression must be separated\n// by commas.\n// \n// If no attribute names are specified, then all attributes will be returned.\n// If any of the requested attributes are not found, they will not appear in\n// the result.\n// \n// For more information, see Accessing Item Attributes (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n//    AttributesToGet - \n// \n//  This is a legacy parameter, for backward compatibility. New applications\n// should use ProjectionExpression instead. Do not combine legacy parameters\n// and expression parameters in a single API call; otherwise, DynamoDB will\n// return a ValidationException exception.\n// \n// This parameter allows you to retrieve attributes of type List or Map; however,\n// it cannot retrieve individual elements within a List or a Map.\n// \n//  The names of one or more attributes to retrieve. If no attribute names\n// are provided, then all attributes will be returned. If any of the requested\n// attributes are not found, they will not appear in the result.\n// \n// Note that AttributesToGet has no effect on provisioned throughput consumption.\n// DynamoDB determines capacity units consumed based on item size, not on the\n// amount of data that is returned to an application.\n","shape":"BatchGetRequestMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ReturnConsumedCapacity":{"Documentation":"","shape":"ReturnConsumedCapacity","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":["RequestItems"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"RequestItems","Ref":{"Documentation":"// A map of one or more table names and, for each table, a map that describes\n// one or more items to retrieve from that table. Each table name can be used\n// only once per BatchGetItem request.\n// \n// Each element in the map of items to retrieve consists of the following:\n// \n//    ConsistentRead - If true, a strongly consistent read is used; if false\n// (the default), an eventually consistent read is used.\n// \n//    ExpressionAttributeNames - One or more substitution tokens for attribute\n// names in the ProjectionExpression parameter. The following are some use cases\n// for using ExpressionAttributeNames:\n// \n//   To access an attribute whose name conflicts with a DynamoDB reserved word.\n// \n//   To create a placeholder for repeating occurrences of an attribute name\n// in an expression.\n// \n//   To prevent special characters in an attribute name from being misinterpreted\n// in an expression.\n// \n//   Use the # character in an expression to dereference an attribute name.\n// For example, consider the following attribute name:\n// \n//    Percentile \n// \n//   The name of this attribute conflicts with a reserved word, so it cannot\n// be used directly in an expression. (For the complete list of reserved words,\n// see Reserved Words (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html)\n// in the Amazon DynamoDB Developer Guide). To work around this, you could specify\n// the following for ExpressionAttributeNames:\n// \n//    {\"#P\":\"Percentile\"} \n// \n//   You could then use this substitution in an expression, as in this example:\n// \n//    #P = :val \n// \n//    Tokens that begin with the : character are expression attribute values,\n// which are placeholders for the actual value at runtime.\n// \n//  For more information on expression attribute names, see Accessing Item\n// Attributes (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n//    Keys - An array of primary key attribute values that define specific\n// items in the table. For each primary key, you must provide all of the key\n// attributes. For example, with a simple primary key, you only need to provide\n// the partition key value. For a composite key, you must provide both the partition\n// key value and the sort key value.\n// \n//    ProjectionExpression - A string that identifies one or more attributes\n// to retrieve from the table. These attributes can include scalars, sets, or\n// elements of a JSON document. The attributes in the expression must be separated\n// by commas.\n// \n// If no attribute names are specified, then all attributes will be returned.\n// If any of the requested attributes are not found, they will not appear in\n// the result.\n// \n// For more information, see Accessing Item Attributes (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n//    AttributesToGet - \n// \n//  This is a legacy parameter, for backward compatibility. New applications\n// should use ProjectionExpression instead. Do not combine legacy parameters\n// and expression parameters in a single API call; otherwise, DynamoDB will\n// return a ValidationException exception.\n// \n// This parameter allows you to retrieve attributes of type List or Map; however,\n// it cannot retrieve individual elements within a List or a Map.\n// \n//  The names of one or more attributes to retrieve. If no attribute names\n// are provided, then all attributes will be returned. If any of the requested\n// attributes are not found, they will not appear in the result.\n// \n// Note that AttributesToGet has no effect on provisioned throughput consumption.\n// DynamoDB determines capacity units consumed based on item size, not on the\n// amount of data that is returned to an application.\n","shape":"BatchGetRequestMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"RequestItems","Ref":{"Documentation":"// A map of one or more table names and, for each table, a map that describes\n// one or more items to retrieve from that table. Each table name can be used\n// only once per BatchGetItem request.\n// \n// Each element in the map of items to retrieve consists of the following:\n// \n//    ConsistentRead - If true, a strongly consistent read is used; if false\n// (the default), an eventually consistent read is used.\n// \n//    ExpressionAttributeNames - One or more substitution tokens for attribute\n// names in the ProjectionExpression parameter. The following are some use cases\n// for using ExpressionAttributeNames:\n// \n//   To access an attribute whose name conflicts with a DynamoDB reserved word.\n// \n//   To create a placeholder for repeating occurrences of an attribute name\n// in an expression.\n// \n//   To prevent special characters in an attribute name from being misinterpreted\n// in an expression.\n// \n//   Use the # character in an expression to dereference an attribute name.\n// For example, consider the following attribute name:\n// \n//    Percentile \n// \n//   The name of this attribute conflicts with a reserved word, so it cannot\n// be used directly in an expression. (For the complete list of reserved words,\n// see Reserved Words (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html)\n// in the Amazon DynamoDB Developer Guide). To work around this, you could specify\n// the following for ExpressionAttributeNames:\n// \n//    {\"#P\":\"Percentile\"} \n// \n//   You could then use this substitution in an expression, as in this example:\n// \n//    #P = :val \n// \n//    Tokens that begin with the : character are expression attribute values,\n// which are placeholders for the actual value at runtime.\n// \n//  For more information on expression attribute names, see Accessing Item\n// Attributes (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n//    Keys - An array of primary key attribute values that define specific\n// items in the table. For each primary key, you must provide all of the key\n// attributes. For example, with a simple primary key, you only need to provide\n// the partition key value. For a composite key, you must provide both the partition\n// key value and the sort key value.\n// \n//    ProjectionExpression - A string that identifies one or more attributes\n// to retrieve from the table. These attributes can include scalars, sets, or\n// elements of a JSON document. The attributes in the expression must be separated\n// by commas.\n// \n// If no attribute names are specified, then all attributes will be returned.\n// If any of the requested attributes are not found, they will not appear in\n// the result.\n// \n// For more information, see Accessing Item Attributes (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n//    AttributesToGet - \n// \n//  This is a legacy parameter, for backward compatibility. New applications\n// should use ProjectionExpression instead. Do not combine legacy parameters\n// and expression parameters in a single API call; otherwise, DynamoDB will\n// return a ValidationException exception.\n// \n// This parameter allows you to retrieve attributes of type List or Map; however,\n// it cannot retrieve individual elements within a List or a Map.\n// \n//  The names of one or more attributes to retrieve. If no attribute names\n// are provided, then all attributes will be returned. If any of the requested\n// attributes are not found, they will not appear in the result.\n// \n// Note that AttributesToGet has no effect on provisioned throughput consumption.\n// DynamoDB determines capacity units consumed based on item size, not on the\n// amount of data that is returned to an application.\n","shape":"BatchGetRequestMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"RequestItems","Ref":{"Documentation":"// A map of one or more table names and, for each table, a map that describes\n// one or more items to retrieve from that table. Each table name can be used\n// only once per BatchGetItem request.\n// \n// Each element in the map of items to retrieve consists of the following:\n// \n//    ConsistentRead - If true, a strongly consistent read is used; if false\n// (the default), an eventually consistent read is used.\n// \n//    ExpressionAttributeNames - One or more substitution tokens for attribute\n// names in the ProjectionExpression parameter. The following are some use cases\n// for using ExpressionAttributeNames:\n// \n//   To access an attribute whose name conflicts with a DynamoDB reserved word.\n// \n//   To create a placeholder for repeating occurrences of an attribute name\n// in an expression.\n// \n//   To prevent special characters in an attribute name from being misinterpreted\n// in an expression.\n// \n//   Use the # character in an expression to dereference an attribute name.\n// For example, consider the following attribute name:\n// \n//    Percentile \n// \n//   The name of this attribute conflicts with a reserved word, so it cannot\n// be used directly in an expression. (For the complete list of reserved words,\n// see Reserved Words (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html)\n// in the Amazon DynamoDB Developer Guide). To work around this, you could specify\n// the following for ExpressionAttributeNames:\n// \n//    {\"#P\":\"Percentile\"} \n// \n//   You could then use this substitution in an expression, as in this example:\n// \n//    #P = :val \n// \n//    Tokens that begin with the : character are expression attribute values,\n// which are placeholders for the actual value at runtime.\n// \n//  For more information on expression attribute names, see Accessing Item\n// Attributes (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n//    Keys - An array of primary key attribute values that define specific\n// items in the table. For each primary key, you must provide all of the key\n// attributes. For example, with a simple primary key, you only need to provide\n// the partition key value. For a composite key, you must provide both the partition\n// key value and the sort key value.\n// \n//    ProjectionExpression - A string that identifies one or more attributes\n// to retrieve from the table. These attributes can include scalars, sets, or\n// elements of a JSON document. The attributes in the expression must be separated\n// by commas.\n// \n// If no attribute names are specified, then all attributes will be returned.\n// If any of the requested attributes are not found, they will not appear in\n// the result.\n// \n// For more information, see Accessing Item Attributes (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n//    AttributesToGet - \n// \n//  This is a legacy parameter, for backward compatibility. New applications\n// should use ProjectionExpression instead. Do not combine legacy parameters\n// and expression parameters in a single API call; otherwise, DynamoDB will\n// return a ValidationException exception.\n// \n// This parameter allows you to retrieve attributes of type List or Map; however,\n// it cannot retrieve individual elements within a List or a Map.\n// \n//  The names of one or more attributes to retrieve. If no attribute names\n// are provided, then all attributes will be returned. If any of the requested\n// attributes are not found, they will not appear in the result.\n// \n// Note that AttributesToGet has no effect on provisioned throughput consumption.\n// DynamoDB determines capacity units consumed based on item size, not on the\n// amount of data that is returned to an application.\n","shape":"BatchGetRequestMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":2}]},"BatchGetItemOutput":{"ShapeName":"BatchGetItemOutput","Documentation":"// Represents the output of a BatchGetItem operation.\n","members":{"ConsumedCapacity":{"Documentation":"// The read capacity units consumed by the operation.\n// \n// Each element consists of:\n// \n//    TableName - The table that consumed the provisioned throughput.\n// \n//    CapacityUnits - The total number of capacity units consumed.\n","shape":"ConsumedCapacityMultiple","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Responses":{"Documentation":"// A map of table name to a list of items. Each object in Responses consists\n// of a table name, along with a map of attribute data consisting of the data\n// type and attribute value.\n","shape":"BatchGetResponseMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"UnprocessedKeys":{"Documentation":"// A map of tables and their respective keys that were not processed with the\n// current response. The UnprocessedKeys value is in the same form as RequestItems,\n// so the value can be provided directly to a subsequent BatchGetItem operation.\n// For more information, see RequestItems in the Request Parameters section.\n// \n// Each element consists of:\n// \n//    Keys - An array of primary key attribute values that define specific\n// items in the table.\n// \n//    AttributesToGet - One or more attributes to be retrieved from the table\n// or index. By default, all attributes are returned. If a requested attribute\n// is not found, it does not appear in the result.\n// \n//    ConsistentRead - The consistency of a read operation. If set to true,\n// then a strongly consistent read is used; otherwise, an eventually consistent\n// read is used.\n// \n//   If there are no unprocessed keys remaining, the response contains an empty\n// UnprocessedKeys map.\n","shape":"BatchGetRequestMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"BatchGetRequestMap":{"ShapeName":"BatchGetRequestMap","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"KeysAndAttributes","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"map","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":1,"Max":100,"Placeholder":false,"deprecated":false,"Validations":null},"BatchGetResponseMap":{"ShapeName":"BatchGetResponseMap","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"ItemList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"map","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"BatchWriteItemInput":{"ShapeName":"BatchWriteItemInput","Documentation":"// Represents the input of a BatchWriteItem operation.\n","members":{"RequestItems":{"Documentation":"// A map of one or more table names and, for each table, a list of operations\n// to be performed (DeleteRequest or PutRequest). Each element in the map consists\n// of the following:\n// \n//    DeleteRequest - Perform a DeleteItem operation on the specified item.\n// The item to be deleted is identified by a Key subelement:\n// \n//    Key - A map of primary key attribute values that uniquely identify the\n// ! item. Each entry in this map consists of an attribute name and an attribute\n// value. For each primary key, you must provide all of the key attributes.\n// For example, with a simple primary key, you only need to provide a value\n// for the partition key. For a composite primary key, you must provide values\n// for both the partition key and the sort key.\n// \n//      PutRequest - Perform a PutItem operation on the specified item. The\n// item to be put is identified by an Item subelement:\n// \n//    Item - A map of attributes and their values. Each entry in this map consists\n// of an attribute name and an attribute value. Attribute values must not be\n// null; string and binary type attributes must have lengths greater than zero;\n// and set type attributes must not be empty. Requests that contain empty values\n// will be rejected with a ValidationException exception.\n// \n// If you specify any attributes that are part of an index key, then the data\n// types for those attributes must match those of the schema in the table's\n// attribute definition.\n","shape":"BatchWriteItemRequestMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ReturnConsumedCapacity":{"Documentation":"","shape":"ReturnConsumedCapacity","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ReturnItemCollectionMetrics":{"Documentation":"// Determines whether item collection metrics are returned. If set to SIZE,\n// the response includes statistics about item collections, if any, that were\n// modified during the operation are returned in the response. If set to NONE\n// (the default), no statistics are returned.\n","shape":"ReturnItemCollectionMetrics","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":["RequestItems"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"RequestItems","Ref":{"Documentation":"// A map of one or more table names and, for each table, a list of operations\n// to be performed (DeleteRequest or PutRequest). Each element in the map consists\n// of the following:\n// \n//    DeleteRequest - Perform a DeleteItem operation on the specified item.\n// The item to be deleted is identified by a Key subelement:\n// \n//    Key - A map of primary key attribute values that uniquely identify the\n// ! item. Each entry in this map consists of an attribute name and an attribute\n// value. For each primary key, you must provide all of the key attributes.\n// For example, with a simple primary key, you only need to provide a value\n// for the partition key. For a composite primary key, you must provide values\n// for both the partition key and the sort key.\n// \n//      PutRequest - Perform a PutItem operation on the specified item. The\n// item to be put is identified by an Item subelement:\n// \n//    Item - A map of attributes and their values. Each entry in this map consists\n// of an attribute name and an attribute value. Attribute values must not be\n// null; string and binary type attributes must have lengths greater than zero;\n// and set type attributes must not be empty. Requests that contain empty values\n// will be rejected with a ValidationException exception.\n// \n// If you specify any attributes that are part of an index key, then the data\n// types for those attributes must match those of the schema in the table's\n// attribute definition.\n","shape":"BatchWriteItemRequestMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"RequestItems","Ref":{"Documentation":"// A map of one or more table names and, for each table, a list of operations\n// to be performed (DeleteRequest or PutRequest). Each element in the map consists\n// of the following:\n// \n//    DeleteRequest - Perform a DeleteItem operation on the specified item.\n// The item to be deleted is identified by a Key subelement:\n// \n//    Key - A map of primary key attribute values that uniquely identify the\n// ! item. Each entry in this map consists of an attribute name and an attribute\n// value. For each primary key, you must provide all of the key attributes.\n// For example, with a simple primary key, you only need to provide a value\n// for the partition key. For a composite primary key, you must provide values\n// for both the partition key and the sort key.\n// \n//      PutRequest - Perform a PutItem operation on the specified item. The\n// item to be put is identified by an Item subelement:\n// \n//    Item - A map of attributes and their values. Each entry in this map consists\n// of an attribute name and an attribute value. Attribute values must not be\n// null; string and binary type attributes must have lengths greater than zero;\n// and set type attributes must not be empty. Requests that contain empty values\n// will be rejected with a ValidationException exception.\n// \n// If you specify any attributes that are part of an index key, then the data\n// types for those attributes must match those of the schema in the table's\n// attribute definition.\n","shape":"BatchWriteItemRequestMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1}]},"BatchWriteItemOutput":{"ShapeName":"BatchWriteItemOutput","Documentation":"// Represents the output of a BatchWriteItem operation.\n","members":{"ConsumedCapacity":{"Documentation":"// The capacity units consumed by the operation.\n// \n// Each element consists of:\n// \n//    TableName - The table that consumed the provisioned throughput.\n// \n//    CapacityUnits - The total number of capacity units consumed.\n","shape":"ConsumedCapacityMultiple","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ItemCollectionMetrics":{"Documentation":"// A list of tables that were processed by BatchWriteItem and, for each table,\n// information about any item collections that were affected by individual DeleteItem\n// or PutItem operations.\n// \n// Each entry consists of the following subelements:\n// \n//    ItemCollectionKey - The partition key value of the item collection. This\n// is the same as the partition key value of the item.\n// \n//    SizeEstimateRange - An estimate of item collection size, expressed in\n// GB. This is a two-element array containing a lower bound and an upper bound\n// for the estimate. The estimate includes the size of all the items in the\n// table, plus the size of all attributes projected into all of the local secondary\n// indexes on the table. Use this estimate to measure whether a local secondary\n// index is approaching its size limit.\n// \n// The estimate is subject to change over time; therefore, do not rely on the\n// precision or accuracy of the estimate.\n","shape":"ItemCollectionMetricsPerTable","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"UnprocessedItems":{"Documentation":"// A map of tables and requests against those tables that were not processed.\n// The UnprocessedItems value is in the same form as RequestItems, so you can\n// provide this value directly to a subsequent BatchGetItem operation. For more\n// information, see RequestItems in the Request Parameters section.\n// \n// Each UnprocessedItems entry consists of a table name and, for that table,\n// a list of operations to perform (DeleteRequest or PutRequest).\n// \n//    DeleteRequest - Perform a DeleteItem operation on the specified item.\n// The item to be deleted is identified by a Key subelement:\n// \n//    Key - A map of primary key attribute values that uniquely identify the\n// item. Each entry in this map consists of an attribute name and an attribute\n// value.\n// \n//      PutRequest - Perform a PutItem operation on the specified item. The\n// item to be put is identified by an Item subelement:\n// \n//    Item - A map of attributes and their values. Each entry in this map consists\n// of an attribute name and an attribute value. Attribute values must not be\n// null; string and binary type attributes must have lengths greater than zero;\n// and set type attributes must not be empty. Requests that contain empty values\n// will be rejected with a ValidationException exception.\n// \n// If you specify any attributes that are part of an index key, then the data\n// types for those attributes must match those of the schema in the table's\n// attribute definition.\n// \n//     If there are no unprocessed items remaining, the response contains an\n// empty UnprocessedItems map.\n","shape":"BatchWriteItemRequestMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"BatchWriteItemRequestMap":{"ShapeName":"BatchWriteItemRequestMap","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"WriteRequests","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"map","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":1,"Max":25,"Placeholder":false,"deprecated":false,"Validations":null},"BinaryAttributeValue":{"ShapeName":"BinaryAttributeValue","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"blob","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"BinarySetAttributeValue":{"ShapeName":"BinarySetAttributeValue","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"BinaryAttributeValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"list","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"BooleanAttributeValue":{"ShapeName":"BooleanAttributeValue","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"boolean","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"BooleanObject":{"ShapeName":"BooleanObject","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"boolean","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"Capacity":{"ShapeName":"Capacity","Documentation":"// Represents the amount of provisioned throughput capacity consumed on a table\n// or an index.\n","members":{"CapacityUnits":{"Documentation":"// The total number of capacity units consumed on a table or an index.\n","shape":"ConsumedCapacityUnits","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ComparisonOperator":{"ShapeName":"ComparisonOperator","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":["EQ","NE","IN","LE","LT","GE","GT","BETWEEN","NOT_NULL","NULL","CONTAINS","NOT_CONTAINS","BEGINS_WITH"],"EnumConsts":["ComparisonOperatorEq","ComparisonOperatorNe","ComparisonOperatorIn","ComparisonOperatorLe","ComparisonOperatorLt","ComparisonOperatorGe","ComparisonOperatorGt","ComparisonOperatorBetween","ComparisonOperatorNotNull","ComparisonOperatorNull","ComparisonOperatorContains","ComparisonOperatorNotContains","ComparisonOperatorBeginsWith"],"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"Condition":{"ShapeName":"Condition","Documentation":"// Represents the selection criteria for a Query or Scan operation:\n// \n//   For a Query operation, Condition is used for specifying the KeyConditions\n// to use when querying a table or an index. For KeyConditions, only the following\n// comparison operators are supported:\n// \n//  EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN \n// \n//  Condition is also used in a QueryFilter, which evaluates the query results\n// and returns only the desired values.\n// \n//   For a Scan operation, Condition is used in a ScanFilter, which evaluates\n// the scan results and returns only the desired values.\n","members":{"AttributeValueList":{"Documentation":"// One or more values to evaluate against the supplied attribute. The number\n// of values in the list depends on the ComparisonOperator being used.\n// \n// For type Number, value comparisons are numeric.\n// \n// String value comparisons for greater than, equals, or less than are based\n// on ASCII character code values. For example, a is greater than A, and a is\n// greater than B. For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\n// (http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters).\n// \n// For Binary, DynamoDB treats each byte of the binary data as unsigned when\n// it compares binary values.\n","shape":"AttributeValueList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ComparisonOperator":{"Documentation":"// A comparator for evaluating attributes. For example, equals, greater than,\n// less than, etc.\n// \n// The following comparison operators are available:\n// \n//  EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS\n// | BEGINS_WITH | IN | BETWEEN \n// \n// The following are descriptions of each comparison operator.\n// \n//    EQ : Equal. EQ is supported for all datatypes, including lists and maps.\n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, Binary, String Set, Number Set, or Binary Set. If an item\n// contains an AttributeValue element of a different type than the one provided\n// in the request, the value does not match. For example, {\"S\":\"6\"} does not\n// equal {\"N\":\"6\"}. Also, {\"N\":\"6\"} does not equal {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     NE : Not equal. NE is supported for all datatypes, including lists and\n// maps.\n// \n//  AttributeValueList can contain only one AttributeValue of type String,\n// Number, Binary, String Set, Number Set, or Binary Set. If an item contains\n// an AttributeValue of a different type than the one provided in the request,\n// the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}.\n// Also, {\"N\":\"6\"} does not equal {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     LE : Less than or equal. \n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     LT : Less than. \n// \n//  AttributeValueList can contain only one AttributeValue of type String,\n// Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     GE : Greater than or equal. \n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     GT : Greater than. \n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     NOT_NULL : The attribute exists. NOT_NULL is supported for all datatypes,\n// including lists and maps.\n// \n//  This operator tests for the existence of an attribute, not its data type.\n// If the data type of attribute \"a\" is null, and you evaluate it using NOT_NULL,\n// the result is a Boolean true. This result is because the attribute \"a\" exists;\n// its data type is not relevant to the NOT_NULL comparison operator.\n// \n//     NULL : The attribute does not exist. NULL is supported for all datatypes,\n// including lists and maps.\n// \n//  This operator tests for the nonexistence of an attribute, not its data\n// type. If the data type of attribute \"a\" is null, and you evaluate it using\n// NULL, the result is a Boolean false. This is because the attribute \"a\" exists;\n// its data type is not relevant to the NULL comparison operator.\n// \n//     CONTAINS : Checks for a subsequence, or value in a set.\n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If the target attribute of the\n// comparison is of type String, then the operator checks for a substring match.\n// If the target attribute of the comparison is of type Binary, then the operator\n// looks for a subsequence of the target that matches the input. If the target\n// attribute of the comparison is a set (\"SS\", \"NS\", or \"BS\"), then the operator\n// evaluates to true if it finds an exact match with any member of the set.\n// \n// CONTAINS is supported for lists: When evaluating \"a CONTAINS b\", \"a\" can\n// be a list; however, \"b\" cannot be a set, a map, or a list.\n// \n//    NOT_CONTAINS : Checks for absence of a subsequence, or absence of a value\n// in a set.\n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If the target attribute of the\n// comparison is a String, then the operator checks for the absence of a substring\n// match. If the target attribute of the comparison is Binary, then the operator\n// checks for the absence of a subsequence of the target that matches the input.\n// If the target attribute of the comparison is a set (\"SS\", \"NS\", or \"BS\"),\n// then the operator evaluates to true if it does not find an exact match with\n// any member of the set.\n// \n// NOT_CONTAINS is supported for lists: When evaluating \"a NOT CONTAINS b\",\n// \"a\" can be a list; however, \"b\" cannot be a set, a map, or a list.\n// \n//    BEGINS_WITH : Checks for a prefix. \n// \n//  AttributeValueList can contain only one AttributeValue of type String or\n// Binary (not a Number or a set type). The target attribute of the comparison\n// must be of type String or Binary (not a Number or a set type).\n// \n//     IN : Checks for matching elements within two sets.\n// \n//  AttributeValueList can contain one or more AttributeValue elements of type\n// String, Number, or Binary (not a set type). These attributes are compared\n// against an existing set type attribute of an item. If any elements of the\n// input set are present in the item attribute, the expression evaluates to\n// true.\n// \n//    BETWEEN : Greater than or equal to the first value, and less than or\n// equal to the second value. \n// \n//  AttributeValueList must contain two AttributeValue elements of the same\n// type, either String, Number, or Binary (not a set type). A target attribute\n// matches if the target value is greater than, or equal to, the first element\n// and less than, or equal to, the second element. If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not compare to {\"N\":\"6\"}. Also,\n// {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} \n// \n//   For usage examples of AttributeValueList and ComparisonOperator, see Legacy\n// Conditional Parameters (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"ComparisonOperator","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":["ComparisonOperator"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"ComparisonOperator","Ref":{"Documentation":"// A comparator for evaluating attributes. For example, equals, greater than,\n// less than, etc.\n// \n// The following comparison operators are available:\n// \n//  EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS\n// | BEGINS_WITH | IN | BETWEEN \n// \n// The following are descriptions of each comparison operator.\n// \n//    EQ : Equal. EQ is supported for all datatypes, including lists and maps.\n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, Binary, String Set, Number Set, or Binary Set. If an item\n// contains an AttributeValue element of a different type than the one provided\n// in the request, the value does not match. For example, {\"S\":\"6\"} does not\n// equal {\"N\":\"6\"}. Also, {\"N\":\"6\"} does not equal {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     NE : Not equal. NE is supported for all datatypes, including lists and\n// maps.\n// \n//  AttributeValueList can contain only one AttributeValue of type String,\n// Number, Binary, String Set, Number Set, or Binary Set. If an item contains\n// an AttributeValue of a different type than the one provided in the request,\n// the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}.\n// Also, {\"N\":\"6\"} does not equal {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     LE : Less than or equal. \n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     LT : Less than. \n// \n//  AttributeValueList can contain only one AttributeValue of type String,\n// Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     GE : Greater than or equal. \n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     GT : Greater than. \n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     NOT_NULL : The attribute exists. NOT_NULL is supported for all datatypes,\n// including lists and maps.\n// \n//  This operator tests for the existence of an attribute, not its data type.\n// If the data type of attribute \"a\" is null, and you evaluate it using NOT_NULL,\n// the result is a Boolean true. This result is because the attribute \"a\" exists;\n// its data type is not relevant to the NOT_NULL comparison operator.\n// \n//     NULL : The attribute does not exist. NULL is supported for all datatypes,\n// including lists and maps.\n// \n//  This operator tests for the nonexistence of an attribute, not its data\n// type. If the data type of attribute \"a\" is null, and you evaluate it using\n// NULL, the result is a Boolean false. This is because the attribute \"a\" exists;\n// its data type is not relevant to the NULL comparison operator.\n// \n//     CONTAINS : Checks for a subsequence, or value in a set.\n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If the target attribute of the\n// comparison is of type String, then the operator checks for a substring match.\n// If the target attribute of the comparison is of type Binary, then the operator\n// looks for a subsequence of the target that matches the input. If the target\n// attribute of the comparison is a set (\"SS\", \"NS\", or \"BS\"), then the operator\n// evaluates to true if it finds an exact match with any member of the set.\n// \n// CONTAINS is supported for lists: When evaluating \"a CONTAINS b\", \"a\" can\n// be a list; however, \"b\" cannot be a set, a map, or a list.\n// \n//    NOT_CONTAINS : Checks for absence of a subsequence, or absence of a value\n// in a set.\n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If the target attribute of the\n// comparison is a String, then the operator checks for the absence of a substring\n// match. If the target attribute of the comparison is Binary, then the operator\n// checks for the absence of a subsequence of the target that matches the input.\n// If the target attribute of the comparison is a set (\"SS\", \"NS\", or \"BS\"),\n// then the operator evaluates to true if it does not find an exact match with\n// any member of the set.\n// \n// NOT_CONTAINS is supported for lists: When evaluating \"a NOT CONTAINS b\",\n// \"a\" can be a list; however, \"b\" cannot be a set, a map, or a list.\n// \n//    BEGINS_WITH : Checks for a prefix. \n// \n//  AttributeValueList can contain only one AttributeValue of type String or\n// Binary (not a Number or a set type). The target attribute of the comparison\n// must be of type String or Binary (not a Number or a set type).\n// \n//     IN : Checks for matching elements within two sets.\n// \n//  AttributeValueList can contain one or more AttributeValue elements of type\n// String, Number, or Binary (not a set type). These attributes are compared\n// against an existing set type attribute of an item. If any elements of the\n// input set are present in the item attribute, the expression evaluates to\n// true.\n// \n//    BETWEEN : Greater than or equal to the first value, and less than or\n// equal to the second value. \n// \n//  AttributeValueList must contain two AttributeValue elements of the same\n// type, either String, Number, or Binary (not a set type). A target attribute\n// matches if the target value is greater than, or equal to, the first element\n// and less than, or equal to, the second element. If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not compare to {\"N\":\"6\"}. Also,\n// {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} \n// \n//   For usage examples of AttributeValueList and ComparisonOperator, see Legacy\n// Conditional Parameters (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"ComparisonOperator","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0}]},"ConditionExpression":{"ShapeName":"ConditionExpression","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ConditionalOperator":{"ShapeName":"ConditionalOperator","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":["AND","OR"],"EnumConsts":["ConditionalOperatorAnd","ConditionalOperatorOr"],"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ConsistentRead":{"ShapeName":"ConsistentRead","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"boolean","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ConsumedCapacity":{"ShapeName":"ConsumedCapacity","Documentation":"// The capacity units consumed by an operation. The data returned includes the\n// total provisioned throughput consumed, along with statistics for the table\n// and any indexes involved in the operation. ConsumedCapacity is only returned\n// if the request asked for it. For more information, see Provisioned Throughput\n// (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html)\n// in the Amazon DynamoDB Developer Guide.\n","members":{"CapacityUnits":{"Documentation":"// The total number of capacity units consumed by the operation.\n","shape":"ConsumedCapacityUnits","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"GlobalSecondaryIndexes":{"Documentation":"// The amount of throughput consumed on each global index affected by the operation.\n","shape":"SecondaryIndexesCapacityMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"LocalSecondaryIndexes":{"Documentation":"// The amount of throughput consumed on each local index affected by the operation.\n","shape":"SecondaryIndexesCapacityMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Table":{"Documentation":"// The amount of throughput consumed on the table affected by the operation.\n","shape":"Capacity","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"TableName":{"Documentation":"// The name of the table that was affected by the operation.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ConsumedCapacityMultiple":{"ShapeName":"ConsumedCapacityMultiple","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"ConsumedCapacity","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"list","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ConsumedCapacityUnits":{"ShapeName":"ConsumedCapacityUnits","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"double","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"CreateGlobalSecondaryIndexAction":{"ShapeName":"CreateGlobalSecondaryIndexAction","Documentation":"// Represents a new global secondary index to be added to an existing table.\n","members":{"IndexName":{"Documentation":"// The name of the global secondary index to be created.\n","shape":"IndexName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"KeySchema":{"Documentation":"// The key schema for the global secondary index.\n","shape":"KeySchema","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Projection":{"Documentation":"","shape":"Projection","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ProvisionedThroughput":{"Documentation":"","shape":"ProvisionedThroughput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":["IndexName","KeySchema","Projection","ProvisionedThroughput"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"IndexName","Ref":{"Documentation":"// The name of the global secondary index to be created.\n","shape":"IndexName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"IndexName","Ref":{"Documentation":"// The name of the global secondary index to be created.\n","shape":"IndexName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"KeySchema","Ref":{"Documentation":"// The key schema for the global secondary index.\n","shape":"KeySchema","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"KeySchema","Ref":{"Documentation":"// The key schema for the global secondary index.\n","shape":"KeySchema","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"Projection","Ref":{"Documentation":"","shape":"Projection","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"ProvisionedThroughput","Ref":{"Documentation":"","shape":"ProvisionedThroughput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"KeySchema","Ref":{"Documentation":"// The key schema for the global secondary index.\n","shape":"KeySchema","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":2},{"Name":"Projection","Ref":{"Documentation":"","shape":"Projection","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":2},{"Name":"ProvisionedThroughput","Ref":{"Documentation":"","shape":"ProvisionedThroughput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":2}]},"CreateTableInput":{"ShapeName":"CreateTableInput","Documentation":"// Represents the input of a CreateTable operation.\n","members":{"AttributeDefinitions":{"Documentation":"// An array of attributes that describe the key schema for the table and indexes.\n","shape":"AttributeDefinitions","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"GlobalSecondaryIndexes":{"Documentation":"// One or more global secondary indexes (the maximum is five) to be created\n// on the table. Each global secondary index in the array includes the following:\n// \n//    IndexName - The name of the global secondary index. Must be unique only\n// for this table.\n// \n//     KeySchema - Specifies the key schema for the global secondary index.\n// \n//    Projection - Specifies attributes that are copied (projected) from the\n// table into the index. These are in addition to the primary key attributes\n// and index key attributes, which are automatically projected. Each attribute\n// specification is composed of:\n// \n//    ProjectionType - One of the following:\n// \n//    KEYS_ONLY - Only the index and primary keys are projected into the index.\n// \n//    INCLUDE - Only the specified table attributes are projected into the\n// index. The list of projected attributes are in NonKeyAttributes.\n// \n//    ALL - All of the table attributes are projected into the index.\n// \n//      NonKeyAttributes - A list of one or more non-key attribute names that\n// are projected into the secondary index. The total count of attributes provided\n// in NonKeyAttributes, summed across all of the secondary indexes, must not\n// exceed 20. If you project the same attribute into two different indexes,\n// this counts as two distinct attributes when determining the total.\n// \n//      ProvisionedThroughput - The provisioned throughput settings for the\n// global secondary index, consisting of read and write capacity units.\n","shape":"GlobalSecondaryIndexList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"KeySchema":{"Documentation":"// Specifies the attributes that make up the primary key for a table or an index.\n// The attributes in KeySchema must also be defined in the AttributeDefinitions\n// array. For more information, see Data Model (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n// Each KeySchemaElement in the array is composed of:\n// \n//    AttributeName - The name of this key attribute.\n// \n//    KeyType - The role that the key attribute will assume:\n// \n//    HASH - partition key\n// \n//    RANGE - sort key\n// \n//      The partition key of an item is also known as its hash attribute. The\n// term \"hash attribute\" derives from DynamoDB' usage of an internal hash function\n// to evenly distribute data items across partitions, based on their partition\n// key values.\n// \n// The sort key of an item is also known as its range attribute. The term \"range\n// attribute\" derives from the way DynamoDB stores items with the same partition\n// key physically close together, in sorted order by the sort key value.\n// \n//  For a simple primary key (partition key), you must provide exactly one\n// element with a KeyType of HASH.\n// \n// For a composite primary key (partition key and sort key), you must provide\n// exactly two elements, in this order: The first element must have a KeyType\n// of HASH, and the second element must have a KeyType of RANGE.\n// \n// For more information, see Specifying the Primary Key (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"KeySchema","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"LocalSecondaryIndexes":{"Documentation":"// One or more local secondary indexes (the maximum is five) to be created on\n// the table. Each index is scoped to a given partition key value. There is\n// a 10 GB size limit per partition key value; otherwise, the size of a local\n// secondary index is unconstrained.\n// \n// Each local secondary index in the array includes the following:\n// \n//    IndexName - The name of the local secondary index. Must be unique only\n// for this table.\n// \n//     KeySchema - Specifies the key schema for the local secondary index.\n// The key schema must begin with the same partition key as the table.\n// \n//    Projection - Specifies attributes that are copied (projected) from the\n// table into the index. These are in addition to the primary key attributes\n// and index key attributes, which are automatically projected. Each attribute\n// specification is composed of:\n// \n//    ProjectionType - One of the following:\n// \n//    KEYS_ONLY - Only the index and primary keys are projected into the index.\n// \n//    INCLUDE - Only the specified table attributes are projected into the\n// index. The list of projected attributes are in NonKeyAttributes.\n// \n//    ALL - All of the table attributes are projected into the index.\n// \n//      NonKeyAttributes - A list of one or more non-key attribute names that\n// are projected into the secondary index. The total count of attributes provided\n// in NonKeyAttributes, summed across all of the secondary indexes, must not\n// exceed 20. If you project the same attribute into two different indexes,\n// this counts as two distinct attributes when determining the total.\n","shape":"LocalSecondaryIndexList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ProvisionedThroughput":{"Documentation":"","shape":"ProvisionedThroughput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"StreamSpecification":{"Documentation":"// The settings for DynamoDB Streams on the table. These settings consist of:\n// \n//    StreamEnabled - Indicates whether Streams is to be enabled (true) or\n// disabled (false).\n// \n//    StreamViewType - When an item in the table is modified, StreamViewType\n// determines what information is written to the table's stream. Valid values\n// for StreamViewType are:\n// \n//    KEYS_ONLY - Only the key attributes of the modified item are written\n// to the stream.\n// \n//    NEW_IMAGE - The entire item, as it appears after it was modified, is\n// written to the stream.\n// \n//    OLD_IMAGE - The entire item, as it appeared before it was modified, is\n// written to the stream.\n// \n//    NEW_AND_OLD_IMAGES - Both the new and the old item images of the item\n// are written to the stream.\n","shape":"StreamSpecification","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"TableName":{"Documentation":"// The name of the table to create.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":["AttributeDefinitions","TableName","KeySchema","ProvisionedThroughput"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"AttributeDefinitions","Ref":{"Documentation":"// An array of attributes that describe the key schema for the table and indexes.\n","shape":"AttributeDefinitions","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"KeySchema","Ref":{"Documentation":"// Specifies the attributes that make up the primary key for a table or an index.\n// The attributes in KeySchema must also be defined in the AttributeDefinitions\n// array. For more information, see Data Model (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n// Each KeySchemaElement in the array is composed of:\n// \n//    AttributeName - The name of this key attribute.\n// \n//    KeyType - The role that the key attribute will assume:\n// \n//    HASH - partition key\n// \n//    RANGE - sort key\n// \n//      The partition key of an item is also known as its hash attribute. The\n// term \"hash attribute\" derives from DynamoDB' usage of an internal hash function\n// to evenly distribute data items across partitions, based on their partition\n// key values.\n// \n// The sort key of an item is also known as its range attribute. The term \"range\n// attribute\" derives from the way DynamoDB stores items with the same partition\n// key physically close together, in sorted order by the sort key value.\n// \n//  For a simple primary key (partition key), you must provide exactly one\n// element with a KeyType of HASH.\n// \n// For a composite primary key (partition key and sort key), you must provide\n// exactly two elements, in this order: The first element must have a KeyType\n// of HASH, and the second element must have a KeyType of RANGE.\n// \n// For more information, see Specifying the Primary Key (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"KeySchema","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"KeySchema","Ref":{"Documentation":"// Specifies the attributes that make up the primary key for a table or an index.\n// The attributes in KeySchema must also be defined in the AttributeDefinitions\n// array. For more information, see Data Model (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n// Each KeySchemaElement in the array is composed of:\n// \n//    AttributeName - The name of this key attribute.\n// \n//    KeyType - The role that the key attribute will assume:\n// \n//    HASH - partition key\n// \n//    RANGE - sort key\n// \n//      The partition key of an item is also known as its hash attribute. The\n// term \"hash attribute\" derives from DynamoDB' usage of an internal hash function\n// to evenly distribute data items across partitions, based on their partition\n// key values.\n// \n// The sort key of an item is also known as its range attribute. The term \"range\n// attribute\" derives from the way DynamoDB stores items with the same partition\n// key physically close together, in sorted order by the sort key value.\n// \n//  For a simple primary key (partition key), you must provide exactly one\n// element with a KeyType of HASH.\n// \n// For a composite primary key (partition key and sort key), you must provide\n// exactly two elements, in this order: The first element must have a KeyType\n// of HASH, and the second element must have a KeyType of RANGE.\n// \n// For more information, see Specifying the Primary Key (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"KeySchema","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"ProvisionedThroughput","Ref":{"Documentation":"","shape":"ProvisionedThroughput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"TableName","Ref":{"Documentation":"// The name of the table to create.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"TableName","Ref":{"Documentation":"// The name of the table to create.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"AttributeDefinitions","Ref":{"Documentation":"// An array of attributes that describe the key schema for the table and indexes.\n","shape":"AttributeDefinitions","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":2},{"Name":"GlobalSecondaryIndexes","Ref":{"Documentation":"// One or more global secondary indexes (the maximum is five) to be created\n// on the table. Each global secondary index in the array includes the following:\n// \n//    IndexName - The name of the global secondary index. Must be unique only\n// for this table.\n// \n//     KeySchema - Specifies the key schema for the global secondary index.\n// \n//    Projection - Specifies attributes that are copied (projected) from the\n// table into the index. These are in addition to the primary key attributes\n// and index key attributes, which are automatically projected. Each attribute\n// specification is composed of:\n// \n//    ProjectionType - One of the following:\n// \n//    KEYS_ONLY - Only the index and primary keys are projected into the index.\n// \n//    INCLUDE - Only the specified table attributes are projected into the\n// index. The list of projected attributes are in NonKeyAttributes.\n// \n//    ALL - All of the table attributes are projected into the index.\n// \n//      NonKeyAttributes - A list of one or more non-key attribute names that\n// are projected into the secondary index. The total count of attributes provided\n// in NonKeyAttributes, summed across all of the secondary indexes, must not\n// exceed 20. If you project the same attribute into two different indexes,\n// this counts as two distinct attributes when determining the total.\n// \n//      ProvisionedThroughput - The provisioned throughput settings for the\n// global secondary index, consisting of read and write capacity units.\n","shape":"GlobalSecondaryIndexList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":2},{"Name":"KeySchema","Ref":{"Documentation":"// Specifies the attributes that make up the primary key for a table or an index.\n// The attributes in KeySchema must also be defined in the AttributeDefinitions\n// array. For more information, see Data Model (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n// Each KeySchemaElement in the array is composed of:\n// \n//    AttributeName - The name of this key attribute.\n// \n//    KeyType - The role that the key attribute will assume:\n// \n//    HASH - partition key\n// \n//    RANGE - sort key\n// \n//      The partition key of an item is also known as its hash attribute. The\n// term \"hash attribute\" derives from DynamoDB' usage of an internal hash function\n// to evenly distribute data items across partitions, based on their partition\n// key values.\n// \n// The sort key of an item is also known as its range attribute. The term \"range\n// attribute\" derives from the way DynamoDB stores items with the same partition\n// key physically close together, in sorted order by the sort key value.\n// \n//  For a simple primary key (partition key), you must provide exactly one\n// element with a KeyType of HASH.\n// \n// For a composite primary key (partition key and sort key), you must provide\n// exactly two elements, in this order: The first element must have a KeyType\n// of HASH, and the second element must have a KeyType of RANGE.\n// \n// For more information, see Specifying the Primary Key (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"KeySchema","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":2},{"Name":"LocalSecondaryIndexes","Ref":{"Documentation":"// One or more local secondary indexes (the maximum is five) to be created on\n// the table. Each index is scoped to a given partition key value. There is\n// a 10 GB size limit per partition key value; otherwise, the size of a local\n// secondary index is unconstrained.\n// \n// Each local secondary index in the array includes the following:\n// \n//    IndexName - The name of the local secondary index. Must be unique only\n// for this table.\n// \n//     KeySchema - Specifies the key schema for the local secondary index.\n// The key schema must begin with the same partition key as the table.\n// \n//    Projection - Specifies attributes that are copied (projected) from the\n// table into the index. These are in addition to the primary key attributes\n// and index key attributes, which are automatically projected. Each attribute\n// specification is composed of:\n// \n//    ProjectionType - One of the following:\n// \n//    KEYS_ONLY - Only the index and primary keys are projected into the index.\n// \n//    INCLUDE - Only the specified table attributes are projected into the\n// index. The list of projected attributes are in NonKeyAttributes.\n// \n//    ALL - All of the table attributes are projected into the index.\n// \n//      NonKeyAttributes - A list of one or more non-key attribute names that\n// are projected into the secondary index. The total count of attributes provided\n// in NonKeyAttributes, summed across all of the secondary indexes, must not\n// exceed 20. If you project the same attribute into two different indexes,\n// this counts as two distinct attributes when determining the total.\n","shape":"LocalSecondaryIndexList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":2},{"Name":"ProvisionedThroughput","Ref":{"Documentation":"","shape":"ProvisionedThroughput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":2}]},"CreateTableOutput":{"ShapeName":"CreateTableOutput","Documentation":"// Represents the output of a CreateTable operation.\n","members":{"TableDescription":{"Documentation":"","shape":"TableDescription","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"Date":{"ShapeName":"Date","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"timestamp","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"DeleteGlobalSecondaryIndexAction":{"ShapeName":"DeleteGlobalSecondaryIndexAction","Documentation":"// Represents a global secondary index to be deleted from an existing table.\n","members":{"IndexName":{"Documentation":"// The name of the global secondary index to be deleted.\n","shape":"IndexName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":["IndexName"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"IndexName","Ref":{"Documentation":"// The name of the global secondary index to be deleted.\n","shape":"IndexName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"IndexName","Ref":{"Documentation":"// The name of the global secondary index to be deleted.\n","shape":"IndexName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1}]},"DeleteItemInput":{"ShapeName":"DeleteItemInput","Documentation":"// Represents the input of a DeleteItem operation.\n","members":{"ConditionExpression":{"Documentation":"// A condition that must be satisfied in order for a conditional DeleteItem\n// to succeed.\n// \n// An expression can contain any of the following:\n// \n//   Functions: attribute_exists | attribute_not_exists | attribute_type |\n// contains | begins_with | size \n// \n// These function names are case-sensitive.\n// \n//   Comparison operators:  = | \u0026#x3C;\u0026#x3E; | \u0026#x3C; | \u0026#x3E; | \u0026#x3C;= |\n// \u0026#x3E;= | BETWEEN | IN \n// \n//    Logical operators: AND | OR | NOT \n// \n//   For more information on condition expressions, see Specifying Conditions\n// (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n//   ConditionExpression replaces the legacy ConditionalOperator and Expected\n// parameters.\n","shape":"ConditionExpression","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ConditionalOperator":{"Documentation":"// This is a legacy parameter, for backward compatibility. New applications\n// should use ConditionExpression instead. Do not combine legacy parameters\n// and expression parameters in a single API call; otherwise, DynamoDB will\n// return a ValidationException exception.\n// \n//  A logical operator to apply to the conditions in the Expected map:\n// \n//    AND - If all of the conditions evaluate to true, then the entire map\n// evaluates to true.\n// \n//    OR - If at least one of the conditions evaluate to true, then the entire\n// map evaluates to true.\n// \n//   If you omit ConditionalOperator, then AND is the default.\n// \n// The operation will succeed only if the entire map evaluates to true.\n// \n//  This parameter does not support attributes of type List or Map.\n","shape":"ConditionalOperator","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Expected":{"Documentation":"// This is a legacy parameter, for backward compatibility. New applications\n// should use ConditionExpression instead. Do not combine legacy parameters\n// and expression parameters in a single API call; otherwise, DynamoDB will\n// return a ValidationException exception.\n// \n//  A map of attribute/condition pairs. Expected provides a conditional block\n// for the DeleteItem operation.\n// \n// Each element of Expected consists of an attribute name, a comparison operator,\n// and one or more values. DynamoDB compares the attribute with the value(s)\n// you supplied, using the comparison operator. For each Expected element, the\n// result of the evaluation is either true or false.\n// \n// If you specify more than one element in the Expected map, then by default\n// all of the conditions must evaluate to true. In other words, the conditions\n// are ANDed together. (You can use the ConditionalOperator parameter to OR\n// the conditions instead. If you do this, then at least one of the conditions\n// must evaluate to true, rather than all of them.)\n// \n// If the Expected map evaluates to true, then the conditional operation succeeds;\n// otherwise, it fails.\n// \n//  Expected contains the following:\n// \n//    AttributeValueList - One or more values to evaluate against the supplied\n// attribute. The number of values in the list depends on the ComparisonOperator\n// being used.\n// \n// For type Number, value comparisons are numeric.\n// \n// String value comparisons for greater than, equals, or less than are based\n// on ASCII character code values. For example, a is greater than A, and a is\n// greater than B. For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\n// (http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters).\n// \n// For type Binary, DynamoDB treats each byte of the binary data as unsigned\n// when it compares binary values.\n// \n//    ComparisonOperator - A comparator for evaluating attributes in the AttributeValueList.\n// When performing the comparison, DynamoDB uses strongly consistent reads.\n// \n// The following comparison operators are available:\n// \n//  EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS\n// | BEGINS_WITH | IN | BETWEEN \n// \n// The following are descriptions of each comparison operator.\n// \n//    EQ : Equal. EQ is supported for all datatypes, including lists and maps.\n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, Binary, String Set, Number Set, or Binary Set. If an item\n// contains an AttributeValue element of a different type than the one provided\n// in the request, the value does not match. For example, {\"S\":\"6\"} does not\n// equal {\"N\":\"6\"}. Also, {\"N\":\"6\"} does not equal {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     NE : Not equal. NE is supported for all datatypes, including lists and\n// maps.\n// \n//  AttributeValueList can contain only one AttributeValue of type String,\n// Number, Binary, String Set, Number Set, or Binary Set. If an item contains\n// an AttributeValue of a different type than the one provided in the request,\n// the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}.\n// Also, {\"N\":\"6\"} does not equal {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     LE : Less than or equal. \n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     LT : Less than. \n// \n//  AttributeValueList can contain only one AttributeValue of type String,\n// Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     GE : Greater than or equal. \n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     GT : Greater than. \n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     NOT_NULL : The attribute exists. NOT_NULL is supported for all datatypes,\n// including lists and maps.\n// \n//  This operator tests for the existence of an attribute, not its data type.\n// If the data type of attribute \"a\" is null, and you evaluate it using NOT_NULL,\n// the result is a Boolean true. This result is because the attribute \"a\" exists;\n// its data type is not relevant to the NOT_NULL comparison operator.\n// \n//     NULL : The attribute does not exist. NULL is supported for all datatypes,\n// including lists and maps.\n// \n//  This operator tests for the nonexistence of an attribute, not its data\n// type. If the data type of attribute \"a\" is null, and you evaluate it using\n// NULL, the result is a Boolean false. This is because the attribute \"a\" exists;\n// its data type is not relevant to the NULL comparison operator.\n// \n//     CONTAINS : Checks for a subsequence, or value in a set.\n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If the target attribute of the\n// comparison is of type String, then the operator checks for a substring match.\n// If the target attribute of the comparison is of type Binary, then the operator\n// looks for a subsequence of the target that matches the input. If the target\n// attribute of the comparison is a set (\"SS\", \"NS\", or \"BS\"), then the operator\n// evaluates to true if it finds an exact match with any member of the set.\n// \n// CONTAINS is supported for lists: When evaluating \"a CONTAINS b\", \"a\" can\n// be a list; however, \"b\" cannot be a set, a map, or a list.\n// \n//    NOT_CONTAINS : Checks for absence of a subsequence, or absence of a value\n// in a set.\n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If the target attribute of the\n// comparison is a String, then the operator checks for the absence of a substring\n// match. If the target attribute of the comparison is Binary, then the operator\n// checks for the absence of a subsequence of the target that matches the input.\n// If the target attribute of the comparison is a set (\"SS\", \"NS\", or \"BS\"),\n// then the operator evaluates to true if it does not find an exact match with\n// any member of the set.\n// \n// NOT_CONTAINS is supported for lists: When evaluating \"a NOT CONTAINS b\",\n// \"a\" can be a list; however, \"b\" cannot be a set, a map, or a list.\n// \n//    BEGINS_WITH : Checks for a prefix. \n// \n//  AttributeValueList can contain only one AttributeValue of type String or\n// Binary (not a Number or a set type). The target attribute of the comparison\n// must be of type String or Binary (not a Number or a set type).\n// \n//     IN : Checks for matching elements within two sets.\n// \n//  AttributeValueList can contain one or more AttributeValue elements of type\n// String, Number, or Binary (not a set type). These attributes are compared\n// against an existing set type attribute of an item. If any elements of the\n// input set are present in the item attribute, the expression evaluates to\n// true.\n// \n//    BETWEEN : Greater than or equal to the first value, and less than or\n// equal to the second value. \n// \n//  AttributeValueList must contain two AttributeValue elements of the same\n// type, either String, Number, or Binary (not a set type). A target attribute\n// matches if the target value is greater than, or equal to, the first element\n// and less than, or equal to, the second element. If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not compare to {\"N\":\"6\"}. Also,\n// {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} \n// \n//     For usage examples of AttributeValueList and ComparisonOperator, see\n// Legacy Conditional Parameters (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n// For backward compatibility with previous DynamoDB releases, the following\n// parameters can be used instead of AttributeValueList and ComparisonOperator:\n// \n//    Value - A value for DynamoDB to compare with an attribute.\n// \n//    Exists - A Boolean value that causes DynamoDB to evaluate the value before\n// attempting the conditional operation:\n// \n//   If Exists is true, DynamoDB will check to see if that attribute value\n// already exists in the table. If it is found, then the condition evaluates\n// to true; otherwise the condition evaluate to false.\n// \n//   If Exists is false, DynamoDB assumes that the attribute value does not\n// exist in the table. If in fact the value does not exist, then the assumption\n// is valid and the condition evaluates to true. If the value is found, despite\n// the assumption that it does not exist, the condition evaluates to false.\n// \n//   Note that the default value for Exists is true.\n// \n//   The Value and Exists parameters are incompatible with AttributeValueList\n// and ComparisonOperator. Note that if you use both sets of parameters at once,\n// DynamoDB will return a ValidationException exception.\n// \n//  This parameter does not support attributes of type List or Map.\n","shape":"ExpectedAttributeMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ExpressionAttributeNames":{"Documentation":"// One or more substitution tokens for attribute names in an expression. The\n// following are some use cases for using ExpressionAttributeNames:\n// \n//   To access an attribute whose name conflicts with a DynamoDB reserved word.\n// \n//   To create a placeholder for repeating occurrences of an attribute name\n// in an expression.\n// \n//   To prevent special characters in an attribute name from being misinterpreted\n// in an expression.\n// \n//   Use the # character in an expression to dereference an attribute name.\n// For example, consider the following attribute name:\n// \n//    Percentile \n// \n//   The name of this attribute conflicts with a reserved word, so it cannot\n// be used directly in an expression. (For the complete list of reserved words,\n// see Reserved Words (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html)\n// in the Amazon DynamoDB Developer Guide). To work around this, you could specify\n// the following for ExpressionAttributeNames:\n// \n//    {\"#P\":\"Percentile\"} \n// \n//   You could then use this substitution in an expression, as in this example:\n// \n//    #P = :val \n// \n//    Tokens that begin with the : character are expression attribute values,\n// which are placeholders for the actual value at runtime.\n// \n//  For more information on expression attribute names, see Accessing Item\n// Attributes (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"ExpressionAttributeNameMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ExpressionAttributeValues":{"Documentation":"// One or more values that can be substituted in an expression.\n// \n// Use the : (colon) character in an expression to dereference an attribute\n// value. For example, suppose that you wanted to check whether the value of\n// the ProductStatus attribute was one of the following: \n// \n//  Available | Backordered | Discontinued \n// \n// You would first need to specify ExpressionAttributeValues as follows:\n// \n//  { \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"}, \":disc\":{\"S\":\"Discontinued\"}\n// } \n// \n// You could then use these values in an expression, such as this:\n// \n//  ProductStatus IN (:avail, :back, :disc) \n// \n// For more information on expression attribute values, see Specifying Conditions\n// (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"ExpressionAttributeValueMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Key":{"Documentation":"// A map of attribute names to AttributeValue objects, representing the primary\n// key of the item to delete.\n// \n// For the primary key, you must provide all of the attributes. For example,\n// with a simple primary key, you only need to provide a value for the partition\n// key. For a composite primary key, you must provide values for both the partition\n// key and the sort key.\n","shape":"Key","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ReturnConsumedCapacity":{"Documentation":"","shape":"ReturnConsumedCapacity","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ReturnItemCollectionMetrics":{"Documentation":"// Determines whether item collection metrics are returned. If set to SIZE,\n// the response includes statistics about item collections, if any, that were\n// modified during the operation are returned in the response. If set to NONE\n// (the default), no statistics are returned.\n","shape":"ReturnItemCollectionMetrics","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ReturnValues":{"Documentation":"// Use ReturnValues if you want to get the item attributes as they appeared\n// before they were deleted. For DeleteItem, the valid values are:\n// \n//    NONE - If ReturnValues is not specified, or if its value is NONE, then\n// nothing is returned. (This setting is the default for ReturnValues.)\n// \n//    ALL_OLD - The content of the old item is returned.\n// \n//    The ReturnValues parameter is used by several DynamoDB operations; however,\n// DeleteItem does not recognize any values other than NONE or ALL_OLD.\n","shape":"ReturnValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"TableName":{"Documentation":"// The name of the table from which to delete the item.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":["TableName","Key"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"Key","Ref":{"Documentation":"// A map of attribute names to AttributeValue objects, representing the primary\n// key of the item to delete.\n// \n// For the primary key, you must provide all of the attributes. For example,\n// with a simple primary key, you only need to provide a value for the partition\n// key. For a composite primary key, you must provide values for both the partition\n// key and the sort key.\n","shape":"Key","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"TableName","Ref":{"Documentation":"// The name of the table from which to delete the item.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"TableName","Ref":{"Documentation":"// The name of the table from which to delete the item.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1}]},"DeleteItemOutput":{"ShapeName":"DeleteItemOutput","Documentation":"// Represents the output of a DeleteItem operation.\n","members":{"Attributes":{"Documentation":"// A map of attribute names to AttributeValue objects, representing the item\n// as it appeared before the DeleteItem operation. This map appears in the response\n// only if ReturnValues was specified as ALL_OLD in the request.\n","shape":"AttributeMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ConsumedCapacity":{"Documentation":"","shape":"ConsumedCapacity","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ItemCollectionMetrics":{"Documentation":"// Information about item collections, if any, that were affected by the operation.\n// ItemCollectionMetrics is only returned if the request asked for it. If the\n// table does not have any local secondary indexes, this information is not\n// returned in the response.\n// \n// Each ItemCollectionMetrics element consists of:\n// \n//    ItemCollectionKey - The partition key value of the item collection. This\n// is the same as the partition key value of the item itself.\n// \n//    SizeEstimateRange - An estimate of item collection size, in gigabytes.\n// This value is a two-element array containing a lower bound and an upper bound\n// for the estimate. The estimate includes the size of all the items in the\n// table, plus the size of all attributes projected into all of the local secondary\n// indexes on that table. Use this estimate to measure whether a local secondary\n// index is approaching its size limit.\n// \n// The estimate is subject to change over time; therefore, do not rely on the\n// precision or accuracy of the estimate.\n","shape":"ItemCollectionMetrics","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"DeleteRequest":{"ShapeName":"DeleteRequest","Documentation":"// Represents a request to perform a DeleteItem operation on an item.\n","members":{"Key":{"Documentation":"// A map of attribute name to attribute values, representing the primary key\n// of the item to delete. All of the table's primary key attributes must be\n// specified, and their data types must match those of the table's key schema.\n","shape":"Key","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":["Key"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"DeleteTableInput":{"ShapeName":"DeleteTableInput","Documentation":"// Represents the input of a DeleteTable operation.\n","members":{"TableName":{"Documentation":"// The name of the table to delete.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":["TableName"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"TableName","Ref":{"Documentation":"// The name of the table to delete.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"TableName","Ref":{"Documentation":"// The name of the table to delete.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1}]},"DeleteTableOutput":{"ShapeName":"DeleteTableOutput","Documentation":"// Represents the output of a DeleteTable operation.\n","members":{"TableDescription":{"Documentation":"","shape":"TableDescription","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"DescribeLimitsInput":{"ShapeName":"DescribeLimitsInput","Documentation":"// Represents the input of a DescribeLimits operation. Has no content.\n","members":{},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"DescribeLimitsOutput":{"ShapeName":"DescribeLimitsOutput","Documentation":"// Represents the output of a DescribeLimits operation.\n","members":{"AccountMaxReadCapacityUnits":{"Documentation":"// The maximum total read capacity units that your account allows you to provision\n// across all of your tables in this region.\n","shape":"PositiveLongObject","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"AccountMaxWriteCapacityUnits":{"Documentation":"// The maximum total write capacity units that your account allows you to provision\n// across all of your tables in this region.\n","shape":"PositiveLongObject","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"TableMaxReadCapacityUnits":{"Documentation":"// The maximum read capacity units that your account allows you to provision\n// for a new table that you are creating in this region, including the read\n// capacity units provisioned for its global secondary indexes (GSIs).\n","shape":"PositiveLongObject","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"TableMaxWriteCapacityUnits":{"Documentation":"// The maximum write capacity units that your account allows you to provision\n// for a new table that you are creating in this region, including the write\n// capacity units provisioned for its global secondary indexes (GSIs).\n","shape":"PositiveLongObject","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"DescribeTableInput":{"ShapeName":"DescribeTableInput","Documentation":"// Represents the input of a DescribeTable operation.\n","members":{"TableName":{"Documentation":"// The name of the table to describe.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":["TableName"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"TableName","Ref":{"Documentation":"// The name of the table to describe.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"TableName","Ref":{"Documentation":"// The name of the table to describe.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1}]},"DescribeTableOutput":{"ShapeName":"DescribeTableOutput","Documentation":"// Represents the output of a DescribeTable operation.\n","members":{"Table":{"Documentation":"","shape":"TableDescription","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ErrorMessage":{"ShapeName":"ErrorMessage","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ExpectedAttributeMap":{"ShapeName":"ExpectedAttributeMap","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"AttributeName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"ExpectedAttributeValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"map","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ExpectedAttributeValue":{"ShapeName":"ExpectedAttributeValue","Documentation":"// Represents a condition to be compared with an attribute value. This condition\n// can be used with DeleteItem, PutItem or UpdateItem operations; if the comparison\n// evaluates to true, the operation succeeds; if not, the operation fails. You\n// can use ExpectedAttributeValue in one of two different ways:\n// \n//   Use AttributeValueList to specify one or more values to compare against\n// an attribute. Use ComparisonOperator to specify how you want to perform the\n// comparison. If the comparison evaluates to true, then the conditional operation\n// succeeds.\n// \n//   Use Value to specify a value that DynamoDB will compare against an attribute.\n// If the values match, then ExpectedAttributeValue evaluates to true and the\n// conditional operation succeeds. Optionally, you can also set Exists to false,\n// indicating that you do not expect to find the attribute value in the table.\n// In this case, the conditional operation succeeds only if the comparison evaluates\n// to false.\n// \n//    Value and Exists are incompatible with AttributeValueList and ComparisonOperator.\n// Note that if you use both sets of parameters at once, DynamoDB will return\n// a ValidationException exception.\n","members":{"AttributeValueList":{"Documentation":"// One or more values to evaluate against the supplied attribute. The number\n// of values in the list depends on the ComparisonOperator being used.\n// \n// For type Number, value comparisons are numeric.\n// \n// String value comparisons for greater than, equals, or less than are based\n// on ASCII character code values. For example, a is greater than A, and a is\n// greater than B. For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\n// (http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters).\n// \n// For Binary, DynamoDB treats each byte of the binary data as unsigned when\n// it compares binary values.\n// \n// For information on specifying data types in JSON, see JSON Data Format (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"AttributeValueList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ComparisonOperator":{"Documentation":"// A comparator for evaluating attributes in the AttributeValueList. For example,\n// equals, greater than, less than, etc.\n// \n// The following comparison operators are available:\n// \n//  EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS\n// | BEGINS_WITH | IN | BETWEEN \n// \n// The following are descriptions of each comparison operator.\n// \n//    EQ : Equal. EQ is supported for all datatypes, including lists and maps.\n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, Binary, String Set, Number Set, or Binary Set. If an item\n// contains an AttributeValue element of a different type than the one provided\n// in the request, the value does not match. For example, {\"S\":\"6\"} does not\n// equal {\"N\":\"6\"}. Also, {\"N\":\"6\"} does not equal {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     NE : Not equal. NE is supported for all datatypes, including lists and\n// maps.\n// \n//  AttributeValueList can contain only one AttributeValue of type String,\n// Number, Binary, String Set, Number Set, or Binary Set. If an item contains\n// an AttributeValue of a different type than the one provided in the request,\n// the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}.\n// Also, {\"N\":\"6\"} does not equal {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     LE : Less than or equal. \n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     LT : Less than. \n// \n//  AttributeValueList can contain only one AttributeValue of type String,\n// Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     GE : Greater than or equal. \n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     GT : Greater than. \n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     NOT_NULL : The attribute exists. NOT_NULL is supported for all datatypes,\n// including lists and maps.\n// \n//  This operator tests for the existence of an attribute, not its data type.\n// If the data type of attribute \"a\" is null, and you evaluate it using NOT_NULL,\n// the result is a Boolean true. This result is because the attribute \"a\" exists;\n// its data type is not relevant to the NOT_NULL comparison operator.\n// \n//     NULL : The attribute does not exist. NULL is supported for all datatypes,\n// including lists and maps.\n// \n//  This operator tests for the nonexistence of an attribute, not its data\n// type. If the data type of attribute \"a\" is null, and you evaluate it using\n// NULL, the result is a Boolean false. This is because the attribute \"a\" exists;\n// its data type is not relevant to the NULL comparison operator.\n// \n//     CONTAINS : Checks for a subsequence, or value in a set.\n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If the target attribute of the\n// comparison is of type String, then the operator checks for a substring match.\n// If the target attribute of the comparison is of type Binary, then the operator\n// looks for a subsequence of the target that matches the input. If the target\n// attribute of the comparison is a set (\"SS\", \"NS\", or \"BS\"), then the operator\n// evaluates to true if it finds an exact match with any member of the set.\n// \n// CONTAINS is supported for lists: When evaluating \"a CONTAINS b\", \"a\" can\n// be a list; however, \"b\" cannot be a set, a map, or a list.\n// \n//    NOT_CONTAINS : Checks for absence of a subsequence, or absence of a value\n// in a set.\n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If the target attribute of the\n// comparison is a String, then the operator checks for the absence of a substring\n// match. If the target attribute of the comparison is Binary, then the operator\n// checks for the absence of a subsequence of the target that matches the input.\n// If the target attribute of the comparison is a set (\"SS\", \"NS\", or \"BS\"),\n// then the operator evaluates to true if it does not find an exact match with\n// any member of the set.\n// \n// NOT_CONTAINS is supported for lists: When evaluating \"a NOT CONTAINS b\",\n// \"a\" can be a list; however, \"b\" cannot be a set, a map, or a list.\n// \n//    BEGINS_WITH : Checks for a prefix. \n// \n//  AttributeValueList can contain only one AttributeValue of type String or\n// Binary (not a Number or a set type). The target attribute of the comparison\n// must be of type String or Binary (not a Number or a set type).\n// \n//     IN : Checks for matching elements within two sets.\n// \n//  AttributeValueList can contain one or more AttributeValue elements of type\n// String, Number, or Binary (not a set type). These attributes are compared\n// against an existing set type attribute of an item. If any elements of the\n// input set are present in the item attribute, the expression evaluates to\n// true.\n// \n//    BETWEEN : Greater than or equal to the first value, and less than or\n// equal to the second value. \n// \n//  AttributeValueList must contain two AttributeValue elements of the same\n// type, either String, Number, or Binary (not a set type). A target attribute\n// matches if the target value is greater than, or equal to, the first element\n// and less than, or equal to, the second element. If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not compare to {\"N\":\"6\"}. Also,\n// {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}\n","shape":"ComparisonOperator","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Exists":{"Documentation":"// Causes DynamoDB to evaluate the value before attempting a conditional operation:\n// \n//   If Exists is true, DynamoDB will check to see if that attribute value\n// already exists in the table. If it is found, then the operation succeeds.\n// If it is not found, the operation fails with a ConditionalCheckFailedException.\n// \n//   If Exists is false, DynamoDB assumes that the attribute value does not\n// exist in the table. If in fact the value does not exist, then the assumption\n// is valid and the operation succeeds. If the value is found, despite the assumption\n// that it does not exist, the operation fails with a ConditionalCheckFailedException.\n// \n//   The default setting for Exists is true. If you supply a Value all by itself,\n// DynamoDB assumes the attribute exists: You don't have to set Exists to true,\n// because it is implied.\n// \n// DynamoDB returns a ValidationException if:\n// \n//    Exists is true but there is no Value to check. (You expect a value to\n// exist, but don't specify what that value is.)\n// \n//    Exists is false but you also provide a Value. (You cannot expect an attribute\n// to have a value, while also expecting it not to exist.)\n","shape":"BooleanObject","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Value":{"Documentation":"","shape":"AttributeValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ExpressionAttributeNameMap":{"ShapeName":"ExpressionAttributeNameMap","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"ExpressionAttributeNameVariable","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"AttributeName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"map","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ExpressionAttributeNameVariable":{"ShapeName":"ExpressionAttributeNameVariable","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ExpressionAttributeValueMap":{"ShapeName":"ExpressionAttributeValueMap","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"ExpressionAttributeValueVariable","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"AttributeValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"map","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ExpressionAttributeValueVariable":{"ShapeName":"ExpressionAttributeValueVariable","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"FilterConditionMap":{"ShapeName":"FilterConditionMap","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"AttributeName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"Condition","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"map","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"GetItemInput":{"ShapeName":"GetItemInput","Documentation":"// Represents the input of a GetItem operation.\n","members":{"AttributesToGet":{"Documentation":"// This is a legacy parameter, for backward compatibility. New applications\n// should use ProjectionExpression instead. Do not combine legacy parameters\n// and expression parameters in a single API call; otherwise, DynamoDB will\n// return a ValidationException exception.\n// \n// This parameter allows you to retrieve attributes of type List or Map; however,\n// it cannot retrieve individual elements within a List or a Map.\n// \n//  The names of one or more attributes to retrieve. If no attribute names\n// are provided, then all attributes will be returned. If any of the requested\n// attributes are not found, they will not appear in the result.\n// \n// Note that AttributesToGet has no effect on provisioned throughput consumption.\n// DynamoDB determines capacity units consumed based on item size, not on the\n// amount of data that is returned to an application.\n","shape":"AttributeNameList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ConsistentRead":{"Documentation":"// Determines the read consistency model: If set to true, then the operation\n// uses strongly consistent reads; otherwise, the operation uses eventually\n// consistent reads.\n","shape":"ConsistentRead","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ExpressionAttributeNames":{"Documentation":"// One or more substitution tokens for attribute names in an expression. The\n// following are some use cases for using ExpressionAttributeNames:\n// \n//   To access an attribute whose name conflicts with a DynamoDB reserved word.\n// \n//   To create a placeholder for repeating occurrences of an attribute name\n// in an expression.\n// \n//   To prevent special characters in an attribute name from being misinterpreted\n// in an expression.\n// \n//   Use the # character in an expression to dereference an attribute name.\n// For example, consider the following attribute name:\n// \n//    Percentile \n// \n//   The name of this attribute conflicts with a reserved word, so it cannot\n// be used directly in an expression. (For the complete list of reserved words,\n// see Reserved Words (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html)\n// in the Amazon DynamoDB Developer Guide). To work around this, you could specify\n// the following for ExpressionAttributeNames:\n// \n//    {\"#P\":\"Percentile\"} \n// \n//   You could then use this substitution in an expression, as in this example:\n// \n//    #P = :val \n// \n//    Tokens that begin with the : character are expression attribute values,\n// which are placeholders for the actual value at runtime.\n// \n//  For more information on expression attribute names, see Accessing Item\n// Attributes (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"ExpressionAttributeNameMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Key":{"Documentation":"// A map of attribute names to AttributeValue objects, representing the primary\n// key of the item to retrieve.\n// \n// For the primary key, you must provide all of the attributes. For example,\n// with a simple primary key, you only need to provide a value for the partition\n// key. For a composite primary key, you must provide values for both the partition\n// key and the sort key.\n","shape":"Key","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ProjectionExpression":{"Documentation":"// A string that identifies one or more attributes to retrieve from the table.\n// These attributes can include scalars, sets, or elements of a JSON document.\n// The attributes in the expression must be separated by commas.\n// \n// If no attribute names are specified, then all attributes will be returned.\n// If any of the requested attributes are not found, they will not appear in\n// the result.\n// \n// For more information, see Accessing Item Attributes (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n//   ProjectionExpression replaces the legacy AttributesToGet parameter.\n","shape":"ProjectionExpression","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ReturnConsumedCapacity":{"Documentation":"","shape":"ReturnConsumedCapacity","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"TableName":{"Documentation":"// The name of the table containing the requested item.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":["TableName","Key"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"AttributesToGet","Ref":{"Documentation":"// This is a legacy parameter, for backward compatibility. New applications\n// should use ProjectionExpression instead. Do not combine legacy parameters\n// and expression parameters in a single API call; otherwise, DynamoDB will\n// return a ValidationException exception.\n// \n// This parameter allows you to retrieve attributes of type List or Map; however,\n// it cannot retrieve individual elements within a List or a Map.\n// \n//  The names of one or more attributes to retrieve. If no attribute names\n// are provided, then all attributes will be returned. If any of the requested\n// attributes are not found, they will not appear in the result.\n// \n// Note that AttributesToGet has no effect on provisioned throughput consumption.\n// DynamoDB determines capacity units consumed based on item size, not on the\n// amount of data that is returned to an application.\n","shape":"AttributeNameList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"Key","Ref":{"Documentation":"// A map of attribute names to AttributeValue objects, representing the primary\n// key of the item to retrieve.\n// \n// For the primary key, you must provide all of the attributes. For example,\n// with a simple primary key, you only need to provide a value for the partition\n// key. For a composite primary key, you must provide values for both the partition\n// key and the sort key.\n","shape":"Key","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"TableName","Ref":{"Documentation":"// The name of the table containing the requested item.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"TableName","Ref":{"Documentation":"// The name of the table containing the requested item.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1}]},"GetItemOutput":{"ShapeName":"GetItemOutput","Documentation":"// Represents the output of a GetItem operation.\n","members":{"ConsumedCapacity":{"Documentation":"","shape":"ConsumedCapacity","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Item":{"Documentation":"// A map of attribute names to AttributeValue objects, as specified by AttributesToGet.\n","shape":"AttributeMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"GlobalSecondaryIndex":{"ShapeName":"GlobalSecondaryIndex","Documentation":"// Represents the properties of a global secondary index.\n","members":{"IndexName":{"Documentation":"// The name of the global secondary index. The name must be unique among all\n// other indexes on this table.\n","shape":"IndexName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"KeySchema":{"Documentation":"// The complete key schema for a global secondary index, which consists of one\n// or more pairs of attribute names and key types:\n// \n//    HASH - partition key\n// \n//    RANGE - sort key\n// \n//    The partition key of an item is also known as its hash attribute. The\n// term \"hash attribute\" derives from DynamoDB' usage of an internal hash function\n// to evenly distribute data items across partitions, based on their partition\n// key values.\n// \n// The sort key of an item is also known as its range attribute. The term \"range\n// attribute\" derives from the way DynamoDB stores items with the same partition\n// key physically close together, in sorted order by the sort key value.\n","shape":"KeySchema","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Projection":{"Documentation":"","shape":"Projection","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ProvisionedThroughput":{"Documentation":"","shape":"ProvisionedThroughput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":["IndexName","KeySchema","Projection","ProvisionedThroughput"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"IndexName","Ref":{"Documentation":"// The name of the global secondary index. The name must be unique among all\n// other indexes on this table.\n","shape":"IndexName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"IndexName","Ref":{"Documentation":"// The name of the global secondary index. The name must be unique among all\n// other indexes on this table.\n","shape":"IndexName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"KeySchema","Ref":{"Documentation":"// The complete key schema for a global secondary index, which consists of one\n// or more pairs of attribute names and key types:\n// \n//    HASH - partition key\n// \n//    RANGE - sort key\n// \n//    The partition key of an item is also known as its hash attribute. The\n// term \"hash attribute\" derives from DynamoDB' usage of an internal hash function\n// to evenly distribute data items across partitions, based on their partition\n// key values.\n// \n// The sort key of an item is also known as its range attribute. The term \"range\n// attribute\" derives from the way DynamoDB stores items with the same partition\n// key physically close together, in sorted order by the sort key value.\n","shape":"KeySchema","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"KeySchema","Ref":{"Documentation":"// The complete key schema for a global secondary index, which consists of one\n// or more pairs of attribute names and key types:\n// \n//    HASH - partition key\n// \n//    RANGE - sort key\n// \n//    The partition key of an item is also known as its hash attribute. The\n// term \"hash attribute\" derives from DynamoDB' usage of an internal hash function\n// to evenly distribute data items across partitions, based on their partition\n// key values.\n// \n// The sort key of an item is also known as its range attribute. The term \"range\n// attribute\" derives from the way DynamoDB stores items with the same partition\n// key physically close together, in sorted order by the sort key value.\n","shape":"KeySchema","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"Projection","Ref":{"Documentation":"","shape":"Projection","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"ProvisionedThroughput","Ref":{"Documentation":"","shape":"ProvisionedThroughput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"KeySchema","Ref":{"Documentation":"// The complete key schema for a global secondary index, which consists of one\n// or more pairs of attribute names and key types:\n// \n//    HASH - partition key\n// \n//    RANGE - sort key\n// \n//    The partition key of an item is also known as its hash attribute. The\n// term \"hash attribute\" derives from DynamoDB' usage of an internal hash function\n// to evenly distribute data items across partitions, based on their partition\n// key values.\n// \n// The sort key of an item is also known as its range attribute. The term \"range\n// attribute\" derives from the way DynamoDB stores items with the same partition\n// key physically close together, in sorted order by the sort key value.\n","shape":"KeySchema","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":2},{"Name":"Projection","Ref":{"Documentation":"","shape":"Projection","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":2},{"Name":"ProvisionedThroughput","Ref":{"Documentation":"","shape":"ProvisionedThroughput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":2}]},"GlobalSecondaryIndexDescription":{"ShapeName":"GlobalSecondaryIndexDescription","Documentation":"// Represents the properties of a global secondary index.\n","members":{"Backfilling":{"Documentation":"// Indicates whether the index is currently backfilling. Backfilling is the\n// process of reading items from the table and determining whether they can\n// be added to the index. (Not all items will qualify: For example, a partition\n// key cannot have any duplicate values.) If an item can be added to the index,\n// DynamoDB will do so. After all items have been processed, the backfilling\n// operation is complete and Backfilling is false.\n// \n//  For indexes that were created during a CreateTable operation, the Backfilling\n// attribute does not appear in the DescribeTable output.\n","shape":"Backfilling","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"IndexArn":{"Documentation":"// The Amazon Resource Name (ARN) that uniquely identifies the index.\n","shape":"String","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"IndexName":{"Documentation":"// The name of the global secondary index.\n","shape":"IndexName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"IndexSizeBytes":{"Documentation":"// The total size of the specified index, in bytes. DynamoDB updates this value\n// approximately every six hours. Recent changes might not be reflected in this\n// value.\n","shape":"Long","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"IndexStatus":{"Documentation":"// The current state of the global secondary index:\n// \n//    CREATING - The index is being created.\n// \n//    UPDATING - The index is being updated.\n// \n//    DELETING - The index is being deleted.\n// \n//    ACTIVE - The index is ready for use.\n","shape":"IndexStatus","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ItemCount":{"Documentation":"// The number of items in the specified index. DynamoDB updates this value approximately\n// every six hours. Recent changes might not be reflected in this value.\n","shape":"Long","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"KeySchema":{"Documentation":"// The complete key schema for a global secondary index, which consists of one\n// or more pairs of attribute names and key types:\n// \n//    HASH - partition key\n// \n//    RANGE - sort key\n// \n//    The partition key of an item is also known as its hash attribute. The\n// term \"hash attribute\" derives from DynamoDB' usage of an internal hash function\n// to evenly distribute data items across partitions, based on their partition\n// key values.\n// \n// The sort key of an item is also known as its range attribute. The term \"range\n// attribute\" derives from the way DynamoDB stores items with the same partition\n// key physically close together, in sorted order by the sort key value.\n","shape":"KeySchema","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Projection":{"Documentation":"","shape":"Projection","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ProvisionedThroughput":{"Documentation":"","shape":"ProvisionedThroughputDescription","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"GlobalSecondaryIndexDescriptionList":{"ShapeName":"GlobalSecondaryIndexDescriptionList","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"GlobalSecondaryIndexDescription","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"list","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"GlobalSecondaryIndexList":{"ShapeName":"GlobalSecondaryIndexList","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"GlobalSecondaryIndex","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"list","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"GlobalSecondaryIndexUpdate":{"ShapeName":"GlobalSecondaryIndexUpdate","Documentation":"// Represents one of the following:\n// \n//   A new global secondary index to be added to an existing table.\n// \n//   New provisioned throughput parameters for an existing global secondary\n// index.\n// \n//   An existing global secondary index to be removed from an existing table.\n","members":{"Create":{"Documentation":"// The parameters required for creating a global secondary index on an existing\n// table:\n// \n//    IndexName  \n// \n//    KeySchema  \n// \n//    AttributeDefinitions  \n// \n//    Projection  \n// \n//    ProvisionedThroughput\n","shape":"CreateGlobalSecondaryIndexAction","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Delete":{"Documentation":"// The name of an existing global secondary index to be removed.\n","shape":"DeleteGlobalSecondaryIndexAction","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Update":{"Documentation":"// The name of an existing global secondary index, along with new provisioned\n// throughput settings to be applied to that index.\n","shape":"UpdateGlobalSecondaryIndexAction","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"Create","Ref":{"Documentation":"// The parameters required for creating a global secondary index on an existing\n// table:\n// \n//    IndexName  \n// \n//    KeySchema  \n// \n//    AttributeDefinitions  \n// \n//    Projection  \n// \n//    ProvisionedThroughput\n","shape":"CreateGlobalSecondaryIndexAction","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":2},{"Name":"Delete","Ref":{"Documentation":"// The name of an existing global secondary index to be removed.\n","shape":"DeleteGlobalSecondaryIndexAction","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":2},{"Name":"Update","Ref":{"Documentation":"// The name of an existing global secondary index, along with new provisioned\n// throughput settings to be applied to that index.\n","shape":"UpdateGlobalSecondaryIndexAction","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":2}]},"GlobalSecondaryIndexUpdateList":{"ShapeName":"GlobalSecondaryIndexUpdateList","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"GlobalSecondaryIndexUpdate","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"list","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"IndexName":{"ShapeName":"IndexName","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":3,"Max":255,"Placeholder":false,"deprecated":false,"Validations":null},"IndexStatus":{"ShapeName":"IndexStatus","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":["CREATING","UPDATING","DELETING","ACTIVE"],"EnumConsts":["IndexStatusCreating","IndexStatusUpdating","IndexStatusDeleting","IndexStatusActive"],"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"Integer":{"ShapeName":"Integer","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"integer","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ItemCollectionKeyAttributeMap":{"ShapeName":"ItemCollectionKeyAttributeMap","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"AttributeName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"AttributeValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"map","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ItemCollectionMetrics":{"ShapeName":"ItemCollectionMetrics","Documentation":"// Information about item collections, if any, that were affected by the operation.\n// ItemCollectionMetrics is only returned if the request asked for it. If the\n// table does not have any local secondary indexes, this information is not\n// returned in the response.\n","members":{"ItemCollectionKey":{"Documentation":"// The partition key value of the item collection. This value is the same as\n// the partition key value of the item.\n","shape":"ItemCollectionKeyAttributeMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"SizeEstimateRangeGB":{"Documentation":"// An estimate of item collection size, in gigabytes. This value is a two-element\n// array containing a lower bound and an upper bound for the estimate. The estimate\n// includes the size of all the items in the table, plus the size of all attributes\n// projected into all of the local secondary indexes on that table. Use this\n// estimate to measure whether a local secondary index is approaching its size\n// limit.\n// \n// The estimate is subject to change over time; therefore, do not rely on the\n// precision or accuracy of the estimate.\n","shape":"ItemCollectionSizeEstimateRange","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ItemCollectionMetricsMultiple":{"ShapeName":"ItemCollectionMetricsMultiple","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"ItemCollectionMetrics","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"list","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ItemCollectionMetricsPerTable":{"ShapeName":"ItemCollectionMetricsPerTable","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"ItemCollectionMetricsMultiple","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"map","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ItemCollectionSizeEstimateBound":{"ShapeName":"ItemCollectionSizeEstimateBound","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"double","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ItemCollectionSizeEstimateRange":{"ShapeName":"ItemCollectionSizeEstimateRange","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"ItemCollectionSizeEstimateBound","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"list","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ItemList":{"ShapeName":"ItemList","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"AttributeMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"list","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"Key":{"ShapeName":"Key","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"AttributeName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"AttributeValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"map","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"KeyConditions":{"ShapeName":"KeyConditions","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"AttributeName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"Condition","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"map","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"KeyExpression":{"ShapeName":"KeyExpression","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"KeyList":{"ShapeName":"KeyList","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"Key","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"list","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":1,"Max":100,"Placeholder":false,"deprecated":false,"Validations":null},"KeySchema":{"ShapeName":"KeySchema","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"KeySchemaElement","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"list","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":1,"Max":2,"Placeholder":false,"deprecated":false,"Validations":null},"KeySchemaAttributeName":{"ShapeName":"KeySchemaAttributeName","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":1,"Max":255,"Placeholder":false,"deprecated":false,"Validations":null},"KeySchemaElement":{"ShapeName":"KeySchemaElement","Documentation":"// Represents a single element of a key schema. A key schema specifies the attributes\n// that make up the primary key of a table, or the key attributes of an index.\n// \n// A KeySchemaElement represents exactly one attribute of the primary key.\n// For example, a simple primary key would be represented by one KeySchemaElement\n// (for the partition key). A composite primary key would require one KeySchemaElement\n// for the partition key, and another KeySchemaElement for the sort key.\n// \n// A KeySchemaElement must be a scalar, top-level attribute (not a nested attribute).\n// The data type must be one of String, Number, or Binary. The attribute cannot\n// be nested within a List or a Map.\n","members":{"AttributeName":{"Documentation":"// The name of a key attribute.\n","shape":"KeySchemaAttributeName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"KeyType":{"Documentation":"// The role that this key attribute will assume:\n// \n//    HASH - partition key\n// \n//    RANGE - sort key\n// \n//    The partition key of an item is also known as its hash attribute. The\n// term \"hash attribute\" derives from DynamoDB' usage of an internal hash function\n// to evenly distribute data items across partitions, based on their partition\n// key values.\n// \n// The sort key of an item is also known as its range attribute. The term \"range\n// attribute\" derives from the way DynamoDB stores items with the same partition\n// key physically close together, in sorted order by the sort key value.\n","shape":"KeyType","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":["AttributeName","KeyType"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"AttributeName","Ref":{"Documentation":"// The name of a key attribute.\n","shape":"KeySchemaAttributeName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"AttributeName","Ref":{"Documentation":"// The name of a key attribute.\n","shape":"KeySchemaAttributeName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"KeyType","Ref":{"Documentation":"// The role that this key attribute will assume:\n// \n//    HASH - partition key\n// \n//    RANGE - sort key\n// \n//    The partition key of an item is also known as its hash attribute. The\n// term \"hash attribute\" derives from DynamoDB' usage of an internal hash function\n// to evenly distribute data items across partitions, based on their partition\n// key values.\n// \n// The sort key of an item is also known as its range attribute. The term \"range\n// attribute\" derives from the way DynamoDB stores items with the same partition\n// key physically close together, in sorted order by the sort key value.\n","shape":"KeyType","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0}]},"KeyType":{"ShapeName":"KeyType","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":["HASH","RANGE"],"EnumConsts":["KeyTypeHash","KeyTypeRange"],"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"KeysAndAttributes":{"ShapeName":"KeysAndAttributes","Documentation":"// Represents a set of primary keys and, for each key, the attributes to retrieve\n// from the table.\n// \n// For each primary key, you must provide all of the key attributes. For example,\n// with a simple primary key, you only need to provide the partition key. For\n// a composite primary key, you must provide both the partition key and the\n// sort key.\n","members":{"AttributesToGet":{"Documentation":"// One or more attributes to retrieve from the table or index. If no attribute\n// names are specified then all attributes will be returned. If any of the specified\n// attributes are not found, they will not appear in the result.\n","shape":"AttributeNameList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ConsistentRead":{"Documentation":"// The consistency of a read operation. If set to true, then a strongly consistent\n// read is used; otherwise, an eventually consistent read is used.\n","shape":"ConsistentRead","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ExpressionAttributeNames":{"Documentation":"// One or more substitution tokens for attribute names in an expression. The\n// following are some use cases for using ExpressionAttributeNames:\n// \n//   To access an attribute whose name conflicts with a DynamoDB reserved word.\n// \n//   To create a placeholder for repeating occurrences of an attribute name\n// in an expression.\n// \n//   To prevent special characters in an attribute name from being misinterpreted\n// in an expression.\n// \n//   Use the # character in an expression to dereference an attribute name.\n// For example, consider the following attribute name:\n// \n//    Percentile \n// \n//   The name of this attribute conflicts with a reserved word, so it cannot\n// be used directly in an expression. (For the complete list of reserved words,\n// see Reserved Words (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html)\n// in the Amazon DynamoDB Developer Guide). To work around this, you could specify\n// the following for ExpressionAttributeNames:\n// \n//    {\"#P\":\"Percentile\"} \n// \n//   You could then use this substitution in an expression, as in this example:\n// \n//    #P = :val \n// \n//    Tokens that begin with the : character are expression attribute values,\n// which are placeholders for the actual value at runtime.\n// \n//  For more information on expression attribute names, see Accessing Item\n// Attributes (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"ExpressionAttributeNameMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Keys":{"Documentation":"// The primary key attribute values that define the items and the attributes\n// associated with the items.\n","shape":"KeyList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ProjectionExpression":{"Documentation":"// A string that identifies one or more attributes to retrieve from the table.\n// These attributes can include scalars, sets, or elements of a JSON document.\n// The attributes in the ProjectionExpression must be separated by commas.\n// \n// If no attribute names are specified, then all attributes will be returned.\n// If any of the requested attributes are not found, they will not appear in\n// the result.\n// \n// For more information, see Accessing Item Attributes (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n//   ProjectionExpression replaces the legacy AttributesToGet parameter.\n","shape":"ProjectionExpression","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":["Keys"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"AttributesToGet","Ref":{"Documentation":"// One or more attributes to retrieve from the table or index. If no attribute\n// names are specified then all attributes will be returned. If any of the specified\n// attributes are not found, they will not appear in the result.\n","shape":"AttributeNameList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"Keys","Ref":{"Documentation":"// The primary key attribute values that define the items and the attributes\n// associated with the items.\n","shape":"KeyList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"Keys","Ref":{"Documentation":"// The primary key attribute values that define the items and the attributes\n// associated with the items.\n","shape":"KeyList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1}]},"ListAttributeValue":{"ShapeName":"ListAttributeValue","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"AttributeValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"list","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ListTablesInput":{"ShapeName":"ListTablesInput","Documentation":"// Represents the input of a ListTables operation.\n","members":{"ExclusiveStartTableName":{"Documentation":"// The first table name that this operation will evaluate. Use the value that\n// was returned for LastEvaluatedTableName in a previous operation, so that\n// you can obtain the next page of results.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Limit":{"Documentation":"// A maximum number of table names to return. If this parameter is not specified,\n// the limit is 100.\n","shape":"ListTablesInputLimit","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"ExclusiveStartTableName","Ref":{"Documentation":"// The first table name that this operation will evaluate. Use the value that\n// was returned for LastEvaluatedTableName in a previous operation, so that\n// you can obtain the next page of results.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"Limit","Ref":{"Documentation":"// A maximum number of table names to return. If this parameter is not specified,\n// the limit is 100.\n","shape":"ListTablesInputLimit","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1}]},"ListTablesInputLimit":{"ShapeName":"ListTablesInputLimit","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"integer","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":1,"Max":100,"Placeholder":false,"deprecated":false,"Validations":null},"ListTablesOutput":{"ShapeName":"ListTablesOutput","Documentation":"// Represents the output of a ListTables operation.\n","members":{"LastEvaluatedTableName":{"Documentation":"// The name of the last table in the current page of results. Use this value\n// as the ExclusiveStartTableName in a new request to obtain the next page of\n// results, until all the table names are returned.\n// \n// If you do not receive a LastEvaluatedTableName value in the response, this\n// means that there are no more table names to be retrieved.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"TableNames":{"Documentation":"// The names of the tables associated with the current account at the current\n// endpoint. The maximum size of this array is 100.\n// \n// If LastEvaluatedTableName also appears in the output, you can use this value\n// as the ExclusiveStartTableName parameter in a subsequent ListTables request\n// and obtain the next page of results.\n","shape":"TableNameList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"LocalSecondaryIndex":{"ShapeName":"LocalSecondaryIndex","Documentation":"// Represents the properties of a local secondary index.\n","members":{"IndexName":{"Documentation":"// The name of the local secondary index. The name must be unique among all\n// other indexes on this table.\n","shape":"IndexName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"KeySchema":{"Documentation":"// The complete key schema for the local secondary index, consisting of one\n// or more pairs of attribute names and key types:\n// \n//    HASH - partition key\n// \n//    RANGE - sort key\n// \n//    The partition key of an item is also known as its hash attribute. The\n// term \"hash attribute\" derives from DynamoDB' usage of an internal hash function\n// to evenly distribute data items across partitions, based on their partition\n// key values.\n// \n// The sort key of an item is also known as its range attribute. The term \"range\n// attribute\" derives from the way DynamoDB stores items with the same partition\n// key physically close together, in sorted order by the sort key value.\n","shape":"KeySchema","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Projection":{"Documentation":"","shape":"Projection","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":["IndexName","KeySchema","Projection"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"IndexName","Ref":{"Documentation":"// The name of the local secondary index. The name must be unique among all\n// other indexes on this table.\n","shape":"IndexName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"IndexName","Ref":{"Documentation":"// The name of the local secondary index. The name must be unique among all\n// other indexes on this table.\n","shape":"IndexName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"KeySchema","Ref":{"Documentation":"// The complete key schema for the local secondary index, consisting of one\n// or more pairs of attribute names and key types:\n// \n//    HASH - partition key\n// \n//    RANGE - sort key\n// \n//    The partition key of an item is also known as its hash attribute. The\n// term \"hash attribute\" derives from DynamoDB' usage of an internal hash function\n// to evenly distribute data items across partitions, based on their partition\n// key values.\n// \n// The sort key of an item is also known as its range attribute. The term \"range\n// attribute\" derives from the way DynamoDB stores items with the same partition\n// key physically close together, in sorted order by the sort key value.\n","shape":"KeySchema","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"KeySchema","Ref":{"Documentation":"// The complete key schema for the local secondary index, consisting of one\n// or more pairs of attribute names and key types:\n// \n//    HASH - partition key\n// \n//    RANGE - sort key\n// \n//    The partition key of an item is also known as its hash attribute. The\n// term \"hash attribute\" derives from DynamoDB' usage of an internal hash function\n// to evenly distribute data items across partitions, based on their partition\n// key values.\n// \n// The sort key of an item is also known as its range attribute. The term \"range\n// attribute\" derives from the way DynamoDB stores items with the same partition\n// key physically close together, in sorted order by the sort key value.\n","shape":"KeySchema","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"Projection","Ref":{"Documentation":"","shape":"Projection","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"KeySchema","Ref":{"Documentation":"// The complete key schema for the local secondary index, consisting of one\n// or more pairs of attribute names and key types:\n// \n//    HASH - partition key\n// \n//    RANGE - sort key\n// \n//    The partition key of an item is also known as its hash attribute. The\n// term \"hash attribute\" derives from DynamoDB' usage of an internal hash function\n// to evenly distribute data items across partitions, based on their partition\n// key values.\n// \n// The sort key of an item is also known as its range attribute. The term \"range\n// attribute\" derives from the way DynamoDB stores items with the same partition\n// key physically close together, in sorted order by the sort key value.\n","shape":"KeySchema","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":2},{"Name":"Projection","Ref":{"Documentation":"","shape":"Projection","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":2}]},"LocalSecondaryIndexDescription":{"ShapeName":"LocalSecondaryIndexDescription","Documentation":"// Represents the properties of a local secondary index.\n","members":{"IndexArn":{"Documentation":"// The Amazon Resource Name (ARN) that uniquely identifies the index.\n","shape":"String","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"IndexName":{"Documentation":"// Represents the name of the local secondary index.\n","shape":"IndexName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"IndexSizeBytes":{"Documentation":"// The total size of the specified index, in bytes. DynamoDB updates this value\n// approximately every six hours. Recent changes might not be reflected in this\n// value.\n","shape":"Long","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ItemCount":{"Documentation":"// The number of items in the specified index. DynamoDB updates this value approximately\n// every six hours. Recent changes might not be reflected in this value.\n","shape":"Long","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"KeySchema":{"Documentation":"// The complete key schema for the local secondary index, consisting of one\n// or more pairs of attribute names and key types:\n// \n//    HASH - partition key\n// \n//    RANGE - sort key\n// \n//    The partition key of an item is also known as its hash attribute. The\n// term \"hash attribute\" derives from DynamoDB' usage of an internal hash function\n// to evenly distribute data items across partitions, based on their partition\n// key values.\n// \n// The sort key of an item is also known as its range attribute. The term \"range\n// attribute\" derives from the way DynamoDB stores items with the same partition\n// key physically close together, in sorted order by the sort key value.\n","shape":"KeySchema","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Projection":{"Documentation":"","shape":"Projection","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"LocalSecondaryIndexDescriptionList":{"ShapeName":"LocalSecondaryIndexDescriptionList","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"LocalSecondaryIndexDescription","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"list","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"LocalSecondaryIndexList":{"ShapeName":"LocalSecondaryIndexList","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"LocalSecondaryIndex","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"list","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"Long":{"ShapeName":"Long","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"long","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"MapAttributeValue":{"ShapeName":"MapAttributeValue","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"AttributeName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"AttributeValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"map","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"NonKeyAttributeName":{"ShapeName":"NonKeyAttributeName","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":1,"Max":255,"Placeholder":false,"deprecated":false,"Validations":null},"NonKeyAttributeNameList":{"ShapeName":"NonKeyAttributeNameList","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"NonKeyAttributeName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"list","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":1,"Max":20,"Placeholder":false,"deprecated":false,"Validations":null},"NullAttributeValue":{"ShapeName":"NullAttributeValue","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"boolean","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"NumberAttributeValue":{"ShapeName":"NumberAttributeValue","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"NumberSetAttributeValue":{"ShapeName":"NumberSetAttributeValue","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"NumberAttributeValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"list","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"PositiveIntegerObject":{"ShapeName":"PositiveIntegerObject","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"integer","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":1,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"PositiveLongObject":{"ShapeName":"PositiveLongObject","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"long","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":1,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"Projection":{"ShapeName":"Projection","Documentation":"// Represents attributes that are copied (projected) from the table into an\n// index. These are in addition to the primary key attributes and index key\n// attributes, which are automatically projected.\n","members":{"NonKeyAttributes":{"Documentation":"// Represents the non-key attribute names which will be projected into the index.\n// \n// For local secondary indexes, the total count of NonKeyAttributes summed\n// across all of the local secondary indexes, must not exceed 20. If you project\n// the same attribute into two different indexes, this counts as two distinct\n// attributes when determining the total.\n","shape":"NonKeyAttributeNameList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ProjectionType":{"Documentation":"// The set of attributes that are projected into the index:\n// \n//    KEYS_ONLY - Only the index and primary keys are projected into the index.\n// \n//    INCLUDE - Only the specified table attributes are projected into the\n// index. The list of projected attributes are in NonKeyAttributes.\n// \n//    ALL - All of the table attributes are projected into the index.\n","shape":"ProjectionType","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"NonKeyAttributes","Ref":{"Documentation":"// Represents the non-key attribute names which will be projected into the index.\n// \n// For local secondary indexes, the total count of NonKeyAttributes summed\n// across all of the local secondary indexes, must not exceed 20. If you project\n// the same attribute into two different indexes, this counts as two distinct\n// attributes when determining the total.\n","shape":"NonKeyAttributeNameList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1}]},"ProjectionExpression":{"ShapeName":"ProjectionExpression","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ProjectionType":{"ShapeName":"ProjectionType","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":["ALL","KEYS_ONLY","INCLUDE"],"EnumConsts":["ProjectionTypeAll","ProjectionTypeKeysOnly","ProjectionTypeInclude"],"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ProvisionedThroughput":{"ShapeName":"ProvisionedThroughput","Documentation":"// Represents the provisioned throughput settings for a specified table or index.\n// The settings can be modified using the UpdateTable operation.\n// \n// For current minimum and maximum provisioned throughput values, see Limits\n// (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html)\n// in the Amazon DynamoDB Developer Guide.\n","members":{"ReadCapacityUnits":{"Documentation":"// The maximum number of strongly consistent reads consumed per second before\n// DynamoDB returns a ThrottlingException. For more information, see Specifying\n// Read and Write Requirements (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"PositiveLongObject","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"WriteCapacityUnits":{"Documentation":"// The maximum number of writes consumed per second before DynamoDB returns\n// a ThrottlingException. For more information, see Specifying Read and Write\n// Requirements (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"PositiveLongObject","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":["ReadCapacityUnits","WriteCapacityUnits"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"ReadCapacityUnits","Ref":{"Documentation":"// The maximum number of strongly consistent reads consumed per second before\n// DynamoDB returns a ThrottlingException. For more information, see Specifying\n// Read and Write Requirements (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"PositiveLongObject","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"ReadCapacityUnits","Ref":{"Documentation":"// The maximum number of strongly consistent reads consumed per second before\n// DynamoDB returns a ThrottlingException. For more information, see Specifying\n// Read and Write Requirements (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"PositiveLongObject","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"WriteCapacityUnits","Ref":{"Documentation":"// The maximum number of writes consumed per second before DynamoDB returns\n// a ThrottlingException. For more information, see Specifying Read and Write\n// Requirements (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"PositiveLongObject","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"WriteCapacityUnits","Ref":{"Documentation":"// The maximum number of writes consumed per second before DynamoDB returns\n// a ThrottlingException. For more information, see Specifying Read and Write\n// Requirements (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"PositiveLongObject","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1}]},"ProvisionedThroughputDescription":{"ShapeName":"ProvisionedThroughputDescription","Documentation":"// Represents the provisioned throughput settings for the table, consisting\n// of read and write capacity units, along with data about increases and decreases.\n","members":{"LastDecreaseDateTime":{"Documentation":"// The date and time of the last provisioned throughput decrease for this table.\n","shape":"Date","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"LastIncreaseDateTime":{"Documentation":"// The date and time of the last provisioned throughput increase for this table.\n","shape":"Date","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"NumberOfDecreasesToday":{"Documentation":"// The number of provisioned throughput decreases for this table during this\n// UTC calendar day. For current maximums on provisioned throughput decreases,\n// see Limits (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"PositiveLongObject","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ReadCapacityUnits":{"Documentation":"// The maximum number of strongly consistent reads consumed per second before\n// DynamoDB returns a ThrottlingException. Eventually consistent reads require\n// less effort than strongly consistent reads, so a setting of 50 ReadCapacityUnits\n// per second provides 100 eventually consistent ReadCapacityUnits per second.\n","shape":"PositiveLongObject","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"WriteCapacityUnits":{"Documentation":"// The maximum number of writes consumed per second before DynamoDB returns\n// a ThrottlingException.\n","shape":"PositiveLongObject","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"PutItemInput":{"ShapeName":"PutItemInput","Documentation":"// Represents the input of a PutItem operation.\n","members":{"ConditionExpression":{"Documentation":"// A condition that must be satisfied in order for a conditional PutItem operation\n// to succeed.\n// \n// An expression can contain any of the following:\n// \n//   Functions: attribute_exists | attribute_not_exists | attribute_type |\n// contains | begins_with | size \n// \n// These function names are case-sensitive.\n// \n//   Comparison operators:  = | \u0026#x3C;\u0026#x3E; | \u0026#x3C; | \u0026#x3E; | \u0026#x3C;= |\n// \u0026#x3E;= | BETWEEN | IN \n// \n//    Logical operators: AND | OR | NOT \n// \n//   For more information on condition expressions, see Specifying Conditions\n// (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n//   ConditionExpression replaces the legacy ConditionalOperator and Expected\n// parameters.\n","shape":"ConditionExpression","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ConditionalOperator":{"Documentation":"// This is a legacy parameter, for backward compatibility. New applications\n// should use ConditionExpression instead. Do not combine legacy parameters\n// and expression parameters in a single API call; otherwise, DynamoDB will\n// return a ValidationException exception.\n// \n//  A logical operator to apply to the conditions in the Expected map:\n// \n//    AND - If all of the conditions evaluate to true, then the entire map\n// evaluates to true.\n// \n//    OR - If at least one of the conditions evaluate to true, then the entire\n// map evaluates to true.\n// \n//   If you omit ConditionalOperator, then AND is the default.\n// \n// The operation will succeed only if the entire map evaluates to true.\n// \n//  This parameter does not support attributes of type List or Map.\n","shape":"ConditionalOperator","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Expected":{"Documentation":"// This is a legacy parameter, for backward compatibility. New applications\n// should use ConditionExpression instead. Do not combine legacy parameters\n// and expression parameters in a single API call; otherwise, DynamoDB will\n// return a ValidationException exception.\n// \n//  A map of attribute/condition pairs. Expected provides a conditional block\n// for the PutItem operation.\n// \n//  This parameter does not support attributes of type List or Map.\n// \n//  Each element of Expected consists of an attribute name, a comparison operator,\n// and one or more values. DynamoDB compares the attribute with the value(s)\n// you supplied, using the comparison operator. For each Expected element, the\n// result of the evaluation is either true or false.\n// \n// If you specify more than one element in the Expected map, then by default\n// all of the conditions must evaluate to true. In other words, the conditions\n// are ANDed together. (You can use the ConditionalOperator parameter to OR\n// the conditions instead. If you do this, then at least one of the conditions\n// must evaluate to true, rather than all of them.)\n// \n// If the Expected map evaluates to true, then the conditional operation succeeds;\n// otherwise, it fails.\n// \n//  Expected contains the following:\n// \n//    AttributeValueList - One or more values to evaluate against the supplied\n// attribute. The number of values in the list depends on the ComparisonOperator\n// being used.\n// \n// For type Number, value comparisons are numeric.\n// \n// String value comparisons for greater than, equals, or less than are based\n// on ASCII character code values. For example, a is greater than A, and a is\n// greater than B. For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\n// (http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters).\n// \n// For type Binary, DynamoDB treats each byte of the binary data as unsigned\n// when it compares binary values.\n// \n//    ComparisonOperator - A comparator for evaluating attributes in the AttributeValueList.\n// When performing the comparison, DynamoDB uses strongly consistent reads.\n// \n// The following comparison operators are available:\n// \n//  EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS\n// | BEGINS_WITH | IN | BETWEEN \n// \n// The following are descriptions of each comparison operator.\n// \n//    EQ : Equal. EQ is supported for all datatypes, including lists and maps.\n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, Binary, String Set, Number Set, or Binary Set. If an item\n// contains an AttributeValue element of a different type than the one provided\n// in the request, the value does not match. For example, {\"S\":\"6\"} does not\n// equal {\"N\":\"6\"}. Also, {\"N\":\"6\"} does not equal {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     NE : Not equal. NE is supported for all datatypes, including lists and\n// maps.\n// \n//  AttributeValueList can contain only one AttributeValue of type String,\n// Number, Binary, String Set, Number Set, or Binary Set. If an item contains\n// an AttributeValue of a different type than the one provided in the request,\n// the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}.\n// Also, {\"N\":\"6\"} does not equal {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     LE : Less than or equal. \n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     LT : Less than. \n// \n//  AttributeValueList can contain only one AttributeValue of type String,\n// Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     GE : Greater than or equal. \n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     GT : Greater than. \n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     NOT_NULL : The attribute exists. NOT_NULL is supported for all datatypes,\n// including lists and maps.\n// \n//  This operator tests for the existence of an attribute, not its data type.\n// If the data type of attribute \"a\" is null, and you evaluate it using NOT_NULL,\n// the result is a Boolean true. This result is because the attribute \"a\" exists;\n// its data type is not relevant to the NOT_NULL comparison operator.\n// \n//     NULL : The attribute does not exist. NULL is supported for all datatypes,\n// including lists and maps.\n// \n//  This operator tests for the nonexistence of an attribute, not its data\n// type. If the data type of attribute \"a\" is null, and you evaluate it using\n// NULL, the result is a Boolean false. This is because the attribute \"a\" exists;\n// its data type is not relevant to the NULL comparison operator.\n// \n//     CONTAINS : Checks for a subsequence, or value in a set.\n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If the target attribute of the\n// comparison is of type String, then the operator checks for a substring match.\n// If the target attribute of the comparison is of type Binary, then the operator\n// looks for a subsequence of the target that matches the input. If the target\n// attribute of the comparison is a set (\"SS\", \"NS\", or \"BS\"), then the operator\n// evaluates to true if it finds an exact match with any member of the set.\n// \n// CONTAINS is supported for lists: When evaluating \"a CONTAINS b\", \"a\" can\n// be a list; however, \"b\" cannot be a set, a map, or a list.\n// \n//    NOT_CONTAINS : Checks for absence of a subsequence, or absence of a value\n// in a set.\n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If the target attribute of the\n// comparison is a String, then the operator checks for the absence of a substring\n// match. If the target attribute of the comparison is Binary, then the operator\n// checks for the absence of a subsequence of the target that matches the input.\n// If the target attribute of the comparison is a set (\"SS\", \"NS\", or \"BS\"),\n// then the operator evaluates to true if it does not find an exact match with\n// any member of the set.\n// \n// NOT_CONTAINS is supported for lists: When evaluating \"a NOT CONTAINS b\",\n// \"a\" can be a list; however, \"b\" cannot be a set, a map, or a list.\n// \n//    BEGINS_WITH : Checks for a prefix. \n// \n//  AttributeValueList can contain only one AttributeValue of type String or\n// Binary (not a Number or a set type). The target attribute of the comparison\n// must be of type String or Binary (not a Number or a set type).\n// \n//     IN : Checks for matching elements within two sets.\n// \n//  AttributeValueList can contain one or more AttributeValue elements of type\n// String, Number, or Binary (not a set type). These attributes are compared\n// against an existing set type attribute of an item. If any elements of the\n// input set are present in the item attribute, the expression evaluates to\n// true.\n// \n//    BETWEEN : Greater than or equal to the first value, and less than or\n// equal to the second value. \n// \n//  AttributeValueList must contain two AttributeValue elements of the same\n// type, either String, Number, or Binary (not a set type). A target attribute\n// matches if the target value is greater than, or equal to, the first element\n// and less than, or equal to, the second element. If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not compare to {\"N\":\"6\"}. Also,\n// {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} \n// \n//     For usage examples of AttributeValueList and ComparisonOperator, see\n// Legacy Conditional Parameters (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n// For backward compatibility with previous DynamoDB releases, the following\n// parameters can be used instead of AttributeValueList and ComparisonOperator:\n// \n//    Value - A value for DynamoDB to compare with an attribute.\n// \n//    Exists - A Boolean value that causes DynamoDB to evaluate the value before\n// attempting the conditional operation:\n// \n//   If Exists is true, DynamoDB will check to see if that attribute value\n// already exists in the table. If it is found, then the condition evaluates\n// to true; otherwise the condition evaluate to false.\n// \n//   If Exists is false, DynamoDB assumes that the attribute value does not\n// exist in the table. If in fact the value does not exist, then the assumption\n// is valid and the condition evaluates to true. If the value is found, despite\n// the assumption that it does not exist, the condition evaluates to false.\n// \n//   Note that the default value for Exists is true.\n// \n//   The Value and Exists parameters are incompatible with AttributeValueList\n// and ComparisonOperator. Note that if you use both sets of parameters at once,\n// DynamoDB will return a ValidationException exception.\n","shape":"ExpectedAttributeMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ExpressionAttributeNames":{"Documentation":"// One or more substitution tokens for attribute names in an expression. The\n// following are some use cases for using ExpressionAttributeNames:\n// \n//   To access an attribute whose name conflicts with a DynamoDB reserved word.\n// \n//   To create a placeholder for repeating occurrences of an attribute name\n// in an expression.\n// \n//   To prevent special characters in an attribute name from being misinterpreted\n// in an expression.\n// \n//   Use the # character in an expression to dereference an attribute name.\n// For example, consider the following attribute name:\n// \n//    Percentile \n// \n//   The name of this attribute conflicts with a reserved word, so it cannot\n// be used directly in an expression. (For the complete list of reserved words,\n// see Reserved Words (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html)\n// in the Amazon DynamoDB Developer Guide). To work around this, you could specify\n// the following for ExpressionAttributeNames:\n// \n//    {\"#P\":\"Percentile\"} \n// \n//   You could then use this substitution in an expression, as in this example:\n// \n//    #P = :val \n// \n//    Tokens that begin with the : character are expression attribute values,\n// which are placeholders for the actual value at runtime.\n// \n//  For more information on expression attribute names, see Accessing Item\n// Attributes (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"ExpressionAttributeNameMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ExpressionAttributeValues":{"Documentation":"// One or more values that can be substituted in an expression.\n// \n// Use the : (colon) character in an expression to dereference an attribute\n// value. For example, suppose that you wanted to check whether the value of\n// the ProductStatus attribute was one of the following: \n// \n//  Available | Backordered | Discontinued \n// \n// You would first need to specify ExpressionAttributeValues as follows:\n// \n//  { \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"}, \":disc\":{\"S\":\"Discontinued\"}\n// } \n// \n// You could then use these values in an expression, such as this:\n// \n//  ProductStatus IN (:avail, :back, :disc) \n// \n// For more information on expression attribute values, see Specifying Conditions\n// (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"ExpressionAttributeValueMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Item":{"Documentation":"// A map of attribute name/value pairs, one for each attribute. Only the primary\n// key attributes are required; you can optionally provide other attribute name-value\n// pairs for the item.\n// \n// You must provide all of the attributes for the primary key. For example,\n// with a simple primary key, you only need to provide a value for the partition\n// key. For a composite primary key, you must provide both values for both the\n// partition key and the sort key.\n// \n// If you specify any attributes that are part of an index key, then the data\n// types for those attributes must match those of the schema in the table's\n// attribute definition.\n// \n// For more information about primary keys, see Primary Key (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey)\n// in the Amazon DynamoDB Developer Guide.\n// \n// Each element in the Item map is an AttributeValue object.\n","shape":"PutItemInputAttributeMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ReturnConsumedCapacity":{"Documentation":"","shape":"ReturnConsumedCapacity","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ReturnItemCollectionMetrics":{"Documentation":"// Determines whether item collection metrics are returned. If set to SIZE,\n// the response includes statistics about item collections, if any, that were\n// modified during the operation are returned in the response. If set to NONE\n// (the default), no statistics are returned.\n","shape":"ReturnItemCollectionMetrics","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ReturnValues":{"Documentation":"// Use ReturnValues if you want to get the item attributes as they appeared\n// before they were updated with the PutItem request. For PutItem, the valid\n// values are:\n// \n//    NONE - If ReturnValues is not specified, or if its value is NONE, then\n// nothing is returned. (This setting is the default for ReturnValues.)\n// \n//    ALL_OLD - If PutItem overwrote an attribute name-value pair, then the\n// content of the old item is returned.\n// \n//    The ReturnValues parameter is used by several DynamoDB operations; however,\n// PutItem does not recognize any values other than NONE or ALL_OLD.\n","shape":"ReturnValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"TableName":{"Documentation":"// The name of the table to contain the item.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":["TableName","Item"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"Item","Ref":{"Documentation":"// A map of attribute name/value pairs, one for each attribute. Only the primary\n// key attributes are required; you can optionally provide other attribute name-value\n// pairs for the item.\n// \n// You must provide all of the attributes for the primary key. For example,\n// with a simple primary key, you only need to provide a value for the partition\n// key. For a composite primary key, you must provide both values for both the\n// partition key and the sort key.\n// \n// If you specify any attributes that are part of an index key, then the data\n// types for those attributes must match those of the schema in the table's\n// attribute definition.\n// \n// For more information about primary keys, see Primary Key (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey)\n// in the Amazon DynamoDB Developer Guide.\n// \n// Each element in the Item map is an AttributeValue object.\n","shape":"PutItemInputAttributeMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"TableName","Ref":{"Documentation":"// The name of the table to contain the item.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"TableName","Ref":{"Documentation":"// The name of the table to contain the item.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1}]},"PutItemInputAttributeMap":{"ShapeName":"PutItemInputAttributeMap","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"AttributeName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"AttributeValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"map","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"PutItemOutput":{"ShapeName":"PutItemOutput","Documentation":"// Represents the output of a PutItem operation.\n","members":{"Attributes":{"Documentation":"// The attribute values as they appeared before the PutItem operation, but only\n// if ReturnValues is specified as ALL_OLD in the request. Each element consists\n// of an attribute name and an attribute value.\n","shape":"AttributeMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ConsumedCapacity":{"Documentation":"","shape":"ConsumedCapacity","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ItemCollectionMetrics":{"Documentation":"// Information about item collections, if any, that were affected by the operation.\n// ItemCollectionMetrics is only returned if the request asked for it. If the\n// table does not have any local secondary indexes, this information is not\n// returned in the response.\n// \n// Each ItemCollectionMetrics element consists of:\n// \n//    ItemCollectionKey - The partition key value of the item collection. This\n// is the same as the partition key value of the item itself.\n// \n//    SizeEstimateRange - An estimate of item collection size, in gigabytes.\n// This value is a two-element array containing a lower bound and an upper bound\n// for the estimate. The estimate includes the size of all the items in the\n// table, plus the size of all attributes projected into all of the local secondary\n// indexes on that table. Use this estimate to measure whether a local secondary\n// index is approaching its size limit.\n// \n// The estimate is subject to change over time; therefore, do not rely on the\n// precision or accuracy of the estimate.\n","shape":"ItemCollectionMetrics","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"PutRequest":{"ShapeName":"PutRequest","Documentation":"// Represents a request to perform a PutItem operation on an item.\n","members":{"Item":{"Documentation":"// A map of attribute name to attribute values, representing the primary key\n// of an item to be processed by PutItem. All of the table's primary key attributes\n// must be specified, and their data types must match those of the table's key\n// schema. If any attributes are present in the item which are part of an index\n// key schema for the table, their types must match the index key schema.\n","shape":"PutItemInputAttributeMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":["Item"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"QueryInput":{"ShapeName":"QueryInput","Documentation":"// Represents the input of a Query operation.\n","members":{"AttributesToGet":{"Documentation":"// This is a legacy parameter, for backward compatibility. New applications\n// should use ProjectionExpression instead. Do not combine legacy parameters\n// and expression parameters in a single API call; otherwise, DynamoDB will\n// return a ValidationException exception.\n// \n// This parameter allows you to retrieve attributes of type List or Map; however,\n// it cannot retrieve individual elements within a List or a Map.\n// \n//  The names of one or more attributes to retrieve. If no attribute names\n// are provided, then all attributes will be returned. If any of the requested\n// attributes are not found, they will not appear in the result.\n// \n// Note that AttributesToGet has no effect on provisioned throughput consumption.\n// DynamoDB determines capacity units consumed based on item size, not on the\n// amount of data that is returned to an application.\n// \n// You cannot use both AttributesToGet and Select together in a Query request,\n// unless the value for Select is SPECIFIC_ATTRIBUTES. (This usage is equivalent\n// to specifying AttributesToGet without any value for Select.)\n// \n// If you query a local secondary index and request only attributes that are\n// projected into that index, the operation will read only the index and not\n// the table. If any of the requested attributes are not projected into the\n// local secondary index, DynamoDB will fetch each of these attributes from\n// the parent table. This extra fetching incurs additional throughput cost and\n// latency.\n// \n// If you query a global secondary index, you can only request attributes that\n// are projected into the index. Global secondary index queries cannot fetch\n// attributes from the parent table.\n","shape":"AttributeNameList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ConditionalOperator":{"Documentation":"// This is a legacy parameter, for backward compatibility. New applications\n// should use FilterExpression instead. Do not combine legacy parameters and\n// expression parameters in a single API call; otherwise, DynamoDB will return\n// a ValidationException exception.\n// \n//  A logical operator to apply to the conditions in a QueryFilter map:\n// \n//    AND - If all of the conditions evaluate to true, then the entire map\n// evaluates to true.\n// \n//    OR - If at least one of the conditions evaluate to true, then the entire\n// map evaluates to true.\n// \n//   If you omit ConditionalOperator, then AND is the default.\n// \n// The operation will succeed only if the entire map evaluates to true.\n// \n//  This parameter does not support attributes of type List or Map.\n","shape":"ConditionalOperator","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ConsistentRead":{"Documentation":"// Determines the read consistency model: If set to true, then the operation\n// uses strongly consistent reads; otherwise, the operation uses eventually\n// consistent reads.\n// \n// Strongly consistent reads are not supported on global secondary indexes.\n// If you query a global secondary index with ConsistentRead set to true, you\n// will receive a ValidationException.\n","shape":"ConsistentRead","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ExclusiveStartKey":{"Documentation":"// The primary key of the first item that this operation will evaluate. Use\n// the value that was returned for LastEvaluatedKey in the previous operation.\n// \n// The data type for ExclusiveStartKey must be String, Number or Binary. No\n// set data types are allowed.\n","shape":"Key","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ExpressionAttributeNames":{"Documentation":"// One or more substitution tokens for attribute names in an expression. The\n// following are some use cases for using ExpressionAttributeNames:\n// \n//   To access an attribute whose name conflicts with a DynamoDB reserved word.\n// \n//   To create a placeholder for repeating occurrences of an attribute name\n// in an expression.\n// \n//   To prevent special characters in an attribute name from being misinterpreted\n// in an expression.\n// \n//   Use the # character in an expression to dereference an attribute name.\n// For example, consider the following attribute name:\n// \n//    Percentile \n// \n//   The name of this attribute conflicts with a reserved word, so it cannot\n// be used directly in an expression. (For the complete list of reserved words,\n// see Reserved Words (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html)\n// in the Amazon DynamoDB Developer Guide). To work around this, you could specify\n// the following for ExpressionAttributeNames:\n// \n//    {\"#P\":\"Percentile\"} \n// \n//   You could then use this substitution in an expression, as in this example:\n// \n//    #P = :val \n// \n//    Tokens that begin with the : character are expression attribute values,\n// which are placeholders for the actual value at runtime.\n// \n//  For more information on expression attribute names, see Accessing Item\n// Attributes (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"ExpressionAttributeNameMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ExpressionAttributeValues":{"Documentation":"// One or more values that can be substituted in an expression.\n// \n// Use the : (colon) character in an expression to dereference an attribute\n// value. For example, suppose that you wanted to check whether the value of\n// the ProductStatus attribute was one of the following: \n// \n//  Available | Backordered | Discontinued \n// \n// You would first need to specify ExpressionAttributeValues as follows:\n// \n//  { \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"}, \":disc\":{\"S\":\"Discontinued\"}\n// } \n// \n// You could then use these values in an expression, such as this:\n// \n//  ProductStatus IN (:avail, :back, :disc) \n// \n// For more information on expression attribute values, see Specifying Conditions\n// (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"ExpressionAttributeValueMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"FilterExpression":{"Documentation":"// A string that contains conditions that DynamoDB applies after the Query operation,\n// but before the data is returned to you. Items that do not satisfy the FilterExpression\n// criteria are not returned.\n// \n//  A FilterExpression is applied after the items have already been read; the\n// process of filtering does not consume any additional read capacity units.\n// \n//  For more information, see Filter Expressions (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#FilteringResults)\n// in the Amazon DynamoDB Developer Guide.\n// \n//   FilterExpression replaces the legacy QueryFilter and ConditionalOperator\n// parameters.\n","shape":"ConditionExpression","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"IndexName":{"Documentation":"// The name of an index to query. This index can be any local secondary index\n// or global secondary index on the table. Note that if you use the IndexName\n// parameter, you must also provide TableName.\n","shape":"IndexName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"KeyConditionExpression":{"Documentation":"// The condition that specifies the key value(s) for items to be retrieved by\n// the Query action.\n// \n// The condition must perform an equality test on a single partition key value.\n// The condition can also perform one of several comparison tests on a single\n// sort key value. Query can use KeyConditionExpression to retrieve one item\n// with a given partition key value and sort key value, or several items that\n// have the same partition key value but different sort key values.\n// \n// The partition key equality test is required, and must be specified in the\n// following format:\n// \n//  partitionKeyName = :partitionkeyval \n// \n// If you also want to provide a condition for the sort key, it must be combined\n// using AND with the condition for the sort key. Following is an example, using\n// the = comparison operator for the sort key:\n// \n//  partitionKeyName = :partitionkeyval AND sortKeyName = :sortkeyval \n// \n// Valid comparisons for the sort key condition are as follows:\n// \n//    sortKeyName = :sortkeyval - true if the sort key value is equal to :sortkeyval.\n// \n//    sortKeyName \u003c :sortkeyval - true if the sort key value is less than :sortkeyval.\n// \n//    sortKeyName \u003c= :sortkeyval - true if the sort key value is less than\n// or equal to :sortkeyval.\n// \n//    sortKeyName \u003e :sortkeyval - true if the sort key value is greater than\n// :sortkeyval.\n// \n//    sortKeyName \u003e=  :sortkeyval - true if the sort key value is greater than\n// or equal to :sortkeyval.\n// \n//    sortKeyName BETWEEN :sortkeyval1 AND :sortkeyval2 - true if the sort\n// key value is greater than or equal to :sortkeyval1, and less than or equal\n// to :sortkeyval2.\n// \n//    begins_with ( sortKeyName, :sortkeyval ) - true if the sort key value\n// begins with a particular operand. (You cannot use this function with a sort\n// key that is of type Number.) Note that the function name begins_with is case-sensitive.\n// \n//   Use the ExpressionAttributeValues parameter to replace tokens such as\n// :partitionval and :sortval with actual values at runtime.\n// \n// You can optionally use the ExpressionAttributeNames parameter to replace\n// the names of the partition key and sort key with placeholder tokens. This\n// option might be necessary if an attribute name conflicts with a DynamoDB\n// reserved word. For example, the following KeyConditionExpression parameter\n// causes an error because Size is a reserved word:\n// \n//   Size = :myval \n// \n//   To work around this, define a placeholder (such a #S) to represent the\n// attribute name Size. KeyConditionExpression then is as follows:\n// \n//   #S = :myval \n// \n//   For a list of reserved words, see Reserved Words (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n// For more information on ExpressionAttributeNames and ExpressionAttributeValues,\n// see Using Placeholders for Attribute Names and Values (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ExpressionPlaceholders.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n//   KeyConditionExpression replaces the legacy KeyConditions parameter.\n","shape":"KeyExpression","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"KeyConditions":{"Documentation":"// This is a legacy parameter, for backward compatibility. New applications\n// should use KeyConditionExpression instead. Do not combine legacy parameters\n// and expression parameters in a single API call; otherwise, DynamoDB will\n// return a ValidationException exception.\n// \n//  The selection criteria for the query. For a query on a table, you can have\n// conditions only on the table primary key attributes. You must provide the\n// partition key name and value as an EQ condition. You can optionally provide\n// a second condition, referring to the sort key.\n// \n//  If you don't provide a sort key condition, all of the items that match\n// the partition key will be retrieved. If a FilterExpression or QueryFilter\n// is present, it will be applied after the items are retrieved.\n// \n//  For a query on an index, you can have conditions only on the index key\n// attributes. You must provide the index partition key name and value as an\n// EQ condition. You can optionally provide a second condition, referring to\n// the index sort key.\n// \n// Each KeyConditions element consists of an attribute name to compare, along\n// with the following:\n// \n//    AttributeValueList - One or more values to evaluate against the supplied\n// attribute. The number of values in the list depends on the ComparisonOperator\n// being used.\n// \n// For type Number, value comparisons are numeric.\n// \n// String value comparisons for greater than, equals, or less than are based\n// on ASCII character code values. For example, a is greater than A, and a is\n// greater than B. For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\n// (http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters).\n// \n// For Binary, DynamoDB treats each byte of the binary data as unsigned when\n// it compares binary values.\n// \n//    ComparisonOperator - A comparator for evaluating attributes, for example,\n// equals, greater than, less than, and so on.\n// \n// For KeyConditions, only the following comparison operators are supported:\n// \n//  EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN \n// \n// The following are descriptions of these comparison operators.\n// \n//    EQ : Equal. \n// \n//  AttributeValueList can contain only one AttributeValue of type String,\n// Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one specified in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not equal {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     LE : Less than or equal. \n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     LT : Less than. \n// \n//  AttributeValueList can contain only one AttributeValue of type String,\n// Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     GE : Greater than or equal. \n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     GT : Greater than. \n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     BEGINS_WITH : Checks for a prefix. \n// \n//  AttributeValueList can contain only one AttributeValue of type String or\n// Binary (not a Number or a set type). The target attribute of the comparison\n// must be of type String or Binary (not a Number or a set type).\n// \n//     BETWEEN : Greater than or equal to the first value, and less than or\n// equal to the second value. \n// \n//  AttributeValueList must contain two AttributeValue elements of the same\n// type, either String, Number, or Binary (not a set type). A target attribute\n// matches if the target value is greater than, or equal to, the first element\n// and less than, or equal to, the second element. If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not compare to {\"N\":\"6\"}. Also,\n// {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} \n// \n//     For usage examples of AttributeValueList and ComparisonOperator, see\n// Legacy Conditional Parameters (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"KeyConditions","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Limit":{"Documentation":"// The maximum number of items to evaluate (not necessarily the number of matching\n// items). If DynamoDB processes the number of items up to the limit while processing\n// the results, it stops the operation and returns the matching values up to\n// that point, and a key in LastEvaluatedKey to apply in a subsequent operation,\n// so that you can pick up where you left off. Also, if the processed data set\n// size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation\n// and returns the matching values up to the limit, and a key in LastEvaluatedKey\n// to apply in a subsequent operation to continue the operation. For more information,\n// see Query and Scan (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"PositiveIntegerObject","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ProjectionExpression":{"Documentation":"// A string that identifies one or more attributes to retrieve from the table.\n// These attributes can include scalars, sets, or elements of a JSON document.\n// The attributes in the expression must be separated by commas.\n// \n// If no attribute names are specified, then all attributes will be returned.\n// If any of the requested attributes are not found, they will not appear in\n// the result.\n// \n// For more information, see Accessing Item Attributes (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n//   ProjectionExpression replaces the legacy AttributesToGet parameter.\n","shape":"ProjectionExpression","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"QueryFilter":{"Documentation":"// This is a legacy parameter, for backward compatibility. New applications\n// should use FilterExpression instead. Do not combine legacy parameters and\n// expression parameters in a single API call; otherwise, DynamoDB will return\n// a ValidationException exception.\n// \n//  A condition that evaluates the query results after the items are read and\n// returns only the desired values.\n// \n// This parameter does not support attributes of type List or Map.\n// \n//  A QueryFilter is applied after the items have already been read; the process\n// of filtering does not consume any additional read capacity units.\n// \n//  If you provide more than one condition in the QueryFilter map, then by\n// default all of the conditions must evaluate to true. In other words, the\n// conditions are ANDed together. (You can use the ConditionalOperator parameter\n// to OR the conditions instead. If you do this, then at least one of the conditions\n// must evaluate to true, rather than all of them.)\n// \n// Note that QueryFilter does not allow key attributes. You cannot define a\n// filter condition on a partition key or a sort key.\n// \n// Each QueryFilter element consists of an attribute name to compare, along\n// with the following:\n// \n//    AttributeValueList - One or more values to evaluate against the supplied\n// attribute. The number of values in the list depends on the operator specified\n// in ComparisonOperator.\n// \n// For type Number, value comparisons are numeric.\n// \n// String value comparisons for greater than, equals, or less than are based\n// on ASCII character code values. For example, a is greater than A, and a is\n// greater than B. For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\n// (http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters).\n// \n// For type Binary, DynamoDB treats each byte of the binary data as unsigned\n// when it compares binary values.\n// \n// For information on specifying data types in JSON, see JSON Data Format (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n//    ComparisonOperator - A comparator for evaluating attributes. For example,\n// equals, greater than, less than, etc.\n// \n// The following comparison operators are available:\n// \n//  EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS\n// | BEGINS_WITH | IN | BETWEEN \n// \n// For complete descriptions of all comparison operators, see the Condition\n// (http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Condition.html)\n// data type.\n","shape":"FilterConditionMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ReturnConsumedCapacity":{"Documentation":"","shape":"ReturnConsumedCapacity","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ScanIndexForward":{"Documentation":"// Specifies the order for index traversal: If true (default), the traversal\n// is performed in ascending order; if false, the traversal is performed in\n// descending order. \n// \n// Items with the same partition key value are stored in sorted order by sort\n// key. If the sort key data type is Number, the results are stored in numeric\n// order. For type String, the results are stored in order of ASCII character\n// code values. For type Binary, DynamoDB treats each byte of the binary data\n// as unsigned.\n// \n// If ScanIndexForward is true, DynamoDB returns the results in the order in\n// which they are stored (by sort key value). This is the default behavior.\n// If ScanIndexForward is false, DynamoDB reads the results in reverse order\n// by sort key value, and then returns the results to the client.\n","shape":"BooleanObject","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Select":{"Documentation":"// The attributes to be returned in the result. You can retrieve all item attributes,\n// specific item attributes, the count of matching items, or in the case of\n// an index, some or all of the attributes projected into the index.\n// \n//    ALL_ATTRIBUTES - Returns all of the item attributes from the specified\n// table or index. If you query a local secondary index, then for each matching\n// item in the index DynamoDB will fetch the entire item from the parent table.\n// If the index is configured to project all item attributes, then all of the\n// data can be obtained from the local secondary index, and no fetching is required.\n// \n//    ALL_PROJECTED_ATTRIBUTES - Allowed only when querying an index. Retrieves\n// all attributes that have been projected into the index. If the index is configured\n// to project all attributes, this return value is equivalent to specifying\n// ALL_ATTRIBUTES.\n// \n//    COUNT - Returns the number of matching items, rather than the matching\n// items themselves.\n// \n//    SPECIFIC_ATTRIBUTES - Returns only the attributes listed in AttributesToGet.\n// This return value is equivalent to specifying AttributesToGet without specifying\n// any value for Select.\n// \n// If you query a local secondary index and request only attributes that are\n// projected into that index, the operation will read only the index and not\n// the table. If any of the requested attributes are not projected into the\n// local secondary index, DynamoDB will fetch each of these attributes from\n// the parent table. This extra fetching incurs additional throughput cost and\n// latency.\n// \n// If you query a global secondary index, you can only request attributes that\n// are projected into the index. Global secondary index queries cannot fetch\n// attributes from the parent table.\n// \n//   If neither Select nor AttributesToGet are specified, DynamoDB defaults\n// to ALL_ATTRIBUTES when accessing a table, and ALL_PROJECTED_ATTRIBUTES when\n// accessing an index. You cannot use both Select and AttributesToGet together\n// in a single request, unless the value for Select is SPECIFIC_ATTRIBUTES.\n// (This usage is equivalent to specifying AttributesToGet without any value\n// for Select.)\n// \n//  If you use the ProjectionExpression parameter, then the value for Select\n// can only be SPECIFIC_ATTRIBUTES. Any other value for Select will return an\n// error.\n","shape":"Select","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"TableName":{"Documentation":"// The name of the table containing the requested items.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":["TableName"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"AttributesToGet","Ref":{"Documentation":"// This is a legacy parameter, for backward compatibility. New applications\n// should use ProjectionExpression instead. Do not combine legacy parameters\n// and expression parameters in a single API call; otherwise, DynamoDB will\n// return a ValidationException exception.\n// \n// This parameter allows you to retrieve attributes of type List or Map; however,\n// it cannot retrieve individual elements within a List or a Map.\n// \n//  The names of one or more attributes to retrieve. If no attribute names\n// are provided, then all attributes will be returned. If any of the requested\n// attributes are not found, they will not appear in the result.\n// \n// Note that AttributesToGet has no effect on provisioned throughput consumption.\n// DynamoDB determines capacity units consumed based on item size, not on the\n// amount of data that is returned to an application.\n// \n// You cannot use both AttributesToGet and Select together in a Query request,\n// unless the value for Select is SPECIFIC_ATTRIBUTES. (This usage is equivalent\n// to specifying AttributesToGet without any value for Select.)\n// \n// If you query a local secondary index and request only attributes that are\n// projected into that index, the operation will read only the index and not\n// the table. If any of the requested attributes are not projected into the\n// local secondary index, DynamoDB will fetch each of these attributes from\n// the parent table. This extra fetching incurs additional throughput cost and\n// latency.\n// \n// If you query a global secondary index, you can only request attributes that\n// are projected into the index. Global secondary index queries cannot fetch\n// attributes from the parent table.\n","shape":"AttributeNameList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"IndexName","Ref":{"Documentation":"// The name of an index to query. This index can be any local secondary index\n// or global secondary index on the table. Note that if you use the IndexName\n// parameter, you must also provide TableName.\n","shape":"IndexName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"Limit","Ref":{"Documentation":"// The maximum number of items to evaluate (not necessarily the number of matching\n// items). If DynamoDB processes the number of items up to the limit while processing\n// the results, it stops the operation and returns the matching values up to\n// that point, and a key in LastEvaluatedKey to apply in a subsequent operation,\n// so that you can pick up where you left off. Also, if the processed data set\n// size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation\n// and returns the matching values up to the limit, and a key in LastEvaluatedKey\n// to apply in a subsequent operation to continue the operation. For more information,\n// see Query and Scan (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"PositiveIntegerObject","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"TableName","Ref":{"Documentation":"// The name of the table containing the requested items.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"TableName","Ref":{"Documentation":"// The name of the table containing the requested items.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"KeyConditions","Ref":{"Documentation":"// This is a legacy parameter, for backward compatibility. New applications\n// should use KeyConditionExpression instead. Do not combine legacy parameters\n// and expression parameters in a single API call; otherwise, DynamoDB will\n// return a ValidationException exception.\n// \n//  The selection criteria for the query. For a query on a table, you can have\n// conditions only on the table primary key attributes. You must provide the\n// partition key name and value as an EQ condition. You can optionally provide\n// a second condition, referring to the sort key.\n// \n//  If you don't provide a sort key condition, all of the items that match\n// the partition key will be retrieved. If a FilterExpression or QueryFilter\n// is present, it will be applied after the items are retrieved.\n// \n//  For a query on an index, you can have conditions only on the index key\n// attributes. You must provide the index partition key name and value as an\n// EQ condition. You can optionally provide a second condition, referring to\n// the index sort key.\n// \n// Each KeyConditions element consists of an attribute name to compare, along\n// with the following:\n// \n//    AttributeValueList - One or more values to evaluate against the supplied\n// attribute. The number of values in the list depends on the ComparisonOperator\n// being used.\n// \n// For type Number, value comparisons are numeric.\n// \n// String value comparisons for greater than, equals, or less than are based\n// on ASCII character code values. For example, a is greater than A, and a is\n// greater than B. For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\n// (http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters).\n// \n// For Binary, DynamoDB treats each byte of the binary data as unsigned when\n// it compares binary values.\n// \n//    ComparisonOperator - A comparator for evaluating attributes, for example,\n// equals, greater than, less than, and so on.\n// \n// For KeyConditions, only the following comparison operators are supported:\n// \n//  EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN \n// \n// The following are descriptions of these comparison operators.\n// \n//    EQ : Equal. \n// \n//  AttributeValueList can contain only one AttributeValue of type String,\n// Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one specified in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not equal {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     LE : Less than or equal. \n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     LT : Less than. \n// \n//  AttributeValueList can contain only one AttributeValue of type String,\n// Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     GE : Greater than or equal. \n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     GT : Greater than. \n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     BEGINS_WITH : Checks for a prefix. \n// \n//  AttributeValueList can contain only one AttributeValue of type String or\n// Binary (not a Number or a set type). The target attribute of the comparison\n// must be of type String or Binary (not a Number or a set type).\n// \n//     BETWEEN : Greater than or equal to the first value, and less than or\n// equal to the second value. \n// \n//  AttributeValueList must contain two AttributeValue elements of the same\n// type, either String, Number, or Binary (not a set type). A target attribute\n// matches if the target value is greater than, or equal to, the first element\n// and less than, or equal to, the second element. If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not compare to {\"N\":\"6\"}. Also,\n// {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} \n// \n//     For usage examples of AttributeValueList and ComparisonOperator, see\n// Legacy Conditional Parameters (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"KeyConditions","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":2},{"Name":"QueryFilter","Ref":{"Documentation":"// This is a legacy parameter, for backward compatibility. New applications\n// should use FilterExpression instead. Do not combine legacy parameters and\n// expression parameters in a single API call; otherwise, DynamoDB will return\n// a ValidationException exception.\n// \n//  A condition that evaluates the query results after the items are read and\n// returns only the desired values.\n// \n// This parameter does not support attributes of type List or Map.\n// \n//  A QueryFilter is applied after the items have already been read; the process\n// of filtering does not consume any additional read capacity units.\n// \n//  If you provide more than one condition in the QueryFilter map, then by\n// default all of the conditions must evaluate to true. In other words, the\n// conditions are ANDed together. (You can use the ConditionalOperator parameter\n// to OR the conditions instead. If you do this, then at least one of the conditions\n// must evaluate to true, rather than all of them.)\n// \n// Note that QueryFilter does not allow key attributes. You cannot define a\n// filter condition on a partition key or a sort key.\n// \n// Each QueryFilter element consists of an attribute name to compare, along\n// with the following:\n// \n//    AttributeValueList - One or more values to evaluate against the supplied\n// attribute. The number of values in the list depends on the operator specified\n// in ComparisonOperator.\n// \n// For type Number, value comparisons are numeric.\n// \n// String value comparisons for greater than, equals, or less than are based\n// on ASCII character code values. For example, a is greater than A, and a is\n// greater than B. For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\n// (http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters).\n// \n// For type Binary, DynamoDB treats each byte of the binary data as unsigned\n// when it compares binary values.\n// \n// For information on specifying data types in JSON, see JSON Data Format (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n//    ComparisonOperator - A comparator for evaluating attributes. For example,\n// equals, greater than, less than, etc.\n// \n// The following comparison operators are available:\n// \n//  EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS\n// | BEGINS_WITH | IN | BETWEEN \n// \n// For complete descriptions of all comparison operators, see the Condition\n// (http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Condition.html)\n// data type.\n","shape":"FilterConditionMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":2}]},"QueryOutput":{"ShapeName":"QueryOutput","Documentation":"// Represents the output of a Query operation.\n","members":{"ConsumedCapacity":{"Documentation":"","shape":"ConsumedCapacity","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Count":{"Documentation":"// The number of items in the response.\n// \n// If you used a QueryFilter in the request, then Count is the number of items\n// returned after the filter was applied, and ScannedCount is the number of\n// matching items before the filter was applied.\n// \n// If you did not use a filter in the request, then Count and ScannedCount\n// are the same.\n","shape":"Integer","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Items":{"Documentation":"// An array of item attributes that match the query criteria. Each element in\n// this array consists of an attribute name and the value for that attribute.\n","shape":"ItemList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"LastEvaluatedKey":{"Documentation":"// The primary key of the item where the operation stopped, inclusive of the\n// previous result set. Use this value to start a new operation, excluding this\n// value in the new request.\n// \n// If LastEvaluatedKey is empty, then the \"last page\" of results has been processed\n// and there is no more data to be retrieved.\n// \n// If LastEvaluatedKey is not empty, it does not necessarily mean that there\n// is more data in the result set. The only way to know when you have reached\n// the end of the result set is when LastEvaluatedKey is empty.\n","shape":"Key","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ScannedCount":{"Documentation":"// The number of items evaluated, before any QueryFilter is applied. A high\n// ScannedCount value with few, or no, Count results indicates an inefficient\n// Query operation. For more information, see Count and ScannedCount (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count)\n// in the Amazon DynamoDB Developer Guide.\n// \n// If you did not use a filter in the request, then ScannedCount is the same\n// as Count.\n","shape":"Integer","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ReturnConsumedCapacity":{"ShapeName":"ReturnConsumedCapacity","Documentation":"// Determines the level of detail about provisioned throughput consumption that\n// is returned in the response:\n// \n//    INDEXES - The response includes the aggregate ConsumedCapacity for the\n// operation, together with ConsumedCapacity for each table and secondary index\n// that was accessed.\n// \n// Note that some operations, such as GetItem and BatchGetItem, do not access\n// any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity\n// information for table(s).\n// \n//    TOTAL - The response includes only the aggregate ConsumedCapacity for\n// the operation.\n// \n//    NONE - No ConsumedCapacity details are included in the response.\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":["INDEXES","TOTAL","NONE"],"EnumConsts":["ReturnConsumedCapacityIndexes","ReturnConsumedCapacityTotal","ReturnConsumedCapacityNone"],"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ReturnItemCollectionMetrics":{"ShapeName":"ReturnItemCollectionMetrics","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":["SIZE","NONE"],"EnumConsts":["ReturnItemCollectionMetricsSize","ReturnItemCollectionMetricsNone"],"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ReturnValue":{"ShapeName":"ReturnValue","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":["NONE","ALL_OLD","UPDATED_OLD","ALL_NEW","UPDATED_NEW"],"EnumConsts":["ReturnValueNone","ReturnValueAllOld","ReturnValueUpdatedOld","ReturnValueAllNew","ReturnValueUpdatedNew"],"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ScalarAttributeType":{"ShapeName":"ScalarAttributeType","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":["S","N","B"],"EnumConsts":["ScalarAttributeTypeS","ScalarAttributeTypeN","ScalarAttributeTypeB"],"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ScanInput":{"ShapeName":"ScanInput","Documentation":"// Represents the input of a Scan operation.\n","members":{"AttributesToGet":{"Documentation":"// This is a legacy parameter, for backward compatibility. New applications\n// should use ProjectionExpression instead. Do not combine legacy parameters\n// and expression parameters in a single API call; otherwise, DynamoDB will\n// return a ValidationException exception.\n// \n// This parameter allows you to retrieve attributes of type List or Map; however,\n// it cannot retrieve individual elements within a List or a Map.\n// \n//  The names of one or more attributes to retrieve. If no attribute names\n// are provided, then all attributes will be returned. If any of the requested\n// attributes are not found, they will not appear in the result.\n// \n// Note that AttributesToGet has no effect on provisioned throughput consumption.\n// DynamoDB determines capacity units consumed based on item size, not on the\n// amount of data that is returned to an application.\n","shape":"AttributeNameList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ConditionalOperator":{"Documentation":"// This is a legacy parameter, for backward compatibility. New applications\n// should use FilterExpression instead. Do not combine legacy parameters and\n// expression parameters in a single API call; otherwise, DynamoDB will return\n// a ValidationException exception.\n// \n//  A logical operator to apply to the conditions in a ScanFilter map:\n// \n//    AND - If all of the conditions evaluate to true, then the entire map\n// evaluates to true.\n// \n//    OR - If at least one of the conditions evaluate to true, then the entire\n// map evaluates to true.\n// \n//   If you omit ConditionalOperator, then AND is the default.\n// \n// The operation will succeed only if the entire map evaluates to true.\n// \n//  This parameter does not support attributes of type List or Map.\n","shape":"ConditionalOperator","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ConsistentRead":{"Documentation":"// A Boolean value that determines the read consistency model during the scan:\n// \n//   If ConsistentRead is false, then the data returned from Scan might not\n// contain the results from other recently completed write operations (PutItem,\n// UpdateItem or DeleteItem).\n// \n//   If ConsistentRead is true, then all of the write operations that completed\n// before the Scan began are guaranteed to be contained in the Scan response.\n// \n//   The default setting for ConsistentRead is false.\n// \n// The ConsistentRead parameter is not supported on global secondary indexes.\n// If you scan a global secondary index with ConsistentRead set to true, you\n// will receive a ValidationException.\n","shape":"ConsistentRead","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ExclusiveStartKey":{"Documentation":"// The primary key of the first item that this operation will evaluate. Use\n// the value that was returned for LastEvaluatedKey in the previous operation.\n// \n// The data type for ExclusiveStartKey must be String, Number or Binary. No\n// set data types are allowed.\n// \n// In a parallel scan, a Scan request that includes ExclusiveStartKey must\n// specify the same segment whose previous Scan returned the corresponding value\n// of LastEvaluatedKey.\n","shape":"Key","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ExpressionAttributeNames":{"Documentation":"// One or more substitution tokens for attribute names in an expression. The\n// following are some use cases for using ExpressionAttributeNames:\n// \n//   To access an attribute whose name conflicts with a DynamoDB reserved word.\n// \n//   To create a placeholder for repeating occurrences of an attribute name\n// in an expression.\n// \n//   To prevent special characters in an attribute name from being misinterpreted\n// in an expression.\n// \n//   Use the # character in an expression to dereference an attribute name.\n// For example, consider the following attribute name:\n// \n//    Percentile \n// \n//   The name of this attribute conflicts with a reserved word, so it cannot\n// be used directly in an expression. (For the complete list of reserved words,\n// see Reserved Words (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html)\n// in the Amazon DynamoDB Developer Guide). To work around this, you could specify\n// the following for ExpressionAttributeNames:\n// \n//    {\"#P\":\"Percentile\"} \n// \n//   You could then use this substitution in an expression, as in this example:\n// \n//    #P = :val \n// \n//    Tokens that begin with the : character are expression attribute values,\n// which are placeholders for the actual value at runtime.\n// \n//  For more information on expression attribute names, see Accessing Item\n// Attributes (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"ExpressionAttributeNameMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ExpressionAttributeValues":{"Documentation":"// One or more values that can be substituted in an expression.\n// \n// Use the : (colon) character in an expression to dereference an attribute\n// value. For example, suppose that you wanted to check whether the value of\n// the ProductStatus attribute was one of the following: \n// \n//  Available | Backordered | Discontinued \n// \n// You would first need to specify ExpressionAttributeValues as follows:\n// \n//  { \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"}, \":disc\":{\"S\":\"Discontinued\"}\n// } \n// \n// You could then use these values in an expression, such as this:\n// \n//  ProductStatus IN (:avail, :back, :disc) \n// \n// For more information on expression attribute values, see Specifying Conditions\n// (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"ExpressionAttributeValueMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"FilterExpression":{"Documentation":"// A string that contains conditions that DynamoDB applies after the Scan operation,\n// but before the data is returned to you. Items that do not satisfy the FilterExpression\n// criteria are not returned.\n// \n//  A FilterExpression is applied after the items have already been read; the\n// process of filtering does not consume any additional read capacity units.\n// \n//  For more information, see Filter Expressions (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#FilteringResults)\n// in the Amazon DynamoDB Developer Guide.\n// \n//   FilterExpression replaces the legacy ScanFilter and ConditionalOperator\n// parameters.\n","shape":"ConditionExpression","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"IndexName":{"Documentation":"// The name of a secondary index to scan. This index can be any local secondary\n// index or global secondary index. Note that if you use the IndexName parameter,\n// you must also provide TableName.\n","shape":"IndexName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Limit":{"Documentation":"// The maximum number of items to evaluate (not necessarily the number of matching\n// items). If DynamoDB processes the number of items up to the limit while processing\n// the results, it stops the operation and returns the matching values up to\n// that point, and a key in LastEvaluatedKey to apply in a subsequent operation,\n// so that you can pick up where you left off. Also, if the processed data set\n// size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation\n// and returns the matching values up to the limit, and a key in LastEvaluatedKey\n// to apply in a subsequent operation to continue the operation. For more information,\n// see Query and Scan (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"PositiveIntegerObject","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ProjectionExpression":{"Documentation":"// A string that identifies one or more attributes to retrieve from the specified\n// table or index. These attributes can include scalars, sets, or elements of\n// a JSON document. The attributes in the expression must be separated by commas.\n// \n// If no attribute names are specified, then all attributes will be returned.\n// If any of the requested attributes are not found, they will not appear in\n// the result.\n// \n// For more information, see Accessing Item Attributes (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n//   ProjectionExpression replaces the legacy AttributesToGet parameter.\n","shape":"ProjectionExpression","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ReturnConsumedCapacity":{"Documentation":"","shape":"ReturnConsumedCapacity","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ScanFilter":{"Documentation":"// This is a legacy parameter, for backward compatibility. New applications\n// should use FilterExpression instead. Do not combine legacy parameters and\n// expression parameters in a single API call; otherwise, DynamoDB will return\n// a ValidationException exception.\n// \n//  A condition that evaluates the scan results and returns only the desired\n// values.\n// \n//  This parameter does not support attributes of type List or Map.\n// \n//  If you specify more than one condition in the ScanFilter map, then by default\n// all of the conditions must evaluate to true. In other words, the conditions\n// are ANDed together. (You can use the ConditionalOperator parameter to OR\n// the conditions instead. If you do this, then at least one of the conditions\n// must evaluate to true, rather than all of them.)\n// \n// Each ScanFilter element consists of an attribute name to compare, along\n// with the following:\n// \n//    AttributeValueList - One or more values to evaluate against the supplied\n// attribute. The number of values in the list depends on the operator specified\n// in ComparisonOperator .\n// \n// For type Number, value comparisons are numeric.\n// \n// String value comparisons for greater than, equals, or less than are based\n// on ASCII character code values. For example, a is greater than A, and a is\n// greater than B. For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\n// (http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters).\n// \n// For Binary, DynamoDB treats each byte of the binary data as unsigned when\n// it compares binary values.\n// \n// For information on specifying data types in JSON, see JSON Data Format (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n//    ComparisonOperator - A comparator for evaluating attributes. For example,\n// equals, greater than, less than, etc.\n// \n// The following comparison operators are available:\n// \n//  EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS\n// | BEGINS_WITH | IN | BETWEEN \n// \n// For complete descriptions of all comparison operators, see Condition (http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Condition.html).\n","shape":"FilterConditionMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Segment":{"Documentation":"// For a parallel Scan request, Segment identifies an individual segment to\n// be scanned by an application worker.\n// \n// Segment IDs are zero-based, so the first segment is always 0. For example,\n// if you want to use four application threads to scan a table or an index,\n// then the first thread specifies a Segment value of 0, the second thread specifies\n// 1, and so on.\n// \n// The value of LastEvaluatedKey returned from a parallel Scan request must\n// be used as ExclusiveStartKey with the same segment ID in a subsequent Scan\n// operation.\n// \n// The value for Segment must be greater than or equal to 0, and less than\n// the value provided for TotalSegments.\n// \n// If you provide Segment, you must also provide TotalSegments.\n","shape":"ScanSegment","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Select":{"Documentation":"// The attributes to be returned in the result. You can retrieve all item attributes,\n// specific item attributes, or the count of matching items.\n// \n//    ALL_ATTRIBUTES - Returns all of the item attributes.\n// \n//    ALL_PROJECTED_ATTRIBUTES - Allowed only when querying an index. Retrieves\n// all attributes that have been projected into the index. If the index is configured\n// to project all attributes, this return value is equivalent to specifying\n// ALL_ATTRIBUTES.\n// \n//    COUNT - Returns the number of matching items, rather than the matching\n// items themselves.\n// \n//    SPECIFIC_ATTRIBUTES - Returns only the attributes listed in AttributesToGet.\n// This return value is equivalent to specifying AttributesToGet without specifying\n// any value for Select.\n// \n//   If neither Select nor AttributesToGet are specified, DynamoDB defaults\n// to ALL_ATTRIBUTES. You cannot use both AttributesToGet and Select together\n// in a single request, unless the value for Select is SPECIFIC_ATTRIBUTES.\n// (This usage is equivalent to specifying AttributesToGet without any value\n// for Select.)\n","shape":"Select","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"TableName":{"Documentation":"// The name of the table containing the requested items; or, if you provide\n// IndexName, the name of the table to which that index belongs.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"TotalSegments":{"Documentation":"// For a parallel Scan request, TotalSegments represents the total number of\n// segments into which the Scan operation will be divided. The value of TotalSegments\n// corresponds to the number of application workers that will perform the parallel\n// scan. For example, if you want to use four application threads to scan a\n// table or an index, specify a TotalSegments value of 4.\n// \n// The value for TotalSegments must be greater than or equal to 1, and less\n// than or equal to 1000000. If you specify a TotalSegments value of 1, the\n// Scan operation will be sequential rather than parallel.\n// \n// If you specify TotalSegments, you must also specify Segment.\n","shape":"ScanTotalSegments","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":["TableName"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"AttributesToGet","Ref":{"Documentation":"// This is a legacy parameter, for backward compatibility. New applications\n// should use ProjectionExpression instead. Do not combine legacy parameters\n// and expression parameters in a single API call; otherwise, DynamoDB will\n// return a ValidationException exception.\n// \n// This parameter allows you to retrieve attributes of type List or Map; however,\n// it cannot retrieve individual elements within a List or a Map.\n// \n//  The names of one or more attributes to retrieve. If no attribute names\n// are provided, then all attributes will be returned. If any of the requested\n// attributes are not found, they will not appear in the result.\n// \n// Note that AttributesToGet has no effect on provisioned throughput consumption.\n// DynamoDB determines capacity units consumed based on item size, not on the\n// amount of data that is returned to an application.\n","shape":"AttributeNameList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"IndexName","Ref":{"Documentation":"// The name of a secondary index to scan. This index can be any local secondary\n// index or global secondary index. Note that if you use the IndexName parameter,\n// you must also provide TableName.\n","shape":"IndexName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"Limit","Ref":{"Documentation":"// The maximum number of items to evaluate (not necessarily the number of matching\n// items). If DynamoDB processes the number of items up to the limit while processing\n// the results, it stops the operation and returns the matching values up to\n// that point, and a key in LastEvaluatedKey to apply in a subsequent operation,\n// so that you can pick up where you left off. Also, if the processed data set\n// size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation\n// and returns the matching values up to the limit, and a key in LastEvaluatedKey\n// to apply in a subsequent operation to continue the operation. For more information,\n// see Query and Scan (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"PositiveIntegerObject","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"TableName","Ref":{"Documentation":"// The name of the table containing the requested items; or, if you provide\n// IndexName, the name of the table to which that index belongs.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"TableName","Ref":{"Documentation":"// The name of the table containing the requested items; or, if you provide\n// IndexName, the name of the table to which that index belongs.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"TotalSegments","Ref":{"Documentation":"// For a parallel Scan request, TotalSegments represents the total number of\n// segments into which the Scan operation will be divided. The value of TotalSegments\n// corresponds to the number of application workers that will perform the parallel\n// scan. For example, if you want to use four application threads to scan a\n// table or an index, specify a TotalSegments value of 4.\n// \n// The value for TotalSegments must be greater than or equal to 1, and less\n// than or equal to 1000000. If you specify a TotalSegments value of 1, the\n// Scan operation will be sequential rather than parallel.\n// \n// If you specify TotalSegments, you must also specify Segment.\n","shape":"ScanTotalSegments","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"ScanFilter","Ref":{"Documentation":"// This is a legacy parameter, for backward compatibility. New applications\n// should use FilterExpression instead. Do not combine legacy parameters and\n// expression parameters in a single API call; otherwise, DynamoDB will return\n// a ValidationException exception.\n// \n//  A condition that evaluates the scan results and returns only the desired\n// values.\n// \n//  This parameter does not support attributes of type List or Map.\n// \n//  If you specify more than one condition in the ScanFilter map, then by default\n// all of the conditions must evaluate to true. In other words, the conditions\n// are ANDed together. (You can use the ConditionalOperator parameter to OR\n// the conditions instead. If you do this, then at least one of the conditions\n// must evaluate to true, rather than all of them.)\n// \n// Each ScanFilter element consists of an attribute name to compare, along\n// with the following:\n// \n//    AttributeValueList - One or more values to evaluate against the supplied\n// attribute. The number of values in the list depends on the operator specified\n// in ComparisonOperator .\n// \n// For type Number, value comparisons are numeric.\n// \n// String value comparisons for greater than, equals, or less than are based\n// on ASCII character code values. For example, a is greater than A, and a is\n// greater than B. For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\n// (http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters).\n// \n// For Binary, DynamoDB treats each byte of the binary data as unsigned when\n// it compares binary values.\n// \n// For information on specifying data types in JSON, see JSON Data Format (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n//    ComparisonOperator - A comparator for evaluating attributes. For example,\n// equals, greater than, less than, etc.\n// \n// The following comparison operators are available:\n// \n//  EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS\n// | BEGINS_WITH | IN | BETWEEN \n// \n// For complete descriptions of all comparison operators, see Condition (http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Condition.html).\n","shape":"FilterConditionMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":2}]},"ScanOutput":{"ShapeName":"ScanOutput","Documentation":"// Represents the output of a Scan operation.\n","members":{"ConsumedCapacity":{"Documentation":"","shape":"ConsumedCapacity","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Count":{"Documentation":"// The number of items in the response.\n// \n// If you set ScanFilter in the request, then Count is the number of items\n// returned after the filter was applied, and ScannedCount is the number of\n// matching items before the filter was applied.\n// \n// If you did not use a filter in the request, then Count is the same as ScannedCount.\n","shape":"Integer","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Items":{"Documentation":"// An array of item attributes that match the scan criteria. Each element in\n// this array consists of an attribute name and the value for that attribute.\n","shape":"ItemList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"LastEvaluatedKey":{"Documentation":"// The primary key of the item where the operation stopped, inclusive of the\n// previous result set. Use this value to start a new operation, excluding this\n// value in the new request.\n// \n// If LastEvaluatedKey is empty, then the \"last page\" of results has been processed\n// and there is no more data to be retrieved.\n// \n// If LastEvaluatedKey is not empty, it does not necessarily mean that there\n// is more data in the result set. The only way to know when you have reached\n// the end of the result set is when LastEvaluatedKey is empty.\n","shape":"Key","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ScannedCount":{"Documentation":"// The number of items evaluated, before any ScanFilter is applied. A high ScannedCount\n// value with few, or no, Count results indicates an inefficient Scan operation.\n// For more information, see Count and ScannedCount (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count)\n// in the Amazon DynamoDB Developer Guide.\n// \n// If you did not use a filter in the request, then ScannedCount is the same\n// as Count.\n","shape":"Integer","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"ScanSegment":{"ShapeName":"ScanSegment","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"integer","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":999999,"Placeholder":false,"deprecated":false,"Validations":null},"ScanTotalSegments":{"ShapeName":"ScanTotalSegments","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"integer","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":1,"Max":1e+06,"Placeholder":false,"deprecated":false,"Validations":null},"SecondaryIndexesCapacityMap":{"ShapeName":"SecondaryIndexesCapacityMap","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"IndexName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"Capacity","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"map","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"Select":{"ShapeName":"Select","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":["ALL_ATTRIBUTES","ALL_PROJECTED_ATTRIBUTES","SPECIFIC_ATTRIBUTES","COUNT"],"EnumConsts":["SelectAllAttributes","SelectAllProjectedAttributes","SelectSpecificAttributes","SelectCount"],"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"StreamArn":{"ShapeName":"StreamArn","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":37,"Max":1024,"Placeholder":false,"deprecated":false,"Validations":null},"StreamEnabled":{"ShapeName":"StreamEnabled","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"boolean","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"StreamSpecification":{"ShapeName":"StreamSpecification","Documentation":"// Represents the DynamoDB Streams configuration for a table in DynamoDB.\n","members":{"StreamEnabled":{"Documentation":"// Indicates whether DynamoDB Streams is enabled (true) or disabled (false)\n// on the table.\n","shape":"StreamEnabled","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"StreamViewType":{"Documentation":"// The DynamoDB Streams settings for the table. These settings consist of:\n// \n//    StreamEnabled - Indicates whether DynamoDB Streams is enabled (true)\n// or disabled (false) on the table.\n// \n//    StreamViewType - When an item in the table is modified, StreamViewType\n// determines what information is written to the stream for this table. Valid\n// values for StreamViewType are:\n// \n//    KEYS_ONLY - Only the key attributes of the modified item are written\n// to the stream.\n// \n//    NEW_IMAGE - The entire item, as it appears after it was modified, is\n// written to the stream.\n// \n//    OLD_IMAGE - The entire item, as it appeared before it was modified, is\n// written to the stream.\n// \n//    NEW_AND_OLD_IMAGES - Both the new and the old item images of the item\n// are written to the stream.\n","shape":"StreamViewType","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"StreamViewType":{"ShapeName":"StreamViewType","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":["NEW_IMAGE","OLD_IMAGE","NEW_AND_OLD_IMAGES","KEYS_ONLY"],"EnumConsts":["StreamViewTypeNewImage","StreamViewTypeOldImage","StreamViewTypeNewAndOldImages","StreamViewTypeKeysOnly"],"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"String":{"ShapeName":"String","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"StringAttributeValue":{"ShapeName":"StringAttributeValue","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"StringSetAttributeValue":{"ShapeName":"StringSetAttributeValue","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"StringAttributeValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"list","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"TableDescription":{"ShapeName":"TableDescription","Documentation":"// Represents the properties of a table.\n","members":{"AttributeDefinitions":{"Documentation":"// An array of AttributeDefinition objects. Each of these objects describes\n// one attribute in the table and index key schema.\n// \n// Each AttributeDefinition object in this array is composed of:\n// \n//    AttributeName - The name of the attribute.\n// \n//    AttributeType - The data type for the attribute.\n","shape":"AttributeDefinitions","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"CreationDateTime":{"Documentation":"// The date and time when the table was created, in UNIX epoch time (http://www.epochconverter.com/)\n// format.\n","shape":"Date","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"GlobalSecondaryIndexes":{"Documentation":"// The global secondary indexes, if any, on the table. Each index is scoped\n// to a given partition key value. Each element is composed of:\n// \n//    Backfilling - If true, then the index is currently in the backfilling\n// phase. Backfilling occurs only when a new global secondary index is added\n// to the table; it is the process by which DynamoDB populates the new index\n// with data from the table. (This attribute does not appear for indexes that\n// were created during a CreateTable operation.)\n// \n//    IndexName - The name of the global secondary index.\n// \n//    IndexSizeBytes - The total size of the global secondary index, in bytes.\n// DynamoDB updates this value approximately every six hours. Recent changes\n// might not be reflected in this value. \n// \n//    IndexStatus - The current status of the global secondary index:\n// \n//    CREATING - The index is being created.\n// \n//    UPDATING - The index is being updated.\n// \n//    DELETING - The index is being deleted.\n// \n//    ACTIVE - The index is ready for use.\n// \n//      ItemCount - The number of items in the global secondary index. DynamoDB\n// updates this value approximately every six hours. Recent changes might not\n// be reflected in this value. \n// \n//    KeySchema - Specifies the complete index key schema. The attribute names\n// in the key schema must be between 1 and 255 characters (inclusive). The key\n// schema must begin with the same partition key as the table.\n// \n//    Projection - Specifies attributes that are copied (projected) from the\n// table into the index. These are in addition to the primary key attributes\n// and index key attributes, which are automatically projected. Each attribute\n// specification is composed of:\n// \n//    ProjectionType - One of the following:\n// \n//    KEYS_ONLY - Only the index and primary keys are projected into the index.\n// \n//    INCLUDE - Only the specified table attributes are projected into the\n// index. The list of projected attributes are in NonKeyAttributes.\n// \n//    ALL - All of the table attributes are projected into the index.\n// \n//      NonKeyAttributes - A list of one or more non-key attribute names that\n// are projected into the secondary index. The total count of attributes provided\n// in NonKeyAttributes, summed across all of the secondary indexes, must not\n// exceed 20. If you project the same attribute into two different indexes,\n// this counts as two distinct attributes when determining the total.\n// \n//      ProvisionedThroughput - The provisioned throughput settings for the\n// global secondary index, consisting of read and write capacity units, along\n// with data about increases and decreases. \n// \n//   If the table is in the DELETING state, no information about indexes will\n// be returned.\n","shape":"GlobalSecondaryIndexDescriptionList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ItemCount":{"Documentation":"// The number of items in the specified table. DynamoDB updates this value approximately\n// every six hours. Recent changes might not be reflected in this value.\n","shape":"Long","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"KeySchema":{"Documentation":"// The primary key structure for the table. Each KeySchemaElement consists of:\n// \n//    AttributeName - The name of the attribute.\n// \n//    KeyType - The role of the attribute:\n// \n//    HASH - partition key\n// \n//    RANGE - sort key\n// \n//    The partition key of an item is also known as its hash attribute. The\n// term \"hash attribute\" derives from DynamoDB' usage of an internal hash function\n// to evenly distribute data items across partitions, based on their partition\n// key values.\n// \n// The sort key of an item is also known as its range attribute. The term \"range\n// attribute\" derives from the way DynamoDB stores items with the same partition\n// key physically close together, in sorted order by the sort key value.\n// \n//    For more information about primary keys, see Primary Key (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"KeySchema","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"LatestStreamArn":{"Documentation":"// The Amazon Resource Name (ARN) that uniquely identifies the latest stream\n// for this table.\n","shape":"StreamArn","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"LatestStreamLabel":{"Documentation":"// A timestamp, in ISO 8601 format, for this stream.\n// \n// Note that LatestStreamLabel is not a unique identifier for the stream, because\n// it is possible that a stream from another table might have the same timestamp.\n// However, the combination of the following three elements is guaranteed to\n// be unique:\n// \n//   the AWS customer ID.\n// \n//   the table name.\n// \n//   the StreamLabel.\n","shape":"String","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"LocalSecondaryIndexes":{"Documentation":"// Represents one or more local secondary indexes on the table. Each index is\n// scoped to a given partition key value. Tables with one or more local secondary\n// indexes are subject to an item collection size limit, where the amount of\n// data within a given item collection cannot exceed 10 GB. Each element is\n// composed of:\n// \n//    IndexName - The name of the local secondary index.\n// \n//    KeySchema - Specifies the complete index key schema. The attribute names\n// in the key schema must be between 1 and 255 characters (inclusive). The key\n// schema must begin with the same partition key as the table.\n// \n//    Projection - Specifies attributes that are copied (projected) from the\n// table into the index. These are in addition to the primary key attributes\n// and index key attributes, which are automatically projected. Each attribute\n// specification is composed of:\n// \n//    ProjectionType - One of the following:\n// \n//    KEYS_ONLY - Only the index and primary keys are projected into the index.\n// \n//    INCLUDE - Only the specified table attributes are projected into the\n// index. The list of projected attributes are in NonKeyAttributes.\n// \n//    ALL - All of the table attributes are projected into the index.\n// \n//      NonKeyAttributes - A list of one or more non-key attribute names that\n// are projected into the secondary index. The total count of attributes provided\n// in NonKeyAttributes, summed across all of the secondary indexes, must not\n// exceed 20. If you project the same attribute into two different indexes,\n// this counts as two distinct attributes when determining the total.\n// \n//      IndexSizeBytes - Represents the total size of the index, in bytes.\n// DynamoDB updates this value approximately every six hours. Recent changes\n// might not be reflected in this value.\n// \n//    ItemCount - Represents the number of items in the index. DynamoDB updates\n// this value approximately every six hours. Recent changes might not be reflected\n// in this value.\n// \n//   If the table is in the DELETING state, no information about indexes will\n// be returned.\n","shape":"LocalSecondaryIndexDescriptionList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ProvisionedThroughput":{"Documentation":"// The provisioned throughput settings for the table, consisting of read and\n// write capacity units, along with data about increases and decreases.\n","shape":"ProvisionedThroughputDescription","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"StreamSpecification":{"Documentation":"// The current DynamoDB Streams configuration for the table.\n","shape":"StreamSpecification","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"TableArn":{"Documentation":"// The Amazon Resource Name (ARN) that uniquely identifies the table.\n","shape":"String","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"TableName":{"Documentation":"// The name of the table.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"TableSizeBytes":{"Documentation":"// The total size of the specified table, in bytes. DynamoDB updates this value\n// approximately every six hours. Recent changes might not be reflected in this\n// value.\n","shape":"Long","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"TableStatus":{"Documentation":"// The current state of the table:\n// \n//    CREATING - The table is being created.\n// \n//    UPDATING - The table is being updated.\n// \n//    DELETING - The table is being deleted.\n// \n//    ACTIVE - The table is ready for use.\n","shape":"TableStatus","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"TableName":{"ShapeName":"TableName","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":3,"Max":255,"Placeholder":false,"deprecated":false,"Validations":null},"TableNameList":{"ShapeName":"TableNameList","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"list","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"TableStatus":{"ShapeName":"TableStatus","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":["CREATING","UPDATING","DELETING","ACTIVE"],"EnumConsts":["TableStatusCreating","TableStatusUpdating","TableStatusDeleting","TableStatusActive"],"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"UpdateExpression":{"ShapeName":"UpdateExpression","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"string","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"UpdateGlobalSecondaryIndexAction":{"ShapeName":"UpdateGlobalSecondaryIndexAction","Documentation":"// Represents the new provisioned throughput settings to be applied to a global\n// secondary index.\n","members":{"IndexName":{"Documentation":"// The name of the global secondary index to be updated.\n","shape":"IndexName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ProvisionedThroughput":{"Documentation":"","shape":"ProvisionedThroughput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":["IndexName","ProvisionedThroughput"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"IndexName","Ref":{"Documentation":"// The name of the global secondary index to be updated.\n","shape":"IndexName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"IndexName","Ref":{"Documentation":"// The name of the global secondary index to be updated.\n","shape":"IndexName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"ProvisionedThroughput","Ref":{"Documentation":"","shape":"ProvisionedThroughput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"ProvisionedThroughput","Ref":{"Documentation":"","shape":"ProvisionedThroughput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":2}]},"UpdateItemInput":{"ShapeName":"UpdateItemInput","Documentation":"// Represents the input of an UpdateItem operation.\n","members":{"AttributeUpdates":{"Documentation":"// This is a legacy parameter, for backward compatibility. New applications\n// should use UpdateExpression instead. Do not combine legacy parameters and\n// expression parameters in a single API call; otherwise, DynamoDB will return\n// a ValidationException exception.\n// \n// This parameter can be used for modifying top-level attributes; however,\n// it does not support individual list or map elements.\n// \n//  The names of attributes to be modified, the action to perform on each,\n// and the new value for each. If you are updating an attribute that is an index\n// key attribute for any indexes on that table, the attribute type must match\n// the index key type defined in the AttributesDefinition of the table description.\n// You can use UpdateItem to update any non-key attributes.\n// \n// Attribute values cannot be null. String and Binary type attributes must\n// have lengths greater than zero. Set type attributes must not be empty. Requests\n// with empty values will be rejected with a ValidationException exception.\n// \n// Each AttributeUpdates element consists of an attribute name to modify, along\n// with the following:\n// \n//    Value - The new value, if applicable, for this attribute.\n// \n//    Action - A value that specifies how to perform the update. This action\n// is only valid for an existing attribute whose data type is Number or is a\n// set; do not use ADD for other data types. \n// \n// If an item with the specified primary key is found in the table, the following\n// values perform the following actions:\n// \n//    PUT - Adds the specified attribute to the item. If the attribute already\n// exists, it is replaced by the new value. \n// \n//    DELETE - Removes the attribute and its value, if no value is specified\n// for DELETE. The data type of the specified value must match the existing\n// value's data type.\n// \n// If a set of values is specified, then those values are subtracted from the\n// old set. For example, if the attribute value was the set [a,b,c] and the\n// DELETE action specifies [a,c], then the final attribute value is [b]. Specifying\n// an empty set is an error.\n// \n//    ADD - Adds the specified value to the item, if the attribute does not\n// already exist. If the attribute does exist, then the behavior of ADD depends\n// on the data type of the attribute:\n// \n//   If the existing attribute is a number, and if Value is also a number,\n// then Value is mathematically added to the existing attribute. If Value is\n// a negative number, then it is subtracted from the existing attribute.\n// \n//  If you use ADD to increment or decrement a number value for an item that\n// doesn't exist before the update, DynamoDB uses 0 as the initial value.\n// \n// Similarly, if you use ADD for an existing item to increment or decrement\n// an attribute value that doesn't exist before the update, DynamoDB uses 0\n// as the initial value. For example, suppose that the item you want to update\n// doesn't have an attribute named itemcount, but you decide to ADD the number\n// 3 to this attribute anyway. DynamoDB will create the itemcount attribute,\n// set its initial value to 0, and finally add 3 to it. The result will be a\n// new itemcount attribute, with a value of 3.\n// \n//    If the existing data type is a set, and if Value is also a set, then\n// Value is appended to the existing set. For example, if the attribute value\n// is the set [1,2], and the ADD action specified [3], then the final attribute\n// value is [1,2,3]. An error occurs if an ADD action is specified for a set\n// attribute and the attribute type specified does not match the existing set\n// type. \n// \n// Both sets must have the same primitive data type. For example, if the existing\n// data type is a set of strings, Value must also be a set of strings.\n// \n//     If no item with the specified key is found in the table, the following\n// values perform the following actions:\n// \n//    PUT - Causes DynamoDB to create a new item with the specified primary\n// key, and then adds the attribute. \n// \n//    DELETE - Nothing happens, because attributes cannot be deleted from a\n// nonexistent item. The operation succeeds, but DynamoDB does not create a\n// new item.\n// \n//    ADD - Causes DynamoDB to create an item with the supplied primary key\n// and number (or set of numbers) for the attribute value. The only data types\n// allowed are Number and Number Set.\n// \n//     If you provide any attributes that are part of an index key, then the\n// data types for those attributes must match those of the schema in the table's\n// attribute definition.\n","shape":"AttributeUpdates","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ConditionExpression":{"Documentation":"// A condition that must be satisfied in order for a conditional update to succeed.\n// \n// An expression can contain any of the following:\n// \n//   Functions: attribute_exists | attribute_not_exists | attribute_type |\n// contains | begins_with | size \n// \n// These function names are case-sensitive.\n// \n//   Comparison operators:  = | \u0026#x3C;\u0026#x3E; | \u0026#x3C; | \u0026#x3E; | \u0026#x3C;= |\n// \u0026#x3E;= | BETWEEN | IN \n// \n//    Logical operators: AND | OR | NOT \n// \n//   For more information on condition expressions, see Specifying Conditions\n// (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n//   ConditionExpression replaces the legacy ConditionalOperator and Expected\n// parameters.\n","shape":"ConditionExpression","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ConditionalOperator":{"Documentation":"// This is a legacy parameter, for backward compatibility. New applications\n// should use ConditionExpression instead. Do not combine legacy parameters\n// and expression parameters in a single API call; otherwise, DynamoDB will\n// return a ValidationException exception.\n// \n//  A logical operator to apply to the conditions in the Expected map:\n// \n//    AND - If all of the conditions evaluate to true, then the entire map\n// evaluates to true.\n// \n//    OR - If at least one of the conditions evaluate to true, then the entire\n// map evaluates to true.\n// \n//   If you omit ConditionalOperator, then AND is the default.\n// \n// The operation will succeed only if the entire map evaluates to true.\n// \n//  This parameter does not support attributes of type List or Map.\n","shape":"ConditionalOperator","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Expected":{"Documentation":"// This is a legacy parameter, for backward compatibility. New applications\n// should use  ConditionExpression  instead. Do not combine legacy parameters\n// and expression parameters in a single API call; otherwise, DynamoDB will\n// return a ValidationException exception.\n// \n//  A map of attribute/condition pairs. Expected provides a conditional block\n// for the UpdateItem operation.\n// \n// Each element of Expected consists of an attribute name, a comparison operator,\n// and one or more values. DynamoDB compares the attribute with the value(s)\n// you supplied, using the comparison operator. For each Expected element, the\n// result of the evaluation is either true or false.\n// \n// If you specify more than one element in the Expected map, then by default\n// all of the conditions must evaluate to true. In other words, the conditions\n// are ANDed together. (You can use the ConditionalOperator parameter to OR\n// the conditions instead. If you do this, then at least one of the conditions\n// must evaluate to true, rather than all of them.)\n// \n// If the Expected map evaluates to true, then the conditional operation succeeds;\n// otherwise, it fails.\n// \n//  Expected contains the following:\n// \n//    AttributeValueList - One or more values to evaluate against the supplied\n// attribute. The number of values in the list depends on the ComparisonOperator\n// being used.\n// \n// For type Number, value comparisons are numeric.\n// \n// String value comparisons for greater than, equals, or less than are based\n// on ASCII character code values. For example, a is greater than A, and a is\n// greater than B. For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\n// (http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters).\n// \n// For type Binary, DynamoDB treats each byte of the binary data as unsigned\n// when it compares binary values.\n// \n//    ComparisonOperator - A comparator for evaluating attributes in the AttributeValueList.\n// When performing the comparison, DynamoDB uses strongly consistent reads.\n// \n// The following comparison operators are available:\n// \n//  EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS\n// | BEGINS_WITH | IN | BETWEEN \n// \n// The following are descriptions of each comparison operator.\n// \n//    EQ : Equal. EQ is supported for all datatypes, including lists and maps.\n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, Binary, String Set, Number Set, or Binary Set. If an item\n// contains an AttributeValue element of a different type than the one provided\n// in the request, the value does not match. For example, {\"S\":\"6\"} does not\n// equal {\"N\":\"6\"}. Also, {\"N\":\"6\"} does not equal {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     NE : Not equal. NE is supported for all datatypes, including lists and\n// maps.\n// \n//  AttributeValueList can contain only one AttributeValue of type String,\n// Number, Binary, String Set, Number Set, or Binary Set. If an item contains\n// an AttributeValue of a different type than the one provided in the request,\n// the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}.\n// Also, {\"N\":\"6\"} does not equal {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     LE : Less than or equal. \n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     LT : Less than. \n// \n//  AttributeValueList can contain only one AttributeValue of type String,\n// Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     GE : Greater than or equal. \n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     GT : Greater than. \n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"}. Also, {\"N\":\"6\"}\n// does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}.\n// \n//     NOT_NULL : The attribute exists. NOT_NULL is supported for all datatypes,\n// including lists and maps.\n// \n//  This operator tests for the existence of an attribute, not its data type.\n// If the data type of attribute \"a\" is null, and you evaluate it using NOT_NULL,\n// the result is a Boolean true. This result is because the attribute \"a\" exists;\n// its data type is not relevant to the NOT_NULL comparison operator.\n// \n//     NULL : The attribute does not exist. NULL is supported for all datatypes,\n// including lists and maps.\n// \n//  This operator tests for the nonexistence of an attribute, not its data\n// type. If the data type of attribute \"a\" is null, and you evaluate it using\n// NULL, the result is a Boolean false. This is because the attribute \"a\" exists;\n// its data type is not relevant to the NULL comparison operator.\n// \n//     CONTAINS : Checks for a subsequence, or value in a set.\n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If the target attribute of the\n// comparison is of type String, then the operator checks for a substring match.\n// If the target attribute of the comparison is of type Binary, then the operator\n// looks for a subsequence of the target that matches the input. If the target\n// attribute of the comparison is a set (\"SS\", \"NS\", or \"BS\"), then the operator\n// evaluates to true if it finds an exact match with any member of the set.\n// \n// CONTAINS is supported for lists: When evaluating \"a CONTAINS b\", \"a\" can\n// be a list; however, \"b\" cannot be a set, a map, or a list.\n// \n//    NOT_CONTAINS : Checks for absence of a subsequence, or absence of a value\n// in a set.\n// \n//  AttributeValueList can contain only one AttributeValue element of type\n// String, Number, or Binary (not a set type). If the target attribute of the\n// comparison is a String, then the operator checks for the absence of a substring\n// match. If the target attribute of the comparison is Binary, then the operator\n// checks for the absence of a subsequence of the target that matches the input.\n// If the target attribute of the comparison is a set (\"SS\", \"NS\", or \"BS\"),\n// then the operator evaluates to true if it does not find an exact match with\n// any member of the set.\n// \n// NOT_CONTAINS is supported for lists: When evaluating \"a NOT CONTAINS b\",\n// \"a\" can be a list; however, \"b\" cannot be a set, a map, or a list.\n// \n//    BEGINS_WITH : Checks for a prefix. \n// \n//  AttributeValueList can contain only one AttributeValue of type String or\n// Binary (not a Number or a set type). The target attribute of the comparison\n// must be of type String or Binary (not a Number or a set type).\n// \n//     IN : Checks for matching elements within two sets.\n// \n//  AttributeValueList can contain one or more AttributeValue elements of type\n// String, Number, or Binary (not a set type). These attributes are compared\n// against an existing set type attribute of an item. If any elements of the\n// input set are present in the item attribute, the expression evaluates to\n// true.\n// \n//    BETWEEN : Greater than or equal to the first value, and less than or\n// equal to the second value. \n// \n//  AttributeValueList must contain two AttributeValue elements of the same\n// type, either String, Number, or Binary (not a set type). A target attribute\n// matches if the target value is greater than, or equal to, the first element\n// and less than, or equal to, the second element. If an item contains an AttributeValue\n// element of a different type than the one provided in the request, the value\n// does not match. For example, {\"S\":\"6\"} does not compare to {\"N\":\"6\"}. Also,\n// {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} \n// \n//     For usage examples of AttributeValueList and ComparisonOperator, see\n// Legacy Conditional Parameters (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n// For backward compatibility with previous DynamoDB releases, the following\n// parameters can be used instead of AttributeValueList and ComparisonOperator:\n// \n//    Value - A value for DynamoDB to compare with an attribute.\n// \n//    Exists - A Boolean value that causes DynamoDB to evaluate the value before\n// attempting the conditional operation:\n// \n//   If Exists is true, DynamoDB will check to see if that attribute value\n// already exists in the table. If it is found, then the condition evaluates\n// to true; otherwise the condition evaluate to false.\n// \n//   If Exists is false, DynamoDB assumes that the attribute value does not\n// exist in the table. If in fact the value does not exist, then the assumption\n// is valid and the condition evaluates to true. If the value is found, despite\n// the assumption that it does not exist, the condition evaluates to false.\n// \n//   Note that the default value for Exists is true.\n// \n//   The Value and Exists parameters are incompatible with AttributeValueList\n// and ComparisonOperator. Note that if you use both sets of parameters at once,\n// DynamoDB will return a ValidationException exception.\n// \n//  This parameter does not support attributes of type List or Map.\n","shape":"ExpectedAttributeMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ExpressionAttributeNames":{"Documentation":"// One or more substitution tokens for attribute names in an expression. The\n// following are some use cases for using ExpressionAttributeNames:\n// \n//   To access an attribute whose name conflicts with a DynamoDB reserved word.\n// \n//   To create a placeholder for repeating occurrences of an attribute name\n// in an expression.\n// \n//   To prevent special characters in an attribute name from being misinterpreted\n// in an expression.\n// \n//   Use the # character in an expression to dereference an attribute name.\n// For example, consider the following attribute name:\n// \n//    Percentile \n// \n//   The name of this attribute conflicts with a reserved word, so it cannot\n// be used directly in an expression. (For the complete list of reserved words,\n// see Reserved Words (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html)\n// in the Amazon DynamoDB Developer Guide). To work around this, you could specify\n// the following for ExpressionAttributeNames:\n// \n//    {\"#P\":\"Percentile\"} \n// \n//   You could then use this substitution in an expression, as in this example:\n// \n//    #P = :val \n// \n//    Tokens that begin with the : character are expression attribute values,\n// which are placeholders for the actual value at runtime.\n// \n//  For more information on expression attribute names, see Accessing Item\n// Attributes (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"ExpressionAttributeNameMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ExpressionAttributeValues":{"Documentation":"// One or more values that can be substituted in an expression.\n// \n// Use the : (colon) character in an expression to dereference an attribute\n// value. For example, suppose that you wanted to check whether the value of\n// the ProductStatus attribute was one of the following: \n// \n//  Available | Backordered | Discontinued \n// \n// You would first need to specify ExpressionAttributeValues as follows:\n// \n//  { \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"}, \":disc\":{\"S\":\"Discontinued\"}\n// } \n// \n// You could then use these values in an expression, such as this:\n// \n//  ProductStatus IN (:avail, :back, :disc) \n// \n// For more information on expression attribute values, see Specifying Conditions\n// (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"ExpressionAttributeValueMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Key":{"Documentation":"// The primary key of the item to be updated. Each element consists of an attribute\n// name and a value for that attribute.\n// \n// For the primary key, you must provide all of the attributes. For example,\n// with a simple primary key, you only need to provide a value for the partition\n// key. For a composite primary key, you must provide values for both the partition\n// key and the sort key.\n","shape":"Key","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ReturnConsumedCapacity":{"Documentation":"","shape":"ReturnConsumedCapacity","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ReturnItemCollectionMetrics":{"Documentation":"// Determines whether item collection metrics are returned. If set to SIZE,\n// the response includes statistics about item collections, if any, that were\n// modified during the operation are returned in the response. If set to NONE\n// (the default), no statistics are returned.\n","shape":"ReturnItemCollectionMetrics","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ReturnValues":{"Documentation":"// Use ReturnValues if you want to get the item attributes as they appeared\n// either before or after they were updated. For UpdateItem, the valid values\n// are:\n// \n//    NONE - If ReturnValues is not specified, or if its value is NONE, then\n// nothing is returned. (This setting is the default for ReturnValues.)\n// \n//    ALL_OLD - If UpdateItem overwrote an attribute name-value pair, then\n// the content of the old item is returned.\n// \n//    UPDATED_OLD - The old versions of only the updated attributes are returned.\n// \n//    ALL_NEW - All of the attributes of the new version of the item are returned.\n// \n//    UPDATED_NEW - The new versions of only the updated attributes are returned.\n// \n//   There is no additional cost associated with requesting a return value\n// aside from the small network and processing overhead of receiving a larger\n// response. No Read Capacity Units are consumed.\n// \n// Values returned are strongly consistent\n","shape":"ReturnValue","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"TableName":{"Documentation":"// The name of the table containing the item to update.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"UpdateExpression":{"Documentation":"// An expression that defines one or more attributes to be updated, the action\n// to be performed on them, and new value(s) for them.\n// \n// The following action values are available for UpdateExpression.\n// \n//    SET - Adds one or more attributes and values to an item. If any of these\n// attribute already exist, they are replaced by the new values. You can also\n// use SET to add or subtract from an attribute that is of type Number. For\n// example: SET myNum = myNum + :val \n// \n//  SET supports the following functions:\n// \n//    if_not_exists (path, operand) - if the item does not contain an attribute\n// at the specified path, then if_not_exists evaluates to operand; otherwise,\n// it evaluates to path. You can use this function to avoid overwriting an attribute\n// that may already be present in the item.\n// \n//    list_append (operand, operand) - evaluates to a list with a new element\n// added to it. You can append the new element to the start or the end of the\n// list by reversing the order of the operands.\n// \n//   These function names are case-sensitive.\n// \n//    REMOVE - Removes one or more attributes from an item.\n// \n//    ADD - Adds the specified value to the item, if the attribute does not\n// already exist. If the attribute does exist, then the behavior of ADD depends\n// on the data type of the attribute:\n// \n//   If the existing attribute is a number, and if Value is also a number,\n// then Value is mathematically added to the existing attribute. If Value is\n// a negative number, then it is subtracted from the existing attribute.\n// \n//  If you use ADD to increment or decrement a number value for an item that\n// doesn't exist before the update, DynamoDB uses 0 as the initial value.\n// \n// Similarly, if you use ADD for an existing item to increment or decrement\n// an attribute value that doesn't exist before the update, DynamoDB uses 0\n// as the initial value. For example, suppose that the item you want to update\n// doesn't have an attribute named itemcount, but you decide to ADD the number\n// 3 to this attribute anyway. DynamoDB will create the itemcount attribute,\n// set its initial value to 0, and finally add 3 to it. The result will be a\n// new itemcount attribute in the item, with a value of 3.\n// \n//    If the existing data type is a set and if Value is also a set, then Value\n// is added to the existing set. For example, if the attribute value is the\n// set [1,2], and the ADD action specified [3], then the final attribute value\n// is [1,2,3]. An error occurs if an ADD action is specified for a set attribute\n// and the attribute type specified does not match the existing set type. \n// \n// Both sets must have the same primitive data type. For example, if the existing\n// data type is a set of strings, the Value must also be a set of strings.\n// \n//    The ADD action only supports Number and set data types. In addition,\n// ADD can only be used on top-level attributes, not nested attributes.\n// \n//     DELETE - Deletes an element from a set.\n// \n// If a set of values is specified, then those values are subtracted from the\n// old set. For example, if the attribute value was the set [a,b,c] and the\n// DELETE action specifies [a,c], then the final attribute value is [b]. Specifying\n// an empty set is an error.\n// \n//  The DELETE action only supports set data types. In addition, DELETE can\n// only be used on top-level attributes, not nested attributes.\n// \n//    You can have many actions in a single expression, such as the following:\n// SET a=:value1, b=:value2 DELETE :value3, :value4, :value5 \n// \n// For more information on update expressions, see Modifying Items and Attributes\n// (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.Modifying.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n//   UpdateExpression replaces the legacy AttributeUpdates parameter.\n","shape":"UpdateExpression","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":["TableName","Key"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"Key","Ref":{"Documentation":"// The primary key of the item to be updated. Each element consists of an attribute\n// name and a value for that attribute.\n// \n// For the primary key, you must provide all of the attributes. For example,\n// with a simple primary key, you only need to provide a value for the partition\n// key. For a composite primary key, you must provide values for both the partition\n// key and the sort key.\n","shape":"Key","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"TableName","Ref":{"Documentation":"// The name of the table containing the item to update.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"TableName","Ref":{"Documentation":"// The name of the table containing the item to update.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1}]},"UpdateItemOutput":{"ShapeName":"UpdateItemOutput","Documentation":"// Represents the output of an UpdateItem operation.\n","members":{"Attributes":{"Documentation":"// A map of attribute values as they appeared before the UpdateItem operation.\n// This map only appears if ReturnValues was specified as something other than\n// NONE in the request. Each element represents one attribute.\n","shape":"AttributeMap","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ConsumedCapacity":{"Documentation":"","shape":"ConsumedCapacity","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ItemCollectionMetrics":{"Documentation":"","shape":"ItemCollectionMetrics","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"UpdateTableInput":{"ShapeName":"UpdateTableInput","Documentation":"// Represents the input of an UpdateTable operation.\n","members":{"AttributeDefinitions":{"Documentation":"// An array of attributes that describe the key schema for the table and indexes.\n// If you are adding a new global secondary index to the table, AttributeDefinitions\n// must include the key element(s) of the new index.\n","shape":"AttributeDefinitions","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"GlobalSecondaryIndexUpdates":{"Documentation":"// An array of one or more global secondary indexes for the table. For each\n// index in the array, you can request one action:\n// \n//    Create - add a new global secondary index to the table.\n// \n//    Update - modify the provisioned throughput settings of an existing global\n// secondary index.\n// \n//    Delete - remove a global secondary index from the table.\n// \n//   For more information, see Managing Global Secondary Indexes (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.OnlineOps.html)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"GlobalSecondaryIndexUpdateList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"ProvisionedThroughput":{"Documentation":"","shape":"ProvisionedThroughput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"StreamSpecification":{"Documentation":"// Represents the DynamoDB Streams configuration for the table.\n// \n//  You will receive a ResourceInUseException if you attempt to enable a stream\n// on a table that already has a stream, or if you attempt to disable a stream\n// on a table which does not have a stream.\n","shape":"StreamSpecification","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"TableName":{"Documentation":"// The name of the table to be updated.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":["TableName"],"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":[{"Name":"TableName","Ref":{"Documentation":"// The name of the table to be updated.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":0},{"Name":"TableName","Ref":{"Documentation":"// The name of the table to be updated.\n","shape":"TableName","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":1},{"Name":"AttributeDefinitions","Ref":{"Documentation":"// An array of attributes that describe the key schema for the table and indexes.\n// If you are adding a new global secondary index to the table, AttributeDefinitions\n// must include the key element(s) of the new index.\n","shape":"AttributeDefinitions","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":2},{"Name":"GlobalSecondaryIndexUpdates","Ref":{"Documentation":"// An array of one or more global secondary indexes for the table. For each\n// index in the array, you can request one action:\n// \n//    Create - add a new global secondary index to the table.\n// \n//    Update - modify the provisioned throughput settings of an existing global\n// secondary index.\n// \n//    Delete - remove a global secondary index from the table.\n// \n//   For more information, see Managing Global Secondary Indexes (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.OnlineOps.html)\n// in the Amazon DynamoDB Developer Guide.\n","shape":"GlobalSecondaryIndexUpdateList","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":2},{"Name":"ProvisionedThroughput","Ref":{"Documentation":"","shape":"ProvisionedThroughput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Type":2}]},"UpdateTableOutput":{"ShapeName":"UpdateTableOutput","Documentation":"// Represents the output of an UpdateTable operation.\n","members":{"TableDescription":{"Documentation":"","shape":"TableDescription","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"WriteRequest":{"ShapeName":"WriteRequest","Documentation":"// Represents an operation to perform - either DeleteItem or PutItem. You can\n// only request one of these operations, not both, in a single WriteRequest.\n// If you do need to perform both of these operations, you will need to provide\n// two separate WriteRequest objects.\n","members":{"DeleteRequest":{"Documentation":"// A request to perform a DeleteItem operation.\n","shape":"DeleteRequest","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"PutRequest":{"Documentation":"// A request to perform a PutItem operation.\n","shape":"PutRequest","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false}},"member":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"structure","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":0,"Max":0,"Placeholder":false,"deprecated":false,"Validations":null},"WriteRequests":{"ShapeName":"WriteRequests","Documentation":"\n","members":null,"member":{"Documentation":"","shape":"WriteRequest","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"key":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"value":{"Documentation":"","shape":"","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Required":null,"Payload":"","Type":"list","Exception":false,"Enum":null,"EnumConsts":null,"Flattened":false,"Streaming":false,"Location":"","LocationName":"","idempotencyToken":false,"XMLNamespace":{"Prefix":"","URI":""},"Min":1,"Max":25,"Placeholder":false,"deprecated":false,"Validations":null}},"Waiters":[{"Name":"TableExists","Delay":20,"MaxAttempts":25,"operation":"DescribeTable","Operation":{"ExportedName":"DescribeTable","Name":"DescribeTable","Documentation":"// Returns information about the table, including the current status of the\n// table, when it was created, the primary key schema, and any indexes on the\n// table.\n// \n//  If you issue a DescribeTable request immediately after a CreateTable request,\n// DynamoDB might return a ResourceNotFoundException. This is because DescribeTable\n// uses an eventually consistent query, and the metadata for your table might\n// not be available at that moment. Wait for a few seconds, and then try the\n// DescribeTable request again.\n","HTTP":{"Method":"POST","RequestURI":"/","ResponseCode":0},"input":{"Documentation":"","shape":"DescribeTableInput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"output":{"Documentation":"","shape":"DescribeTableOutput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Paginator":null,"deprecated":false,"authtype":""},"Acceptors":[{"Expected":"ACTIVE","Matcher":"path","State":"success","Argument":"Table.TableStatus"},{"Expected":"ResourceNotFoundException","Matcher":"error","State":"retry","Argument":""}]},{"Name":"TableNotExists","Delay":20,"MaxAttempts":25,"operation":"DescribeTable","Operation":{"ExportedName":"DescribeTable","Name":"DescribeTable","Documentation":"// Returns information about the table, including the current status of the\n// table, when it was created, the primary key schema, and any indexes on the\n// table.\n// \n//  If you issue a DescribeTable request immediately after a CreateTable request,\n// DynamoDB might return a ResourceNotFoundException. This is because DescribeTable\n// uses an eventually consistent query, and the metadata for your table might\n// not be available at that moment. Wait for a few seconds, and then try the\n// DescribeTable request again.\n","HTTP":{"Method":"POST","RequestURI":"/","ResponseCode":0},"input":{"Documentation":"","shape":"DescribeTableInput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"output":{"Documentation":"","shape":"DescribeTableOutput","Location":"","LocationName":"","QueryName":"","Flattened":false,"Streaming":false,"XMLAttribute":false,"XMLNamespace":{"Prefix":"","URI":""},"Payload":"","idempotencyToken":false,"deprecated":false},"Paginator":null,"deprecated":false,"authtype":""},"Acceptors":[{"Expected":"ResourceNotFoundException","Matcher":"error","State":"success","Argument":""}]}],"Documentation":"// This is the Amazon DynamoDB API Reference. This guide provides descriptions\n// of the low-level DynamoDB API.\n// \n// This guide is intended for use with the following DynamoDB documentation:\n// \n//    Amazon DynamoDB Getting Started Guide (http://docs.aws.amazon.com/amazondynamodb/latest/gettingstartedguide/)\n// - provides hands-on exercises that help you learn the basics of working with\n// DynamoDB. If you are new to DynamoDB, we recommend that you begin with the\n// Getting Started Guide. \n// \n//    Amazon DynamoDB Developer Guide (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/)\n// - contains detailed information about DynamoDB concepts, usage, and best\n// practices.\n// \n//    Amazon DynamoDB Streams API Reference (http://docs.aws.amazon.com/dynamodbstreams/latest/APIReference/)\n// - provides descriptions and samples of the DynamoDB Streams API. (For more\n// information, see Capturing Table Activity with DynamoDB Streams (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html)\n// in the Amazon DynamoDB Developer Guide.)\n// \n//   Instead of making the requests to the low-level DynamoDB API directly\n// from your application, we recommend that you use the AWS Software Development\n// Kits (SDKs). The easy-to-use libraries in the AWS SDKs make it unnecessary\n// to call the low-level DynamoDB API directly from your application. The libraries\n// take care of request authentication, serialization, and connection management.\n// For more information, see Using the AWS SDKs with DynamoDB (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/UsingAWSSDK.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n// If you decide to code against the low-level DynamoDB API directly, you will\n// need to write the necessary code to authenticate your requests. For more\n// information on signing your requests, see Using the DynamoDB API (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/API.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n// The following are short descriptions of each low-level API action, organized\n// by function.\n// \n//  Managing Tables \n// \n//    CreateTable - Creates a table with user-specified provisioned throughput\n// settings. You must define a primary key for the table - either a simple primary\n// key (partition key), or a composite primary key (partition key and sort key).\n// Optionally, you can create one or more secondary indexes, which provide fast\n// data access using non-key attributes.\n// \n//    DescribeTable - Returns metadata for a table, such as table size, status,\n// and index information.\n// \n//    UpdateTable - Modifies the provisioned throughput settings for a table.\n// Optionally, you can modify the provisioned throughput settings for global\n// secondary indexes on the table.\n// \n//    ListTables - Returns a list of all tables associated with the current\n// AWS account and endpoint.\n// \n//    DeleteTable - Deletes a table and all of its indexes.\n// \n//   For conceptual information about managing tables, see Working with Tables\n// (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n//  Reading Data \n// \n//    GetItem - Returns a set of attributes for the item that has a given primary\n// key. By default, GetItem performs an eventually consistent read; however,\n// applications can request a strongly consistent read instead.\n// \n//    BatchGetItem - Performs multiple GetItem requests for data items using\n// their primary keys, from one table or multiple tables. The response from\n// BatchGetItem has a size limit of 16 MB and returns a maximum of 100 items.\n// Both eventually consistent and strongly consistent reads can be used.\n// \n//    Query - Returns one or more items from a table or a secondary index.\n// You must provide a specific value for the partition key. You can narrow the\n// scope of the query using comparison operators against a sort key value, or\n// on the index key. Query supports either eventual or strong consistency. A\n// single response has a size limit of 1 MB.\n// \n//    Scan - Reads every item in a table; the result set is eventually consistent.\n// You can limit the number of items returned by filtering the data attributes,\n// using conditional expressions. Scan can be used to enable ad-hoc querying\n// of a table against non-key attributes; however, since this is a full table\n// scan without using an index, Scan should not be used for any application\n// query use case that requires predictable performance.\n// \n//   For conceptual information about reading data, see Working with Items\n// (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html)\n// and Query and Scan Operations (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html)\n// in the Amazon DynamoDB Developer Guide.\n// \n//  Modifying Data \n// \n//    PutItem - Creates a new item, or replaces an existing item with a new\n// item (including all the attributes). By default, if an item in the table\n// already exists with the same primary key, the new item completely replaces\n// the existing item. You can use conditional operators to replace an item only\n// if its attribute values match certain conditions, or to insert a new item\n// only if that item doesn't already exist.\n// \n//    UpdateItem - Modifies the attributes of an existing item. You can also\n// use conditional operators to perform an update only if the item's attribute\n// values match certain conditions.\n// \n//    DeleteItem - Deletes an item in a table by primary key. You can use conditional\n// operators to perform a delete an item only if the item's attribute values\n// match certain conditions.\n// \n//    BatchWriteItem - Performs multiple PutItem and DeleteItem requests across\n// multiple tables in a single request. A failure of any request(s) in the batch\n// will not cause the entire BatchWriteItem operation to fail. Supports batches\n// of up to 25 items to put or delete, with a maximum total request size of\n// 16 MB. \n// \n//   For conceptual information about modifying data, see Working with Items\n// (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html)\n// and Query and Scan Operations (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html)\n// in the Amazon DynamoDB Developer Guide.\n","NoRemoveUnusedShapes":false,"NoRenameToplevelShapes":false,"NoInitMethods":false,"NoStringerMethods":false,"NoConstServiceNames":false,"NoValidataShapeMethods":false,"SvcClientImportPath":"github.com/aws/aws-sdk-go/service"}
